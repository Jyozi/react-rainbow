<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="1369" failures="4" time="18.644">
  <testsuite name="getFormattedValue" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:32" time="1.687" tests="7">
    <testcase classname="getFormattedValue should return the item formated without highligth" name="getFormattedValue should return the item formated without highligth" time="0.006">
    </testcase>
    <testcase classname="getFormattedValue should return the item formated without highligth" name="getFormattedValue should return the item formated without highligth" time="0.001">
    </testcase>
    <testcase classname="getFormattedValue should return the item formated with search term highlighted" name="getFormattedValue should return the item formated with search term highlighted" time="0.004">
    </testcase>
    <testcase classname="getFormattedValue should return the item formated with search term highlighted" name="getFormattedValue should return the item formated with search term highlighted" time="0.001">
    </testcase>
    <testcase classname="getFormattedValue should return the item formated without highligth when values is string" name="getFormattedValue should return the item formated without highligth when values is string" time="0.001">
    </testcase>
    <testcase classname="getFormattedValue should return null when value is empty" name="getFormattedValue should return null when value is empty" time="0">
    </testcase>
    <testcase classname="getFormattedValue should return null when value is null" name="getFormattedValue should return null when value is null" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="formatDateTime" errors="0" failures="4" skipped="0" timestamp="2020-03-11T17:53:32" time="1.777" tests="7">
    <testcase classname="formatDateTime should return an empty string when pass falsy values" name="formatDateTime should return an empty string when pass falsy values" time="0.004">
    </testcase>
    <testcase classname="formatDateTime should return an empty string when pass an invalid date" name="formatDateTime should return an empty string when pass an invalid date" time="0.041">
    </testcase>
    <testcase classname="formatDateTime should return the right formatted date" name="formatDateTime should return the right formatted date" time="0.006">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: &quot;04/24/2019, 1:23 PM&quot;
Received: &quot;04/24/2019, 01:23 PM&quot;
    at Object.toBe (/Users/tahimi/projects/react-rainbow/src/components/DateTimePicker/helpers/__test__/formatDateTime.spec.js:16:62)
    at Object.asyncJestTest (/Users/tahimi/projects/react-rainbow/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)
    at /Users/tahimi/projects/react-rainbow/node_modules/jest-jasmine2/build/queueRunner.js:43:12
    at new Promise (&lt;anonymous&gt;)
    at mapper (/Users/tahimi/projects/react-rainbow/node_modules/jest-jasmine2/build/queueRunner.js:26:19)
    at /Users/tahimi/projects/react-rainbow/node_modules/jest-jasmine2/build/queueRunner.js:73:41
    at processTicksAndRejections (internal/process/task_queues.js:97:5)</failure>
    </testcase>
    <testcase classname="formatDateTime should return the right formatted date when formatStyle large" name="formatDateTime should return the right formatted date when formatStyle large" time="0.002">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: &quot;Wednesday, 04/24/2019, 1:23 PM&quot;
Received: &quot;Wednesday, 04/24/2019, 01:23 PM&quot;
    at Object.toBe (/Users/tahimi/projects/react-rainbow/src/components/DateTimePicker/helpers/__test__/formatDateTime.spec.js:23:71)
    at Object.asyncJestTest (/Users/tahimi/projects/react-rainbow/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)
    at /Users/tahimi/projects/react-rainbow/node_modules/jest-jasmine2/build/queueRunner.js:43:12
    at new Promise (&lt;anonymous&gt;)
    at mapper (/Users/tahimi/projects/react-rainbow/node_modules/jest-jasmine2/build/queueRunner.js:26:19)
    at /Users/tahimi/projects/react-rainbow/node_modules/jest-jasmine2/build/queueRunner.js:73:41
    at processTicksAndRejections (internal/process/task_queues.js:97:5)</failure>
    </testcase>
    <testcase classname="formatDateTime should return the right formatted date when formatStyle small" name="formatDateTime should return the right formatted date when formatStyle small" time="0.002">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: &quot;4/24/19, 1:23 PM&quot;
Received: &quot;4/24/19, 01:23 PM&quot;
    at Object.toBe (/Users/tahimi/projects/react-rainbow/src/components/DateTimePicker/helpers/__test__/formatDateTime.spec.js:32:71)
    at Object.asyncJestTest (/Users/tahimi/projects/react-rainbow/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)
    at /Users/tahimi/projects/react-rainbow/node_modules/jest-jasmine2/build/queueRunner.js:43:12
    at new Promise (&lt;anonymous&gt;)
    at mapper (/Users/tahimi/projects/react-rainbow/node_modules/jest-jasmine2/build/queueRunner.js:26:19)
    at /Users/tahimi/projects/react-rainbow/node_modules/jest-jasmine2/build/queueRunner.js:73:41
    at processTicksAndRejections (internal/process/task_queues.js:97:5)</failure>
    </testcase>
    <testcase classname="formatDateTime should return the right formatted date when formatStyle is wrong" name="formatDateTime should return the right formatted date when formatStyle is wrong" time="0.002">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: &quot;04/24/2019, 1:23 PM&quot;
Received: &quot;04/24/2019, 01:23 PM&quot;
    at Object.toBe (/Users/tahimi/projects/react-rainbow/src/components/DateTimePicker/helpers/__test__/formatDateTime.spec.js:39:69)
    at Object.asyncJestTest (/Users/tahimi/projects/react-rainbow/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)
    at /Users/tahimi/projects/react-rainbow/node_modules/jest-jasmine2/build/queueRunner.js:43:12
    at new Promise (&lt;anonymous&gt;)
    at mapper (/Users/tahimi/projects/react-rainbow/node_modules/jest-jasmine2/build/queueRunner.js:26:19)
    at /Users/tahimi/projects/react-rainbow/node_modules/jest-jasmine2/build/queueRunner.js:73:41
    at processTicksAndRejections (internal/process/task_queues.js:97:5)</failure>
    </testcase>
    <testcase classname="formatDateTime should return the right formatted time when in 24h format" name="formatDateTime should return the right formatted time when in 24h format" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Accordion /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:32" time="2.318" tests="11">
    <testcase classname="&lt;Accordion /&gt; should set the right &quot;state&quot; when onToggleSection is passed and it is not a function" name="&lt;Accordion /&gt; should set the right &quot;state&quot; when onToggleSection is passed and it is not a function" time="0.134">
    </testcase>
    <testcase classname="&lt;Accordion /&gt; should set the right &quot;state&quot; when multiple is passed" name="&lt;Accordion /&gt; should set the right &quot;state&quot; when multiple is passed" time="0.035">
    </testcase>
    <testcase classname="&lt;Accordion /&gt; should not fire an event when click in the AccordionSection and disabled is passed" name="&lt;Accordion /&gt; should not fire an event when click in the AccordionSection and disabled is passed" time="0.025">
    </testcase>
    <testcase classname="&lt;Accordion /&gt; should fire an event with the right arguments when click in the AccordionSection and multiple is not passed" name="&lt;Accordion /&gt; should fire an event with the right arguments when click in the AccordionSection and multiple is not passed" time="0.015">
    </testcase>
    <testcase classname="&lt;Accordion /&gt; should fire an event with the right arguments when click in the second AccordionSection and multiple is passed" name="&lt;Accordion /&gt; should fire an event with the right arguments when click in the second AccordionSection and multiple is passed" time="0.017">
    </testcase>
    <testcase classname="&lt;Accordion /&gt; should fire an event with the right arguments when click in the expanded first AccordionSection" name="&lt;Accordion /&gt; should fire an event with the right arguments when click in the expanded first AccordionSection" time="0.015">
    </testcase>
    <testcase classname="&lt;Accordion /&gt; should fire an event with the right arguments when click in the second AccordionSection, multiple is passed and both AccordionSection are expanded" name="&lt;Accordion /&gt; should fire an event with the right arguments when click in the second AccordionSection, multiple is passed and both AccordionSection are expanded" time="0.027">
    </testcase>
    <testcase classname="&lt;Accordion /&gt; should fire an event with the right arguments when click in the second AccordionSection, it is collapsed for the first time and multiple is passed" name="&lt;Accordion /&gt; should fire an event with the right arguments when click in the second AccordionSection, it is collapsed for the first time and multiple is passed" time="0.023">
    </testcase>
    <testcase classname="&lt;Accordion /&gt; should set ariaExpanded to true in button when the AccordionSection is expanded" name="&lt;Accordion /&gt; should set ariaExpanded to true in button when the AccordionSection is expanded" time="0.01">
    </testcase>
    <testcase classname="&lt;Accordion /&gt; should set ariaExpanded to false in button when the AccordionSection is collapsed" name="&lt;Accordion /&gt; should set ariaExpanded to false in button when the AccordionSection is collapsed" time="0.013">
    </testcase>
    <testcase classname="&lt;Accordion /&gt; should set aria-hidden to false in container of the content when the content is expanded" name="&lt;Accordion /&gt; should set aria-hidden to false in container of the content when the content is expanded" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PickerInput/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:32" time="2.314" tests="17">
    <testcase classname="&lt;PickerInput/&gt; should set an id in the input element" name="&lt;PickerInput/&gt; should set an id in the input element" time="0.087">
    </testcase>
    <testcase classname="&lt;PickerInput/&gt; should set the type passed in the input element" name="&lt;PickerInput/&gt; should set the type passed in the input element" time="0.007">
    </testcase>
    <testcase classname="&lt;PickerInput/&gt; should set the value passed in the input element" name="&lt;PickerInput/&gt; should set the value passed in the input element" time="0.006">
    </testcase>
    <testcase classname="&lt;PickerInput/&gt; should set the placeholder passed in the input element" name="&lt;PickerInput/&gt; should set the placeholder passed in the input element" time="0.006">
    </testcase>
    <testcase classname="&lt;PickerInput/&gt; should fire an event when the user change the input" name="&lt;PickerInput/&gt; should fire an event when the user change the input" time="0.012">
    </testcase>
    <testcase classname="&lt;PickerInput/&gt; should set the tabIndex passed in the input element" name="&lt;PickerInput/&gt; should set the tabIndex passed in the input element" time="0.006">
    </testcase>
    <testcase classname="&lt;PickerInput/&gt; should set the disabled passed in the input element" name="&lt;PickerInput/&gt; should set the disabled passed in the input element" time="0.006">
    </testcase>
    <testcase classname="&lt;PickerInput/&gt; should set the readonly passed in the input element" name="&lt;PickerInput/&gt; should set the readonly passed in the input element" time="0.064">
    </testcase>
    <testcase classname="&lt;PickerInput/&gt; should set required in the input element if it is passed" name="&lt;PickerInput/&gt; should set required in the input element if it is passed" time="0.014">
    </testcase>
    <testcase classname="&lt;PickerInput/&gt; should set the maxLength passed in the Input element" name="&lt;PickerInput/&gt; should set the maxLength passed in the Input element" time="0.006">
    </testcase>
    <testcase classname="&lt;PickerInput/&gt; should set the minLength passed in the Input element" name="&lt;PickerInput/&gt; should set the minLength passed in the Input element" time="0.005">
    </testcase>
    <testcase classname="&lt;PickerInput/&gt; should set the pattern passed in the Input element" name="&lt;PickerInput/&gt; should set the pattern passed in the Input element" time="0.005">
    </testcase>
    <testcase classname="&lt;PickerInput/&gt; should pass a generated id to the Label component and set the same id to the aria-labelledby for the input when a bottomHelpText is passed" name="&lt;PickerInput/&gt; should pass a generated id to the Label component and set the same id to the aria-labelledby for the input when a bottomHelpText is passed" time="0.013">
    </testcase>
    <testcase classname="&lt;PickerInput/&gt; should pass a generated id to the Error element and set the same id to the aria-describedby for the input when a error is passed" name="&lt;PickerInput/&gt; should pass a generated id to the Error element and set the same id to the aria-describedby for the input when a error is passed" time="0.061">
    </testcase>
    <testcase classname="&lt;PickerInput/&gt; should pass the right props to the Label component" name="&lt;PickerInput/&gt; should pass the right props to the Label component" time="0.007">
    </testcase>
    <testcase classname="&lt;PickerInput/&gt; should render StyledPickerInput when readOnly is not passed" name="&lt;PickerInput/&gt; should render StyledPickerInput when readOnly is not passed" time="0.004">
    </testcase>
    <testcase classname="&lt;PickerInput/&gt; should render StyledReadonlyInput when readOnly is passed" name="&lt;PickerInput/&gt; should render StyledReadonlyInput when readOnly is passed" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ProgressIndicator/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:32" time="2.26" tests="4">
    <testcase classname="&lt;ProgressIndicator/&gt; should render the children passed" name="&lt;ProgressIndicator/&gt; should render the children passed" time="0.06">
    </testcase>
    <testcase classname="&lt;ProgressIndicator/&gt; should set the right icon when currentStepName is step-2 and the step-3 has an error" name="&lt;ProgressIndicator/&gt; should set the right icon when currentStepName is step-2 and the step-3 has an error" time="0.159">
    </testcase>
    <testcase classname="&lt;ProgressIndicator/&gt; should set the right assistiveText to the ButtonIcon component when currentStepName is step-2 and the step-3 has an error " name="&lt;ProgressIndicator/&gt; should set the right assistiveText to the ButtonIcon component when currentStepName is step-2 and the step-3 has an error " time="0.08">
    </testcase>
    <testcase classname="&lt;ProgressIndicator/&gt; should fire an event with the right data when the step is clicked" name="&lt;ProgressIndicator/&gt; should fire an event with the right data when the step is clicked" time="0.022">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Accordion/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:32" time="2.413" tests="1">
    <testcase classname="&lt;Accordion/&gt; should be accessible when assistiveText is passed on AccordionSection" name="&lt;Accordion/&gt; should be accessible when assistiveText is passed on AccordionSection" time="0.477">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PlacesLookupComponent/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:32" time="2.449" tests="6">
    <testcase classname="&lt;PlacesLookupComponent/&gt; should not call any google.maps.places service when isScriptLoaded and isScriptLoadSucceed are false" name="&lt;PlacesLookupComponent/&gt; should not call any google.maps.places service when isScriptLoaded and isScriptLoadSucceed are false" time="0.17">
    </testcase>
    <testcase classname="&lt;PlacesLookupComponent/&gt; should not call any google.maps.places service when isScriptLoaded is true and isScriptLoadSucceed is false" name="&lt;PlacesLookupComponent/&gt; should not call any google.maps.places service when isScriptLoaded is true and isScriptLoadSucceed is false" time="0.019">
    </testcase>
    <testcase classname="&lt;PlacesLookupComponent/&gt; should not call AutocompleteService or PlacesService when isScriptLoaded and isScriptLoadSucceed are true but previous isScriptLoaded was true" name="&lt;PlacesLookupComponent/&gt; should not call AutocompleteService or PlacesService when isScriptLoaded and isScriptLoadSucceed are true but previous isScriptLoaded was true" time="0.025">
    </testcase>
    <testcase classname="&lt;PlacesLookupComponent/&gt; should call google.maps.places.AutocompleteService and google.maps.places.PlacesService" name="&lt;PlacesLookupComponent/&gt; should call google.maps.places.AutocompleteService and google.maps.places.PlacesService" time="0.021">
    </testcase>
    <testcase classname="&lt;PlacesLookupComponent/&gt; should be intialized after isScriptLoaded and isScriptLoadSucceed are set to true" name="&lt;PlacesLookupComponent/&gt; should be intialized after isScriptLoaded and isScriptLoadSucceed are set to true" time="0.019">
    </testcase>
    <testcase classname="&lt;PlacesLookupComponent/&gt; should fire onBlur with null when there is not value" name="&lt;PlacesLookupComponent/&gt; should fire onBlur with null when there is not value" time="0.047">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ProgressIndicator/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:32" time="2.534" tests="2">
    <testcase classname="&lt;ProgressIndicator/&gt; should be accessible when label is passed" name="&lt;ProgressIndicator/&gt; should be accessible when label is passed" time="0.437">
    </testcase>
    <testcase classname="&lt;ProgressIndicator/&gt; should be accessible when label is not passed" name="&lt;ProgressIndicator/&gt; should be accessible when label is not passed" time="0.193">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Rating/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:32" time="2.556" tests="1">
    <testcase classname="&lt;Rating/&gt; should be accessible" name="&lt;Rating/&gt; should be accessible" time="0.75">
    </testcase>
  </testsuite>
  <testsuite name="&lt;InputRadio/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:34" time="0.934" tests="1">
    <testcase classname="&lt;InputRadio/&gt; should be accessible when label is passed" name="&lt;InputRadio/&gt; should be accessible when label is passed" time="0.321">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CheckboxGroup/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:34" time="1.196" tests="1">
    <testcase classname="&lt;CheckboxGroup/&gt; should be accessible when all options have a label passed" name="&lt;CheckboxGroup/&gt; should be accessible when all options have a label passed" time="0.563">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ButtonGroup/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:35" time="0.69" tests="1">
    <testcase classname="&lt;ButtonGroup/&gt; should be accessible" name="&lt;ButtonGroup/&gt; should be accessible" time="0.151">
    </testcase>
  </testsuite>
  <testsuite name="&lt;InputBase/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:35" time="0.844" tests="15">
    <testcase classname="&lt;InputBase/&gt; should set an id in the input element" name="&lt;InputBase/&gt; should set an id in the input element" time="0.068">
    </testcase>
    <testcase classname="&lt;InputBase/&gt; should set the type passed in the input element" name="&lt;InputBase/&gt; should set the type passed in the input element" time="0.009">
    </testcase>
    <testcase classname="&lt;InputBase/&gt; should set the value passed in the input element" name="&lt;InputBase/&gt; should set the value passed in the input element" time="0.016">
    </testcase>
    <testcase classname="&lt;InputBase/&gt; should set the placeholder passed in the input element" name="&lt;InputBase/&gt; should set the placeholder passed in the input element" time="0.005">
    </testcase>
    <testcase classname="&lt;InputBase/&gt; should fire an event when the user change the input" name="&lt;InputBase/&gt; should fire an event when the user change the input" time="0.007">
    </testcase>
    <testcase classname="&lt;InputBase/&gt; should set the tabIndex passed in the input element" name="&lt;InputBase/&gt; should set the tabIndex passed in the input element" time="0.007">
    </testcase>
    <testcase classname="&lt;InputBase/&gt; should set the disabled passed in the input element" name="&lt;InputBase/&gt; should set the disabled passed in the input element" time="0.012">
    </testcase>
    <testcase classname="&lt;InputBase/&gt; should set the readonly passed in the input element" name="&lt;InputBase/&gt; should set the readonly passed in the input element" time="0.011">
    </testcase>
    <testcase classname="&lt;InputBase/&gt; should set required in the input element if it is passed" name="&lt;InputBase/&gt; should set required in the input element if it is passed" time="0.016">
    </testcase>
    <testcase classname="&lt;InputBase/&gt; should set the maxLength passed in the Input element" name="&lt;InputBase/&gt; should set the maxLength passed in the Input element" time="0.014">
    </testcase>
    <testcase classname="&lt;InputBase/&gt; should set the minLength passed in the Input element" name="&lt;InputBase/&gt; should set the minLength passed in the Input element" time="0.005">
    </testcase>
    <testcase classname="&lt;InputBase/&gt; should set the pattern passed in the Input element" name="&lt;InputBase/&gt; should set the pattern passed in the Input element" time="0.018">
    </testcase>
    <testcase classname="&lt;InputBase/&gt; should pass a generated id to the Label component and set the same id to the aria-labelledby for the input when a bottomHelpText is passed" name="&lt;InputBase/&gt; should pass a generated id to the Label component and set the same id to the aria-labelledby for the input when a bottomHelpText is passed" time="0.009">
    </testcase>
    <testcase classname="&lt;InputBase/&gt; should pass a generated id to the Error element and set the same id to the aria-describedby for the input when a error is passed" name="&lt;InputBase/&gt; should pass a generated id to the Error element and set the same id to the aria-describedby for the input when a error is passed" time="0.04">
    </testcase>
    <testcase classname="&lt;InputBase/&gt; should pass the right props to the Label component" name="&lt;InputBase/&gt; should pass the right props to the Label component" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Card/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:35" time="0.948" tests="1">
    <testcase classname="&lt;Card/&gt; should be accessible" name="&lt;Card/&gt; should be accessible" time="0.33">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ActivityTimeline/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:35" time="1.045" tests="1">
    <testcase classname="&lt;ActivityTimeline/&gt; should be accessible when label is passed on TimelineMarker" name="&lt;ActivityTimeline/&gt; should be accessible when label is passed on TimelineMarker" time="0.497">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Chart/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:35" time="0.661" tests="1">
    <testcase classname="&lt;Chart/&gt; should be accessible" name="&lt;Chart/&gt; should be accessible" time="0.083">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PickerInput/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:35" time="0.788" tests="1">
    <testcase classname="&lt;PickerInput/&gt; should be accessible when label is passed" name="&lt;PickerInput/&gt; should be accessible when label is passed" time="0.234">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Notification/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:35" time="0.929" tests="1">
    <testcase classname="&lt;Notification/&gt; should be accessible" name="&lt;Notification/&gt; should be accessible" time="0.32">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Input/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:35" time="0.913" tests="3">
    <testcase classname="&lt;Input/&gt; should return the InputRadio component when type radio is passed" name="&lt;Input/&gt; should return the InputRadio component when type radio is passed" time="0.108">
    </testcase>
    <testcase classname="&lt;Input/&gt; should return the InputCheckbox component when type checkbox is passed" name="&lt;Input/&gt; should return the InputCheckbox component when type checkbox is passed" time="0.061">
    </testcase>
    <testcase classname="&lt;Input/&gt; should return the InputBase component when type radio or checkbox are not passed" name="&lt;Input/&gt; should return the InputBase component when type radio or checkbox are not passed" time="0.087">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CheckboxToggle/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:35" time="0.789" tests="1">
    <testcase classname="&lt;CheckboxToggle/&gt; should be accessible when label is passed" name="&lt;CheckboxToggle/&gt; should be accessible when label is passed" time="0.245">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Star /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:36" time="0.679" tests="10">
    <testcase classname="&lt;Star /&gt; should set type radio to the input element" name="&lt;Star /&gt; should set type radio to the input element" time="0.044">
    </testcase>
    <testcase classname="&lt;Star /&gt; should pass a generated id to the input element and set the same id to the htmFor of the label element" name="&lt;Star /&gt; should pass a generated id to the input element and set the same id to the htmFor of the label element" time="0.008">
    </testcase>
    <testcase classname="&lt;Star /&gt; should set the name passed to the name prop of the input element" name="&lt;Star /&gt; should set the name passed to the name prop of the input element" time="0.008">
    </testcase>
    <testcase classname="&lt;Star /&gt; should set the value passed to the value prop of the input element" name="&lt;Star /&gt; should set the value passed to the value prop of the input element" time="0.013">
    </testcase>
    <testcase classname="&lt;Star /&gt; should fire an event when the user click the star" name="&lt;Star /&gt; should fire an event when the user click the star" time="0.016">
    </testcase>
    <testcase classname="&lt;Star /&gt; should render the StarFill when the prop isFilled is true" name="&lt;Star /&gt; should render the StarFill when the prop isFilled is true" time="0.008">
    </testcase>
    <testcase classname="&lt;Star /&gt; should render the StarBordered when the prop isFilled is false" name="&lt;Star /&gt; should render the StarBordered when the prop isFilled is false" time="0.01">
    </testcase>
    <testcase classname="&lt;Star /&gt; should pass the right text to the AssistiveText component" name="&lt;Star /&gt; should pass the right text to the AssistiveText component" time="0.006">
    </testcase>
    <testcase classname="&lt;Star /&gt; should not fire onChange event when readOnly is true" name="&lt;Star /&gt; should not fire onChange event when readOnly is true" time="0.012">
    </testcase>
    <testcase classname="&lt;Star /&gt; should render half star when isFilled and isHalf props are true" name="&lt;Star /&gt; should render half star when isFilled and isHalf props are true" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="&lt;InputCheckbox/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:36" time="0.74" tests="1">
    <testcase classname="&lt;InputCheckbox/&gt; should be accessible when label is passed" name="&lt;InputCheckbox/&gt; should be accessible when label is passed" time="0.195">
    </testcase>
  </testsuite>
  <testsuite name="&lt;RatingItems /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:36" time="0.702" tests="5">
    <testcase classname="&lt;RatingItems /&gt; should pass the right props to the Star component" name="&lt;RatingItems /&gt; should pass the right props to the Star component" time="0.053">
    </testcase>
    <testcase classname="&lt;RatingItems /&gt; should render the right amount of Star components" name="&lt;RatingItems /&gt; should render the right amount of Star components" time="0.025">
    </testcase>
    <testcase classname="&lt;RatingItems /&gt; should set isHalf to true when the value passed is not integer and readOnly is true" name="&lt;RatingItems /&gt; should set isHalf to true when the value passed is not integer and readOnly is true" time="0.025">
    </testcase>
    <testcase classname="&lt;RatingItems /&gt; should set isHalf to false when readOnly is false" name="&lt;RatingItems /&gt; should set isHalf to false when readOnly is false" time="0.027">
    </testcase>
    <testcase classname="&lt;RatingItems /&gt; should pass the right isFilled when the value passed is float" name="&lt;RatingItems /&gt; should pass the right isFilled when the value passed is float" time="0.028">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Input/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:36" time="0.583" tests="1">
    <testcase classname="&lt;Input/&gt; should be focusable" name="&lt;Input/&gt; should be focusable" time="0.059">
    </testcase>
  </testsuite>
  <testsuite name="&lt;InputRadio/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:36" time="0.741" tests="9">
    <testcase classname="&lt;InputRadio/&gt; should set an id in the input element" name="&lt;InputRadio/&gt; should set an id in the input element" time="0.095">
    </testcase>
    <testcase classname="&lt;InputRadio/&gt; should set the value passed in the input element" name="&lt;InputRadio/&gt; should set the value passed in the input element" time="0.013">
    </testcase>
    <testcase classname="&lt;InputRadio/&gt; should fire an event when the user change the input" name="&lt;InputRadio/&gt; should fire an event when the user change the input" time="0.015">
    </testcase>
    <testcase classname="&lt;InputRadio/&gt; should set the tabIndex passed in the input element" name="&lt;InputRadio/&gt; should set the tabIndex passed in the input element" time="0.006">
    </testcase>
    <testcase classname="&lt;InputRadio/&gt; should set the disabled passed in the input element" name="&lt;InputRadio/&gt; should set the disabled passed in the input element" time="0.013">
    </testcase>
    <testcase classname="&lt;InputRadio/&gt; should pass a generated id to the Label component and set the same id to the aria-labelledby for the input when a bottomHelpText is passed" name="&lt;InputRadio/&gt; should pass a generated id to the Label component and set the same id to the aria-labelledby for the input when a bottomHelpText is passed" time="0.009">
    </testcase>
    <testcase classname="&lt;InputRadio/&gt; should pass a generated id to the Error element and set the same id to the aria-describedby for the input when a error is passed" name="&lt;InputRadio/&gt; should pass a generated id to the Error element and set the same id to the aria-describedby for the input when a error is passed" time="0.019">
    </testcase>
    <testcase classname="&lt;InputRadio/&gt; should pass the right props to the Label component" name="&lt;InputRadio/&gt; should pass the right props to the Label component" time="0.01">
    </testcase>
    <testcase classname="&lt;InputRadio/&gt; should set checked prop passed in input element" name="&lt;InputRadio/&gt; should set checked prop passed in input element" time="0.02">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Input/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:36" time="0.828" tests="1">
    <testcase classname="&lt;Input/&gt; should be accessible when label is passed" name="&lt;Input/&gt; should be accessible when label is passed" time="0.194">
    </testcase>
  </testsuite>
  <testsuite name="&lt;InputCheckbox/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:36" time="0.773" tests="9">
    <testcase classname="&lt;InputCheckbox/&gt; should set an id in the input element" name="&lt;InputCheckbox/&gt; should set an id in the input element" time="0.094">
    </testcase>
    <testcase classname="&lt;InputCheckbox/&gt; should set the value passed in the input element" name="&lt;InputCheckbox/&gt; should set the value passed in the input element" time="0.012">
    </testcase>
    <testcase classname="&lt;InputCheckbox/&gt; should fire an event when the user change the input" name="&lt;InputCheckbox/&gt; should fire an event when the user change the input" time="0.022">
    </testcase>
    <testcase classname="&lt;InputCheckbox/&gt; should set the tabIndex passed in the input element" name="&lt;InputCheckbox/&gt; should set the tabIndex passed in the input element" time="0.016">
    </testcase>
    <testcase classname="&lt;InputCheckbox/&gt; should set the disabled passed in the input element" name="&lt;InputCheckbox/&gt; should set the disabled passed in the input element" time="0.011">
    </testcase>
    <testcase classname="&lt;InputCheckbox/&gt; should pass a generated id to the Label component and set the same id to the aria-labelledby for the input when a bottomHelpText is passed" name="&lt;InputCheckbox/&gt; should pass a generated id to the Label component and set the same id to the aria-labelledby for the input when a bottomHelpText is passed" time="0.013">
    </testcase>
    <testcase classname="&lt;InputCheckbox/&gt; should pass a generated id to the Error element and set the same id to the aria-describedby for the input when a error is passed" name="&lt;InputCheckbox/&gt; should pass a generated id to the Error element and set the same id to the aria-describedby for the input when a error is passed" time="0.068">
    </testcase>
    <testcase classname="&lt;InputCheckbox/&gt; should pass the right props to the Label component" name="&lt;InputCheckbox/&gt; should pass the right props to the Label component" time="0.007">
    </testcase>
    <testcase classname="&lt;InputCheckbox/&gt; should set checked prop passed in input element" name="&lt;InputCheckbox/&gt; should set checked prop passed in input element" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="&lt;InputBase/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:36" time="0.717" tests="1">
    <testcase classname="&lt;InputBase/&gt; should be accessible when label is passed" name="&lt;InputBase/&gt; should be accessible when label is passed" time="0.214">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Calendar/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:32" time="4.266" tests="1">
    <testcase classname="&lt;Calendar/&gt; should be accessible" name="&lt;Calendar/&gt; should be accessible" time="2.21">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Card/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:36" time="0.584" tests="3">
    <testcase classname="&lt;Card/&gt; should set to true the isTrue prop in RenderIf" name="&lt;Card/&gt; should set to true the isTrue prop in RenderIf" time="0.006">
    </testcase>
    <testcase classname="&lt;Card/&gt; should set to true the isTrue prop in RenderIf when isLoading" name="&lt;Card/&gt; should set to true the isTrue prop in RenderIf when isLoading" time="0.016">
    </testcase>
    <testcase classname="&lt;Card/&gt; should set to true the isTrue prop in RenderIf when footer is not passed" name="&lt;Card/&gt; should set to true the isTrue prop in RenderIf when footer is not passed" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CheckboxList /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:36" time="0.613" tests="2">
    <testcase classname="&lt;CheckboxList /&gt; should return the right amount of checkboxes " name="&lt;CheckboxList /&gt; should return the right amount of checkboxes " time="0.097">
    </testcase>
    <testcase classname="&lt;CheckboxList /&gt; should pass the right props to the Checkbox component" name="&lt;CheckboxList /&gt; should pass the right props to the Checkbox component" time="0.016">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Notification/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:36" time="0.707" tests="3">
    <testcase classname="&lt;Notification/&gt; should fire an event when the close button is clicked" name="&lt;Notification/&gt; should fire an event when the close button is clicked" time="0.112">
    </testcase>
    <testcase classname="&lt;Notification/&gt; should set the prop size as &quot;small&quot; in ButtonIcon" name="&lt;Notification/&gt; should set the prop size as &quot;small&quot; in ButtonIcon" time="0.012">
    </testcase>
    <testcase classname="&lt;Notification/&gt; should not display the close button when hideCloseButton props is true" name="&lt;Notification/&gt; should not display the close button when hideCloseButton props is true" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CheckboxRadioLabel/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:37" time="0.548" tests="8">
    <testcase classname="&lt;CheckboxRadioLabel/&gt; without hideLabel should set the inputId passed as the htmlFor prop in the label element" name="&lt;CheckboxRadioLabel/&gt; without hideLabel should set the inputId passed as the htmlFor prop in the label element" time="0.026">
    </testcase>
    <testcase classname="&lt;CheckboxRadioLabel/&gt; without hideLabel should set the id passed as the id prop in the label element" name="&lt;CheckboxRadioLabel/&gt; without hideLabel should set the id passed as the id prop in the label element" time="0.004">
    </testcase>
    <testcase classname="&lt;CheckboxRadioLabel/&gt; without hideLabel should render the label passed" name="&lt;CheckboxRadioLabel/&gt; without hideLabel should render the label passed" time="0.008">
    </testcase>
    <testcase classname="&lt;CheckboxRadioLabel/&gt; without hideLabel should render the StyledLabelText component" name="&lt;CheckboxRadioLabel/&gt; without hideLabel should render the StyledLabelText component" time="0.005">
    </testcase>
    <testcase classname="&lt;CheckboxRadioLabel/&gt; with hideLabel should set the inputId passed as the htmlFor prop in the label element" name="&lt;CheckboxRadioLabel/&gt; with hideLabel should set the inputId passed as the htmlFor prop in the label element" time="0.006">
    </testcase>
    <testcase classname="&lt;CheckboxRadioLabel/&gt; with hideLabel should set the id passed as the id prop in the label element" name="&lt;CheckboxRadioLabel/&gt; with hideLabel should set the id passed as the id prop in the label element" time="0.003">
    </testcase>
    <testcase classname="&lt;CheckboxRadioLabel/&gt; with hideLabel should render the label passed" name="&lt;CheckboxRadioLabel/&gt; with hideLabel should render the label passed" time="0.003">
    </testcase>
    <testcase classname="&lt;CheckboxRadioLabel/&gt; with hideLabel should render the HiddenElement component" name="&lt;CheckboxRadioLabel/&gt; with hideLabel should render the HiddenElement component" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PickerInput/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:37" time="0.674" tests="1">
    <testcase classname="&lt;PickerInput/&gt; should be focusable" name="&lt;PickerInput/&gt; should be focusable" time="0.067">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ButtonGroup/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:37" time="0.652" tests="2">
    <testcase classname="&lt;ButtonGroup/&gt; should be accessible, the div element should have role=&quot;group&quot;" name="&lt;ButtonGroup/&gt; should be accessible, the div element should have role=&quot;group&quot;" time="0.059">
    </testcase>
    <testcase classname="&lt;ButtonGroup/&gt; should render the amount of children passed" name="&lt;ButtonGroup/&gt; should render the amount of children passed" time="0.035">
    </testcase>
  </testsuite>
  <testsuite name="Day" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:37" time="0.689" tests="5">
    <testcase classname="Day should render the right day" name="Day should render the right day" time="0.06">
    </testcase>
    <testcase classname="Day should call onChange with the right date when click the button" name="Day should call onChange with the right date when click the button" time="0.021">
    </testcase>
    <testcase classname="Day should render the right day when is adjacent" name="Day should render the right day when is adjacent" time="0.01">
    </testcase>
    <testcase classname="Day should render the right day when is maxDate is less than date" name="Day should render the right day when is maxDate is less than date" time="0.01">
    </testcase>
    <testcase classname="Day should render the right day when is minDate is greater than date" name="Day should render the right day when is minDate is greater than date" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Rating /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:37" time="0.732" tests="2">
    <testcase classname="&lt;Rating /&gt; should set the value of the star hovered to the state and set the value passed to the state when the mouse leave the component" name="&lt;Rating /&gt; should set the value of the star hovered to the state and set the value passed to the state when the mouse leave the component" time="0.135">
    </testcase>
    <testcase classname="&lt;Rating /&gt; should not set the value of the star hovered to the state when readOnly is true" name="&lt;Rating /&gt; should not set the value of the star hovered to the state when readOnly is true" time="0.041">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CheckboxToggle/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:37" time="0.695" tests="6">
    <testcase classname="&lt;CheckboxToggle/&gt; should set type checkbox to the input element" name="&lt;CheckboxToggle/&gt; should set type checkbox to the input element" time="0.062">
    </testcase>
    <testcase classname="&lt;CheckboxToggle/&gt; should pass a generated id to the span element and set the same id to the name, the value and the aria-describedby for the input element if no name is passed" name="&lt;CheckboxToggle/&gt; should pass a generated id to the span element and set the same id to the name, the value and the aria-describedby for the input element if no name is passed" time="0.017">
    </testcase>
    <testcase classname="&lt;CheckboxToggle/&gt; should pass the name to the span element and set the same id to the name, the value and the aria-describedby for the input element if name is passed" name="&lt;CheckboxToggle/&gt; should pass the name to the span element and set the same id to the name, the value and the aria-describedby for the input element if name is passed" time="0.019">
    </testcase>
    <testcase classname="&lt;CheckboxToggle/&gt; should set the value passed to the checked prop of the input element" name="&lt;CheckboxToggle/&gt; should set the value passed to the checked prop of the input element" time="0.008">
    </testcase>
    <testcase classname="&lt;CheckboxToggle/&gt; should fire an event when the user click the checkbox" name="&lt;CheckboxToggle/&gt; should fire an event when the user click the checkbox" time="0.01">
    </testcase>
    <testcase classname="&lt;CheckboxToggle/&gt; should set the disabled passed to the disabled prop of the input element" name="&lt;CheckboxToggle/&gt; should set the disabled passed to the disabled prop of the input element" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="formatDate" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:37" time="0.45" tests="6">
    <testcase classname="formatDate should return an empty string when pass falsy values" name="formatDate should return an empty string when pass falsy values" time="0.003">
    </testcase>
    <testcase classname="formatDate should return an empty string when pass an invalid date" name="formatDate should return an empty string when pass an invalid date" time="0.022">
    </testcase>
    <testcase classname="formatDate should return the right formatted date" name="formatDate should return the right formatted date" time="0.002">
    </testcase>
    <testcase classname="formatDate should return the right formatted date when formatStyle large" name="formatDate should return the right formatted date when formatStyle large" time="0.004">
    </testcase>
    <testcase classname="formatDate should return the right formatted date when formatStyle small" name="formatDate should return the right formatted date when formatStyle small" time="0.002">
    </testcase>
    <testcase classname="formatDate should return the right formatted date when formatStyle is wrong" name="formatDate should return the right formatted date when formatStyle is wrong" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;InputBase/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:37" time="0.807" tests="1">
    <testcase classname="&lt;InputBase/&gt; should be focusable" name="&lt;InputBase/&gt; should be focusable" time="0.107">
    </testcase>
  </testsuite>
  <testsuite name="Calendar" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:32" time="5.137" tests="9">
    <testcase classname="Calendar should render the component when pass falsy values" name="Calendar should render the component when pass falsy values" time="0.996">
    </testcase>
    <testcase classname="Calendar should render the right month" name="Calendar should render the right month" time="0.214">
    </testcase>
    <testcase classname="Calendar should render the prev month" name="Calendar should render the prev month" time="0.38">
    </testcase>
    <testcase classname="Calendar should render the next month" name="Calendar should render the next month" time="0.323">
    </testcase>
    <testcase classname="Calendar should set to disable the prev month button when minDate is greater than prev month date" name="Calendar should set to disable the prev month button when minDate is greater than prev month date" time="0.104">
    </testcase>
    <testcase classname="Calendar should set to disable the next month button when maxDate is less than next month date" name="Calendar should set to disable the next month button when maxDate is less than next month date" time="0.117">
    </testcase>
    <testcase classname="Calendar should render the right month when value is updated" name="Calendar should render the right month when value is updated" time="0.435">
    </testcase>
    <testcase classname="Calendar should change the year" name="Calendar should change the year" time="0.339">
    </testcase>
    <testcase classname="Calendar should set the right attributes in table element" name="Calendar should set the right attributes in table element" time="0.147">
    </testcase>
  </testsuite>
  <testsuite name="&lt;NotificationIcon/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:37" time="0.591" tests="6">
    <testcase classname="&lt;NotificationIcon/&gt; should render the &quot;svg&quot; passed as icon" name="&lt;NotificationIcon/&gt; should render the &quot;svg&quot; passed as icon" time="0.022">
    </testcase>
    <testcase classname="&lt;NotificationIcon/&gt; should render the &quot;InfoIcon&quot; when the string &quot;info&quot; is passed as icon" name="&lt;NotificationIcon/&gt; should render the &quot;InfoIcon&quot; when the string &quot;info&quot; is passed as icon" time="0.006">
    </testcase>
    <testcase classname="&lt;NotificationIcon/&gt; should render the &quot;ErrorIcon&quot; when the string &quot;error&quot; is passed as icon" name="&lt;NotificationIcon/&gt; should render the &quot;ErrorIcon&quot; when the string &quot;error&quot; is passed as icon" time="0.005">
    </testcase>
    <testcase classname="&lt;NotificationIcon/&gt; should render the &quot;WarningIcon&quot; when the string &quot;warning&quot; is passed as icon" name="&lt;NotificationIcon/&gt; should render the &quot;WarningIcon&quot; when the string &quot;warning&quot; is passed as icon" time="0.005">
    </testcase>
    <testcase classname="&lt;NotificationIcon/&gt; should render the &quot;SuccessIcon&quot; when the string &quot;success&quot; is passed as icon" name="&lt;NotificationIcon/&gt; should render the &quot;SuccessIcon&quot; when the string &quot;success&quot; is passed as icon" time="0.022">
    </testcase>
    <testcase classname="&lt;NotificationIcon/&gt; should not render the &quot;icon&quot; when a wrong string is passed as icon" name="&lt;NotificationIcon/&gt; should not render the &quot;icon&quot; when a wrong string is passed as icon" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CheckboxToggle/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:37" time="0.561" tests="1">
    <testcase classname="&lt;CheckboxToggle/&gt; should be focusable" name="&lt;CheckboxToggle/&gt; should be focusable" time="0.076">
    </testcase>
  </testsuite>
  <testsuite name="&lt;HeaderTitle/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:37" time="0.42" tests="1">
    <testcase classname="&lt;HeaderTitle/&gt; should set the title passed" name="&lt;HeaderTitle/&gt; should set the title passed" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CheckboxGroup /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:37" time="0.462" tests="2">
    <testcase classname="&lt;CheckboxGroup /&gt; should set an empty array when the values passed is a &quot;string&quot;" name="&lt;CheckboxGroup /&gt; should set an empty array when the values passed is a &quot;string&quot;" time="0.022">
    </testcase>
    <testcase classname="&lt;CheckboxGroup /&gt; should set the right values when the values passed is not a &quot;string&quot;" name="&lt;CheckboxGroup /&gt; should set the right values when the values passed is not a &quot;string&quot;" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="&lt;InputBaseLabel/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:37" time="0.452" tests="9">
    <testcase classname="&lt;InputBaseLabel/&gt; without hideLabel should set the inputId passed as the htmlFor prop in the label element" name="&lt;InputBaseLabel/&gt; without hideLabel should set the inputId passed as the htmlFor prop in the label element" time="0.027">
    </testcase>
    <testcase classname="&lt;InputBaseLabel/&gt; without hideLabel should set the id passed as the id prop in the label element" name="&lt;InputBaseLabel/&gt; without hideLabel should set the id passed as the id prop in the label element" time="0.007">
    </testcase>
    <testcase classname="&lt;InputBaseLabel/&gt; without hideLabel should set the required prop passed in the RequiredAsterisk component" name="&lt;InputBaseLabel/&gt; without hideLabel should set the required prop passed in the RequiredAsterisk component" time="0.006">
    </testcase>
    <testcase classname="&lt;InputBaseLabel/&gt; without hideLabel should render the label passed" name="&lt;InputBaseLabel/&gt; without hideLabel should render the label passed" time="0.003">
    </testcase>
    <testcase classname="&lt;InputBaseLabel/&gt; without hideLabel should render the LabelText component" name="&lt;InputBaseLabel/&gt; without hideLabel should render the LabelText component" time="0.003">
    </testcase>
    <testcase classname="&lt;InputBaseLabel/&gt; with hideLabel should set the inputId passed as the htmlFor prop in the label element" name="&lt;InputBaseLabel/&gt; with hideLabel should set the inputId passed as the htmlFor prop in the label element" time="0.004">
    </testcase>
    <testcase classname="&lt;InputBaseLabel/&gt; with hideLabel should set the id passed as the id prop in the label element" name="&lt;InputBaseLabel/&gt; with hideLabel should set the id passed as the id prop in the label element" time="0.003">
    </testcase>
    <testcase classname="&lt;InputBaseLabel/&gt; with hideLabel should render the label passed" name="&lt;InputBaseLabel/&gt; with hideLabel should render the label passed" time="0.003">
    </testcase>
    <testcase classname="&lt;InputBaseLabel/&gt; with hideLabel should render the HiddenElement component" name="&lt;InputBaseLabel/&gt; with hideLabel should render the HiddenElement component" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CardBody/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:37" time="0.461" tests="4">
    <testcase classname="&lt;CardBody/&gt; should render the Spinner when isLoading is passed" name="&lt;CardBody/&gt; should render the Spinner when isLoading is passed" time="0.048">
    </testcase>
    <testcase classname="&lt;CardBody/&gt; should not render the Spinner when isLoading is not passed" name="&lt;CardBody/&gt; should not render the Spinner when isLoading is not passed" time="0.002">
    </testcase>
    <testcase classname="&lt;CardBody/&gt; should render the children when isLoading is not passed" name="&lt;CardBody/&gt; should render the children when isLoading is not passed" time="0.002">
    </testcase>
    <testcase classname="&lt;CardBody/&gt; should not render the children when isLoading is passed" name="&lt;CardBody/&gt; should not render the children when isLoading is passed" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="&lt;InputRadio/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:37" time="0.462" tests="1">
    <testcase classname="&lt;InputRadio/&gt; should be focusable" name="&lt;InputRadio/&gt; should be focusable" time="0.047">
    </testcase>
  </testsuite>
  <testsuite name="&lt;InputCheckbox/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:37" time="0.501" tests="1">
    <testcase classname="&lt;InputCheckbox/&gt; should be focusable" name="&lt;InputCheckbox/&gt; should be focusable" time="0.066">
    </testcase>
  </testsuite>
  <testsuite name="getFormattedMonth" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:38" time="0.41" tests="2">
    <testcase classname="getFormattedMonth should return the right month" name="getFormattedMonth should return the right month" time="0.001">
    </testcase>
    <testcase classname="getFormattedMonth should return an empty string when pass an invalid date" name="getFormattedMonth should return an empty string when pass an invalid date" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="&lt;NotificationTitle/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:38" time="0.415" tests="2">
    <testcase classname="&lt;NotificationTitle/&gt; should render the string passed as text in the tag &quot;h1&quot;" name="&lt;NotificationTitle/&gt; should render the string passed as text in the tag &quot;h1&quot;" time="0.02">
    </testcase>
    <testcase classname="&lt;NotificationTitle/&gt; should render the &quot;title&quot; passed as text" name="&lt;NotificationTitle/&gt; should render the &quot;title&quot; passed as text" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="formatDate" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:38" time="0.464" tests="6">
    <testcase classname="formatDate should return an empty string when pass falsy values" name="formatDate should return an empty string when pass falsy values" time="0.001">
    </testcase>
    <testcase classname="formatDate should return an empty string when pass an invalid date" name="formatDate should return an empty string when pass an invalid date" time="0.02">
    </testcase>
    <testcase classname="formatDate should return the right formatted date" name="formatDate should return the right formatted date" time="0.002">
    </testcase>
    <testcase classname="formatDate should return the right formatted date when formatStyle large" name="formatDate should return the right formatted date when formatStyle large" time="0.002">
    </testcase>
    <testcase classname="formatDate should return the right formatted date when formatStyle small" name="formatDate should return the right formatted date when formatStyle small" time="0.003">
    </testcase>
    <testcase classname="formatDate should return the right formatted date when formatStyle is wrong" name="formatDate should return the right formatted date when formatStyle is wrong" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;NotificationDescription/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:38" time="0.409" tests="2">
    <testcase classname="&lt;NotificationDescription/&gt; should render the string passed as text in the tag &quot;p&quot;" name="&lt;NotificationDescription/&gt; should render the string passed as text in the tag &quot;p&quot;" time="0.015">
    </testcase>
    <testcase classname="&lt;NotificationDescription/&gt; should render the &quot;span&quot; passed as text" name="&lt;NotificationDescription/&gt; should render the &quot;span&quot; passed as text" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ActivityTimeline/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:38" time="0.501" tests="1">
    <testcase classname="&lt;ActivityTimeline/&gt; should render the children passed" name="&lt;ActivityTimeline/&gt; should render the children passed" time="0.03">
    </testcase>
  </testsuite>
  <testsuite name="getFirstDayMonth" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:38" time="0.335" tests="2">
    <testcase classname="getFirstDayMonth should return a 2019/03/01 when 2019/03/21" name="getFirstDayMonth should return a 2019/03/01 when 2019/03/21" time="0.004">
    </testcase>
    <testcase classname="getFirstDayMonth should return the firs date of the current month when date passed is invalid" name="getFirstDayMonth should return the firs date of the current month when date passed is invalid" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getSuggestions" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:38" time="0.345" tests="1">
    <testcase classname="getSuggestions should return the suggestions list formated as options list for Lookup (with search term highlighted)" name="getSuggestions should return the suggestions list formated as options list for Lookup (with search term highlighted)" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="getNextFocusedDate" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:38" time="0.349" tests="3">
    <testcase classname="getNextFocusedDate should return the first day of current month when dates are not set" name="getNextFocusedDate should return the first day of current month when dates are not set" time="0.001">
    </testcase>
    <testcase classname="getNextFocusedDate should return the first day of the second date when dates are not in the same month or year" name="getNextFocusedDate should return the first day of the second date when dates are not in the same month or year" time="0.001">
    </testcase>
    <testcase classname="getNextFocusedDate should return the first date passed when dates are in the same month and year" name="getNextFocusedDate should return the first date passed when dates are in the same month and year" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="isSameDay" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:38" time="0.367" tests="3">
    <testcase classname="isSameDay should return true when dates passed are the same" name="isSameDay should return true when dates passed are the same" time="0.002">
    </testcase>
    <testcase classname="isSameDay should return false when dates passed are not the same" name="isSameDay should return false when dates passed are not the same" time="0.001">
    </testcase>
    <testcase classname="isSameDay should return false when pass an invalid date" name="isSameDay should return false when pass an invalid date" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="getSearchForOption" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:38" time="0.391" tests="1">
    <testcase classname="getSearchForOption should return the search term formated as option for Lookup" name="getSearchForOption should return the search term formated as option for Lookup" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="getLocale" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:38" time="0.339" tests="3">
    <testcase classname="getLocale should return the browser local" name="getLocale should return the browser local" time="0.002">
    </testcase>
    <testcase classname="getLocale should return the locale value" name="getLocale should return the locale value" time="0.001">
    </testcase>
    <testcase classname="getLocale should return the localeProp value" name="getLocale should return the localeProp value" time="0">
    </testcase>
  </testsuite>
  <testsuite name="isDateBeyondLimit" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:38" time="0.373" tests="2">
    <testcase classname="isDateBeyondLimit should return true" name="isDateBeyondLimit should return true" time="0.001">
    </testcase>
    <testcase classname="isDateBeyondLimit should return false" name="isDateBeyondLimit should return false" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="compareDates" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:38" time="0.319" tests="3">
    <testcase classname="compareDates should return -1" name="compareDates should return -1" time="0.001">
    </testcase>
    <testcase classname="compareDates should return 0" name="compareDates should return 0" time="0">
    </testcase>
    <testcase classname="compareDates should return 1" name="compareDates should return 1" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;DatePicker/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:32" time="5.871" tests="1">
    <testcase classname="&lt;DatePicker/&gt; should be accessible" name="&lt;DatePicker/&gt; should be accessible" time="0.519">
    </testcase>
  </testsuite>
  <testsuite name="getYearsRange" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:38" time="0.337" tests="2">
    <testcase classname="getYearsRange should return the right years range when only currentMonth is passed" name="getYearsRange should return the right years range when only currentMonth is passed" time="0.003">
    </testcase>
    <testcase classname="getYearsRange should return the right years range when minDate and maxDate are passed" name="getYearsRange should return the right years range when minDate and maxDate are passed" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AssistiveText/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:38" time="0.36" tests="2">
    <testcase classname="&lt;AssistiveText/&gt; should render the span element when the text is passed" name="&lt;AssistiveText/&gt; should render the span element when the text is passed" time="0.023">
    </testcase>
    <testcase classname="&lt;AssistiveText/&gt; should render the text passed" name="&lt;AssistiveText/&gt; should render the text passed" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="isSameMonth" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:38" time="0.395" tests="3">
    <testcase classname="isSameMonth should return true when dates passed are in the same month" name="isSameMonth should return true when dates passed are in the same month" time="0.002">
    </testcase>
    <testcase classname="isSameMonth should return false when dates passed are not in the same month" name="isSameMonth should return false when dates passed are not in the same month" time="0.001">
    </testcase>
    <testcase classname="isSameMonth should return false when pass an invalid date" name="isSameMonth should return false when pass an invalid date" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="getLastDayMonth" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:38" time="0.292" tests="1">
    <testcase classname="getLastDayMonth should return a Date of 2019/03/31 when 2019/03/01" name="getLastDayMonth should return a Date of 2019/03/31 when 2019/03/01" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getSign" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:38" time="0.3" tests="3">
    <testcase classname="getSign should return -1" name="getSign should return -1" time="0.002">
    </testcase>
    <testcase classname="getSign should return 0" name="getSign should return 0" time="0.001">
    </testcase>
    <testcase classname="getSign should return 1" name="getSign should return 1" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="isSameYear" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:38" time="0.31" tests="3">
    <testcase classname="isSameYear should return true when dates passed are in the same year" name="isSameYear should return true when dates passed are in the same year" time="0.001">
    </testcase>
    <testcase classname="isSameYear should return false when dates passed are in the same year" name="isSameYear should return false when dates passed are in the same year" time="0.001">
    </testcase>
    <testcase classname="isSameYear should return false when pass an invalid date" name="isSameYear should return false when pass an invalid date" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="isDateBelowLimit" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:38" time="0.29" tests="2">
    <testcase classname="isDateBelowLimit should return true" name="isDateBelowLimit should return true" time="0.001">
    </testcase>
    <testcase classname="isDateBelowLimit should return false" name="isDateBelowLimit should return false" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Accordion/&gt; utils" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:38" time="0.334" tests="5">
    <testcase classname="&lt;Accordion/&gt; utils insertChildOrderly should insert the child in the right order if the item in the nodes is at middle" name="&lt;Accordion/&gt; utils insertChildOrderly should insert the child in the right order if the item in the nodes is at middle" time="0.003">
    </testcase>
    <testcase classname="&lt;Accordion/&gt; utils insertChildOrderly should insert the child in the right order if the item in the nodes is at end" name="&lt;Accordion/&gt; utils insertChildOrderly should insert the child in the right order if the item in the nodes is at end" time="0.001">
    </testcase>
    <testcase classname="&lt;Accordion/&gt; utils getChildAccordionSectionNodes should call querySelectorAll with the right value" name="&lt;Accordion/&gt; utils getChildAccordionSectionNodes should call querySelectorAll with the right value" time="0.001">
    </testcase>
    <testcase classname="&lt;Accordion/&gt; utils getChildAccordionSectionNodes should return the elements resolved by querySelectorAll" name="&lt;Accordion/&gt; utils getChildAccordionSectionNodes should return the elements resolved by querySelectorAll" time="0">
    </testcase>
    <testcase classname="&lt;Accordion/&gt; utils getChildAccordionSectionNodes should return an empty array if anything is passed" name="&lt;Accordion/&gt; utils getChildAccordionSectionNodes should return an empty array if anything is passed" time="0">
    </testcase>
  </testsuite>
  <testsuite name="getCalendarBounds" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:38" time="0.307" tests="4">
    <testcase classname="getCalendarBounds should return the right bounds when minDate and maxDate are not set" name="getCalendarBounds should return the right bounds when minDate and maxDate are not set" time="0.002">
    </testcase>
    <testcase classname="getCalendarBounds should return the right bounds when minDate is set" name="getCalendarBounds should return the right bounds when minDate is set" time="0">
    </testcase>
    <testcase classname="getCalendarBounds should return the right bounds when maxDate is set" name="getCalendarBounds should return the right bounds when maxDate is set" time="0.001">
    </testcase>
    <testcase classname="getCalendarBounds should return the right bounds when minDate and maxDate are set" name="getCalendarBounds should return the right bounds when minDate and maxDate are set" time="0">
    </testcase>
  </testsuite>
  <testsuite name="&lt;DatePicker/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:32" time="6.241" tests="1">
    <testcase classname="&lt;DatePicker/&gt; should be focusable" name="&lt;DatePicker/&gt; should be focusable" time="0.787">
    </testcase>
  </testsuite>
  <testsuite name="uniqueId" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:38" time="0.295" tests="2">
    <testcase classname="uniqueId should return the unique id" name="uniqueId should return the unique id" time="0.001">
    </testcase>
    <testcase classname="uniqueId should return the unique id with the prefix passed" name="uniqueId should return the unique id with the prefix passed" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="isOptionSelected" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:38" time="0.329" tests="4">
    <testcase classname="isOptionSelected should return false if values is falsy" name="isOptionSelected should return false if values is falsy" time="0.002">
    </testcase>
    <testcase classname="isOptionSelected should return false if values is truty but not an array" name="isOptionSelected should return false if values is truty but not an array" time="0.001">
    </testcase>
    <testcase classname="isOptionSelected should return false if the option does not exists in the values array" name="isOptionSelected should return false if the option does not exists in the values array" time="0.001">
    </testcase>
    <testcase classname="isOptionSelected should return true if the option exists in the values array" name="isOptionSelected should return true if the option exists in the values array" time="0">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TimeSelect/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:32" time="6.479" tests="47">
    <testcase classname="&lt;TimeSelect/&gt; should set hour value to &quot;01&quot; when hour input is focused and press up key" name="&lt;TimeSelect/&gt; should set hour value to &quot;01&quot; when hour input is focused and press up key" time="0.367">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should set hour value to &quot;12&quot; when hour input is focused and press down key" name="&lt;TimeSelect/&gt; should set hour value to &quot;12&quot; when hour input is focused and press down key" time="0.099">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should set hour value to &quot;12&quot; when hour input has 00 as value and press down key while hour input is focused" name="&lt;TimeSelect/&gt; should set hour value to &quot;12&quot; when hour input has 00 as value and press down key while hour input is focused" time="0.092">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should set hour value to &quot;05&quot; when hour input is focused and press up key for 5 times" name="&lt;TimeSelect/&gt; should set hour value to &quot;05&quot; when hour input is focused and press up key for 5 times" time="0.131">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should set the right hour value and focus minutes input" name="&lt;TimeSelect/&gt; should set the right hour value and focus minutes input" time="0.652">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should set hour value to &quot;01&quot; when hour input is focused and click up button" name="&lt;TimeSelect/&gt; should set hour value to &quot;01&quot; when hour input is focused and click up button" time="0.067">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should set hour value to &quot;02&quot; when hour input is focused, click up button and then type &quot;2&quot;" name="&lt;TimeSelect/&gt; should set hour value to &quot;02&quot; when hour input is focused, click up button and then type &quot;2&quot;" time="0.06">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should set hour value to &quot;12&quot; when hour input is focused and click down button" name="&lt;TimeSelect/&gt; should set hour value to &quot;12&quot; when hour input is focused and click down button" time="0.047">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should set hour value to &quot;02&quot; when hour input is focused, click down button and then type &quot;2&quot;" name="&lt;TimeSelect/&gt; should set hour value to &quot;02&quot; when hour input is focused, click down button and then type &quot;2&quot;" time="0.053">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should set hour value to &quot;12&quot; when hour input is focused, type 0 and then blur the hour input" name="&lt;TimeSelect/&gt; should set hour value to &quot;12&quot; when hour input is focused, type 0 and then blur the hour input" time="0.065">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should set hour value to &quot;12&quot; when press right key after press up key and type 0 while hour input is focused" name="&lt;TimeSelect/&gt; should set hour value to &quot;12&quot; when press right key after press up key and type 0 while hour input is focused" time="0.078">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should set hour value to &quot;03&quot; and focus the minutes input when type &quot;03&quot; after press up key while hour input is focused" name="&lt;TimeSelect/&gt; should set hour value to &quot;03&quot; and focus the minutes input when type &quot;03&quot; after press up key while hour input is focused" time="0.066">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should set minutes value to &quot;00&quot; when minutes input is focused and press up key" name="&lt;TimeSelect/&gt; should set minutes value to &quot;00&quot; when minutes input is focused and press up key" time="0.042">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should set minutes value to &quot;59&quot; when minutes input is focused and press down key" name="&lt;TimeSelect/&gt; should set minutes value to &quot;59&quot; when minutes input is focused and press down key" time="0.058">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should set minutes value to &quot;02&quot; when minutes input is focused and press up key for 3 times" name="&lt;TimeSelect/&gt; should set minutes value to &quot;02&quot; when minutes input is focused and press up key for 3 times" time="0.076">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should set the right minutes value and focus ampm input" name="&lt;TimeSelect/&gt; should set the right minutes value and focus ampm input" time="0.379">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should set minutes value to &quot;00&quot; when minutes input is focused and click up button" name="&lt;TimeSelect/&gt; should set minutes value to &quot;00&quot; when minutes input is focused and click up button" time="0.053">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should set minutes value to &quot;02&quot; when minutes input is focused and click up button and then type &quot;2&quot;" name="&lt;TimeSelect/&gt; should set minutes value to &quot;02&quot; when minutes input is focused and click up button and then type &quot;2&quot;" time="0.058">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should set minutes value to &quot;59&quot; when minutes input is focused and click down button" name="&lt;TimeSelect/&gt; should set minutes value to &quot;59&quot; when minutes input is focused and click down button" time="0.062">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should set minutes value to &quot;02&quot; when minutes input is focused and click down button and then type &quot;2&quot;" name="&lt;TimeSelect/&gt; should set minutes value to &quot;02&quot; when minutes input is focused and click down button and then type &quot;2&quot;" time="0.067">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should focus minutes input when hour input is focused and press right key" name="&lt;TimeSelect/&gt; should focus minutes input when hour input is focused and press right key" time="0.053">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should focus minutes input when ampm input is focused and press left key" name="&lt;TimeSelect/&gt; should focus minutes input when ampm input is focused and press left key" time="0.218">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should keep the hour input focused when it is focused and press left key" name="&lt;TimeSelect/&gt; should keep the hour input focused when it is focused and press left key" time="0.071">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should keep the ampm input focused when it is focused and press right key" name="&lt;TimeSelect/&gt; should keep the ampm input focused when it is focused and press right key" time="0.052">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should pass the right defaultValue to AmPmSelect when up or down key is not pressed and does not have value initially" name="&lt;TimeSelect/&gt; should pass the right defaultValue to AmPmSelect when up or down key is not pressed and does not have value initially" time="0.04">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should pass the right value to AmPmSelect when it is focused and up or down key is pressed" name="&lt;TimeSelect/&gt; should pass the right value to AmPmSelect when it is focused and up or down key is pressed" time="0.185">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should reset hour input when has a value and press delete key while it is focused" name="&lt;TimeSelect/&gt; should reset hour input when has a value and press delete key while it is focused" time="0.049">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should reset minutes input when has a value and press delete key while it is focused" name="&lt;TimeSelect/&gt; should reset minutes input when has a value and press delete key while it is focused" time="0.057">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should set hour value to &quot;01&quot; when press up key after reset hour input" name="&lt;TimeSelect/&gt; should set hour value to &quot;01&quot; when press up key after reset hour input" time="0.042">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should set minutes value to &quot;59&quot; when press down key after reset minutes input" name="&lt;TimeSelect/&gt; should set minutes value to &quot;59&quot; when press down key after reset minutes input" time="0.09">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should call event.stopPropagation when press enter key" name="&lt;TimeSelect/&gt; should call event.stopPropagation when press enter key" time="0.019">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should call event.preventDefault when press enter key" name="&lt;TimeSelect/&gt; should call event.preventDefault when press enter key" time="0.025">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should call onCloseModal when when press enter key" name="&lt;TimeSelect/&gt; should call onCloseModal when when press enter key" time="0.018">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should call onCloseModal when click the cancel button" name="&lt;TimeSelect/&gt; should call onCloseModal when click the cancel button" time="0.015">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should call onCloseModal when click the OK button" name="&lt;TimeSelect/&gt; should call onCloseModal when click the OK button" time="0.015">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should call onChange with the right value when press enter key while hour, minutes and ampm has value" name="&lt;TimeSelect/&gt; should call onChange with the right value when press enter key while hour, minutes and ampm has value" time="0.084">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should not call onChange when press enter key while hour, minutes and ampm has not value" name="&lt;TimeSelect/&gt; should not call onChange when press enter key while hour, minutes and ampm has not value" time="0.033">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should call event.preventDefault when something is pasted on hour input" name="&lt;TimeSelect/&gt; should call event.preventDefault when something is pasted on hour input" time="0.019">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should call event.preventDefault when something is dropped on hour input" name="&lt;TimeSelect/&gt; should call event.preventDefault when something is dropped on hour input" time="0.021">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should call event.preventDefault when something is pasted on minutes input" name="&lt;TimeSelect/&gt; should call event.preventDefault when something is pasted on minutes input" time="0.022">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should call event.preventDefault when something is dropped on minutes input" name="&lt;TimeSelect/&gt; should call event.preventDefault when something is dropped on minutes input" time="0.026">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should set the right value when hour24 is true and hour value changes" name="&lt;TimeSelect/&gt; should set the right value when hour24 is true and hour value changes" time="0.398">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should not change focus when hour24 is true and minute value changes" name="&lt;TimeSelect/&gt; should not change focus when hour24 is true and minute value changes" time="0.04">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should not change focus when hour24 is true, minute input has focus and right key is pressed" name="&lt;TimeSelect/&gt; should not change focus when hour24 is true, minute input has focus and right key is pressed" time="0.028">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should call onChange when press enter key while hour, minutes has value" name="&lt;TimeSelect/&gt; should call onChange when press enter key while hour, minutes has value" time="0.039">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should not render ampm input when hour24 is true" name="&lt;TimeSelect/&gt; should not render ampm input when hour24 is true" time="0.017">
    </testcase>
    <testcase classname="&lt;TimeSelect/&gt; should set hour value to &quot;00&quot; when hour24 is true, hour input is focused, type 0 and then blur the hour input" name="&lt;TimeSelect/&gt; should set hour value to &quot;00&quot; when hour24 is true, hour input is focused, type 0 and then blur the hour input" time="0.052">
    </testcase>
  </testsuite>
  <testsuite name="&lt;SidebarItem when href is passed /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:39" time="0.553" tests="4">
    <testcase classname="&lt;SidebarItem when href is passed /&gt; should have aria-current of page if isSelected" name="&lt;SidebarItem when href is passed /&gt; should have aria-current of page if isSelected" time="0.055">
    </testcase>
    <testcase classname="&lt;SidebarItem when href is passed /&gt; should fire an event when click in SidebarItem" name="&lt;SidebarItem when href is passed /&gt; should fire an event when click in SidebarItem" time="0.008">
    </testcase>
    <testcase classname="&lt;SidebarItem when href is not passed /&gt; should have aria-current of page if isSelected" name="&lt;SidebarItem when href is not passed /&gt; should have aria-current of page if isSelected" time="0.009">
    </testcase>
    <testcase classname="&lt;SidebarItem when href is not passed /&gt; should fire an event when click in SidebarItem" name="&lt;SidebarItem when href is not passed /&gt; should fire an event when click in SidebarItem" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="&lt;VisualPicker/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:39" time="0.592" tests="5">
    <testcase classname="&lt;VisualPicker/&gt; should call onChanged with string value" name="&lt;VisualPicker/&gt; should call onChanged with string value" time="0.048">
    </testcase>
    <testcase classname="&lt;VisualPicker/&gt; should call onChanged with array of names" name="&lt;VisualPicker/&gt; should call onChanged with array of names" time="0.027">
    </testcase>
    <testcase classname="&lt;VisualPicker/&gt; should call onChanged with the new option selected when have it has one selected initially" name="&lt;VisualPicker/&gt; should call onChanged with the new option selected when have it has one selected initially" time="0.024">
    </testcase>
    <testcase classname="&lt;VisualPicker/&gt; should call onChanged with the right options when is multiple and the initial value is not an array" name="&lt;VisualPicker/&gt; should call onChanged with the right options when is multiple and the initial value is not an array" time="0.023">
    </testcase>
    <testcase classname="&lt;VisualPicker/&gt; should call onChanged with the right options when is multiple, have values selected initially and deselect one" name="&lt;VisualPicker/&gt; should call onChanged with the right options when is multiple, have values selected initially and deselect one" time="0.028">
    </testcase>
  </testsuite>
  <testsuite name="isContentHidden" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:38" time="1.269" tests="5">
    <testcase classname="isContentHidden should return true when the element has zero size and does not has content" name="isContentHidden should return true when the element has zero size and does not has content" time="0.001">
    </testcase>
    <testcase classname="isContentHidden should return true when the element has zero size and content, but overflow style is other than visible" name="isContentHidden should return true when the element has zero size and content, but overflow style is other than visible" time="0.001">
    </testcase>
    <testcase classname="isContentHidden should return false when the element has zero size and content, but overflow style is visible" name="isContentHidden should return false when the element has zero size and content, but overflow style is visible" time="0">
    </testcase>
    <testcase classname="isContentHidden should return false when the element has not zero size, but display style is other than none" name="isContentHidden should return false when the element has not zero size, but display style is other than none" time="0.001">
    </testcase>
    <testcase classname="isContentHidden should return true when the element has not zero size, but display style is none" name="isContentHidden should return true when the element has not zero size, but display style is none" time="0">
    </testcase>
  </testsuite>
  <testsuite name="CounterManager" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:38" time="1.314" tests="3">
    <testcase classname="CounterManager should set counter to 3" name="CounterManager should set counter to 3" time="0.001">
    </testcase>
    <testcase classname="CounterManager should set counter to 1" name="CounterManager should set counter to 1" time="0.001">
    </testcase>
    <testcase classname="CounterManager should set counter to 0" name="CounterManager should set counter to 0" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AvatarGroup/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:39" time="0.521" tests="1">
    <testcase classname="&lt;AvatarGroup/&gt; should be accessible" name="&lt;AvatarGroup/&gt; should be accessible" time="0.13">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TimePicker/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:39" time="1.002" tests="1">
    <testcase classname="&lt;TimePicker/&gt; should be accessible" name="&lt;TimePicker/&gt; should be accessible" time="0.313">
    </testcase>
  </testsuite>
  <testsuite name="&lt;DatePicker/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:32" time="7.525" tests="11">
    <testcase classname="&lt;DatePicker/&gt; should fire onBlur with undefined when there is not value" name="&lt;DatePicker/&gt; should fire onBlur with undefined when there is not value" time="0.204">
    </testcase>
    <testcase classname="&lt;DatePicker/&gt; should fire onBlur with the value passed" name="&lt;DatePicker/&gt; should fire onBlur with the value passed" time="0.02">
    </testcase>
    <testcase classname="&lt;DatePicker/&gt; should fire onFocus with undefined when there is not value" name="&lt;DatePicker/&gt; should fire onFocus with undefined when there is not value" time="0.022">
    </testcase>
    <testcase classname="&lt;DatePicker/&gt; should fire onFocus with the value passed" name="&lt;DatePicker/&gt; should fire onFocus with the value passed" time="0.021">
    </testcase>
    <testcase classname="&lt;DatePicker/&gt; should call onChange with the right value when the Calendar date is changed" name="&lt;DatePicker/&gt; should call onChange with the right value when the Calendar date is changed" time="0.655">
    </testcase>
    <testcase classname="&lt;DatePicker/&gt; should close the modal when the Calendar date is changed" name="&lt;DatePicker/&gt; should close the modal when the Calendar date is changed" time="0.269">
    </testcase>
    <testcase classname="&lt;DatePicker/&gt; should open the modal when enter or space key is pressed while DatePicker is focused and readOnly is not passed" name="&lt;DatePicker/&gt; should open the modal when enter or space key is pressed while DatePicker is focused and readOnly is not passed" time="0.411">
    </testcase>
    <testcase classname="&lt;DatePicker/&gt; should not open the modal when enter or space key is pressed while DatePicker is focused and readOnly is passed" name="&lt;DatePicker/&gt; should not open the modal when enter or space key is pressed while DatePicker is focused and readOnly is passed" time="0.213">
    </testcase>
    <testcase classname="&lt;DatePicker/&gt; should open the modal and fire onClick when DatePicker is clicked and readOnly is not passed" name="&lt;DatePicker/&gt; should open the modal and fire onClick when DatePicker is clicked and readOnly is not passed" time="0.221">
    </testcase>
    <testcase classname="&lt;DatePicker/&gt; should not open the modal and not fire onClick when DatePicker is clicked and readOnly is passed" name="&lt;DatePicker/&gt; should not open the modal and not fire onClick when DatePicker is clicked and readOnly is passed" time="0.027">
    </testcase>
    <testcase classname="&lt;DatePicker/&gt; should pass the right value to Input component" name="&lt;DatePicker/&gt; should pass the right value to Input component" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TableWithBrowserPagination/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:39" time="1.262" tests="1">
    <testcase classname="&lt;TableWithBrowserPagination/&gt; should be accessible" name="&lt;TableWithBrowserPagination/&gt; should be accessible" time="0.371">
    </testcase>
  </testsuite>
  <testsuite name="&lt;VisualPicker/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:39" time="1.469" tests="3">
    <testcase classname="&lt;VisualPicker/&gt; should be accessible when label is passed" name="&lt;VisualPicker/&gt; should be accessible when label is passed" time="0.431">
    </testcase>
    <testcase classname="&lt;VisualPicker/&gt; should be accessible when multiple option are selected" name="&lt;VisualPicker/&gt; should be accessible when multiple option are selected" time="0.239">
    </testcase>
    <testcase classname="&lt;VisualPicker/&gt; should be accessible when label or description is not passed on VisualPickerOptionFooter" name="&lt;VisualPicker/&gt; should be accessible when label or description is not passed on VisualPickerOptionFooter" time="0.329">
    </testcase>
  </testsuite>
  <testsuite name="&lt;VerticalNavigation/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:39" time="1.302" tests="2">
    <testcase classname="&lt;VerticalNavigation/&gt; should be accessible when use VerticalSection" name="&lt;VerticalNavigation/&gt; should be accessible when use VerticalSection" time="0.341">
    </testcase>
    <testcase classname="&lt;VerticalNavigation/&gt; should be accessible when use VerticalSectionOverflow" name="&lt;VerticalNavigation/&gt; should be accessible when use VerticalSectionOverflow" time="0.445">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TimePicker/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:39" time="1.387" tests="1">
    <testcase classname="&lt;TimePicker/&gt; should be focusable" name="&lt;TimePicker/&gt; should be focusable" time="0.711">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ButtonMenu/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:39" time="0.815" tests="2">
    <testcase classname="&lt;ButtonMenu/&gt; should be accessible when pass assistiveText" name="&lt;ButtonMenu/&gt; should be accessible when pass assistiveText" time="0.271">
    </testcase>
    <testcase classname="&lt;ButtonMenu/&gt; should be accessible when pass title" name="&lt;ButtonMenu/&gt; should be accessible when pass title" time="0.096">
    </testcase>
  </testsuite>
  <testsuite name="&lt;RadioGroup/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:39" time="1.168" tests="1">
    <testcase classname="&lt;RadioGroup/&gt; should be accessible when both all options and the group have a label" name="&lt;RadioGroup/&gt; should be accessible when both all options and the group have a label" time="0.571">
    </testcase>
  </testsuite>
  <testsuite name="findTabbableElements" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:38" time="1.898" tests="5">
    <testcase classname="findTabbableElements should return the 5 tabbable elements" name="findTabbableElements should return the 5 tabbable elements" time="0.064">
    </testcase>
    <testcase classname="findTabbableElements should return an empty array when the are not tabbable elements" name="findTabbableElements should return an empty array when the are not tabbable elements" time="0.011">
    </testcase>
    <testcase classname="findTabbableElements should return one element when there is not tabbable nodes but one has a tabindex of 0" name="findTabbableElements should return one element when there is not tabbable nodes but one has a tabindex of 0" time="0.005">
    </testcase>
    <testcase classname="findTabbableElements should return an empty array when the are not tabbable nodes but one has a tabindex of -1" name="findTabbableElements should return an empty array when the are not tabbable nodes but one has a tabindex of -1" time="0.005">
    </testcase>
    <testcase classname="findTabbableElements should return only 1 tabbable element when there are two but one is disabled" name="findTabbableElements should return only 1 tabbable element when there are two but one is disabled" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CarouselImage /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:40" time="0.546" tests="4">
    <testcase classname="&lt;CarouselImage /&gt; should render an anchor when href is passed" name="&lt;CarouselImage /&gt; should render an anchor when href is passed" time="0.042">
    </testcase>
    <testcase classname="&lt;CarouselImage /&gt; should render a div when href is not passed" name="&lt;CarouselImage /&gt; should render a div when href is not passed" time="0.014">
    </testcase>
    <testcase classname="&lt;CarouselImage /&gt; should set tabIndex to -1 when href is passed" name="&lt;CarouselImage /&gt; should set tabIndex to -1 when href is passed" time="0.011">
    </testcase>
    <testcase classname="&lt;CarouselImage /&gt; should set tabIndex to undefined when href is not passed" name="&lt;CarouselImage /&gt; should set tabIndex to undefined when href is not passed" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TimeSelect/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:39" time="1.638" tests="1">
    <testcase classname="&lt;TimeSelect/&gt; should be accessible" name="&lt;TimeSelect/&gt; should be accessible" time="1.015">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AmPmSelect/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:40" time="0.643" tests="8">
    <testcase classname="&lt;AmPmSelect/&gt; should render the right markup when isFocused prop is false" name="&lt;AmPmSelect/&gt; should render the right markup when isFocused prop is false" time="0.03">
    </testcase>
    <testcase classname="&lt;AmPmSelect/&gt; should render the right markup when isFocused prop is true" name="&lt;AmPmSelect/&gt; should render the right markup when isFocused prop is true" time="0.083">
    </testcase>
    <testcase classname="&lt;AmPmSelect/&gt; should fire the onChange event with &quot;AM&quot; when the component get focus and value and defaultValue are undefined" name="&lt;AmPmSelect/&gt; should fire the onChange event with &quot;AM&quot; when the component get focus and value and defaultValue are undefined" time="0.006">
    </testcase>
    <testcase classname="&lt;AmPmSelect/&gt; should fire the onChange event with the defaultValue passed when the component get focus and the prop value is undefined" name="&lt;AmPmSelect/&gt; should fire the onChange event with the defaultValue passed when the component get focus and the prop value is undefined" time="0.007">
    </testcase>
    <testcase classname="&lt;AmPmSelect/&gt; should render the initial input when component lost focus" name="&lt;AmPmSelect/&gt; should render the initial input when component lost focus" time="0.027">
    </testcase>
    <testcase classname="&lt;AmPmSelect/&gt; should focus the component when the focus method is called and the component is not focused" name="&lt;AmPmSelect/&gt; should focus the component when the focus method is called and the component is not focused" time="0.009">
    </testcase>
    <testcase classname="&lt;AmPmSelect/&gt; should call event.stopPropagation when component is focused and the input with value &quot;AM&quot; is blurred" name="&lt;AmPmSelect/&gt; should call event.stopPropagation when component is focused and the input with value &quot;AM&quot; is blurred" time="0.011">
    </testcase>
    <testcase classname="&lt;AmPmSelect/&gt; should call event.stopPropagation when component is focused and the input with value &quot;PM&quot; is blurred" name="&lt;AmPmSelect/&gt; should call event.stopPropagation when component is focused and the input with value &quot;PM&quot; is blurred" time="0.016">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Pagination/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:40" time="0.748" tests="1">
    <testcase classname="&lt;Pagination/&gt; should be accessible" name="&lt;Pagination/&gt; should be accessible" time="0.318">
    </testcase>
  </testsuite>
  <testsuite name="&lt;RadioItems /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:40" time="0.481" tests="2">
    <testcase classname="&lt;RadioItems /&gt; should return the 3 radios when 3 options are passed" name="&lt;RadioItems /&gt; should return the 3 radios when 3 options are passed" time="0.052">
    </testcase>
    <testcase classname="&lt;RadioItems /&gt; should pass the right props to the Radio component" name="&lt;RadioItems /&gt; should pass the right props to the Radio component" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ButtonMenu/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:40" time="0.662" tests="7">
    <testcase classname="&lt;ButtonMenu/&gt; should pass the icon passed to the ButtonIcon" name="&lt;ButtonMenu/&gt; should pass the icon passed to the ButtonIcon" time="0.043">
    </testcase>
    <testcase classname="&lt;ButtonMenu/&gt; should set the title passed in the ButtonIcon" name="&lt;ButtonMenu/&gt; should set the title passed in the ButtonIcon" time="0.017">
    </testcase>
    <testcase classname="&lt;ButtonMenu/&gt; should set the buttonVariant passed as variant in the ButtonIcon" name="&lt;ButtonMenu/&gt; should set the buttonVariant passed as variant in the ButtonIcon" time="0.031">
    </testcase>
    <testcase classname="&lt;ButtonMenu/&gt; should set the buttonSize passed in the ButtonIcon" name="&lt;ButtonMenu/&gt; should set the buttonSize passed in the ButtonIcon" time="0.039">
    </testcase>
    <testcase classname="&lt;ButtonMenu/&gt; should set the disabled passed in the ButtonIcon" name="&lt;ButtonMenu/&gt; should set the disabled passed in the ButtonIcon" time="0.01">
    </testcase>
    <testcase classname="&lt;ButtonMenu/&gt; should set the buttonShaded passed in the ButtonIcon" name="&lt;ButtonMenu/&gt; should set the buttonShaded passed in the ButtonIcon" time="0.042">
    </testcase>
    <testcase classname="&lt;ButtonMenu/&gt; should set the tabIndex passed in the ButtonIcon" name="&lt;ButtonMenu/&gt; should set the tabIndex passed in the ButtonIcon" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AvatarGroup /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:40" time="0.505" tests="1">
    <testcase classname="&lt;AvatarGroup /&gt; should pass the prop showCounter as isTrue to RenderIf component" name="&lt;AvatarGroup /&gt; should pass the prop showCounter as isTrue to RenderIf component" time="0.053">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PageButtons /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:40" time="0.518" tests="6">
    <testcase classname="&lt;PageButtons /&gt; should render 5 children if pages is grater than 4" name="&lt;PageButtons /&gt; should render 5 children if pages is grater than 4" time="0.046">
    </testcase>
    <testcase classname="&lt;PageButtons /&gt; should render as many children as pages if pages is less than 4" name="&lt;PageButtons /&gt; should render as many children as pages if pages is less than 4" time="0.018">
    </testcase>
    <testcase classname="&lt;PageButtons /&gt; should set aria-current to &quot;page&quot; to the active button element" name="&lt;PageButtons /&gt; should set aria-current to &quot;page&quot; to the active button element" time="0.011">
    </testcase>
    <testcase classname="&lt;PageButtons /&gt; should set aria-current to undefined to the button element if is not active" name="&lt;PageButtons /&gt; should set aria-current to undefined to the button element if is not active" time="0.013">
    </testcase>
    <testcase classname="&lt;PageButtons /&gt; should set aria-label to the button elements" name="&lt;PageButtons /&gt; should set aria-label to the button elements" time="0.009">
    </testcase>
    <testcase classname="&lt;PageButtons /&gt; should call onChange if a page button is clicked" name="&lt;PageButtons /&gt; should call onChange if a page button is clicked" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Pagination /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:40" time="0.589" tests="5">
    <testcase classname="&lt;Pagination /&gt; should disable the previous button if the active page is the first" name="&lt;Pagination /&gt; should disable the previous button if the active page is the first" time="0.077">
    </testcase>
    <testcase classname="&lt;Pagination /&gt; should disable the next button if the active page is the last" name="&lt;Pagination /&gt; should disable the next button if the active page is the last" time="0.03">
    </testcase>
    <testcase classname="&lt;Pagination /&gt; should set aria-label to pagination" name="&lt;Pagination /&gt; should set aria-label to pagination" time="0.013">
    </testcase>
    <testcase classname="&lt;Pagination /&gt; should call the onClick function with the right arguments when the previous page button is clicked" name="&lt;Pagination /&gt; should call the onClick function with the right arguments when the previous page button is clicked" time="0.018">
    </testcase>
    <testcase classname="&lt;Pagination /&gt; should call the onClick function with the right arguments when the next page button is clicked" name="&lt;Pagination /&gt; should call the onClick function with the right arguments when the next page button is clicked" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Avatars /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:40" time="0.562" tests="3">
    <testcase classname="&lt;Avatars /&gt; should render default amount (3) of Avatar components when none maxAvatars is passed" name="&lt;Avatars /&gt; should render default amount (3) of Avatar components when none maxAvatars is passed" time="0.034">
    </testcase>
    <testcase classname="&lt;Avatars /&gt; should render right amount of Avatar components when maxAvatars is passed" name="&lt;Avatars /&gt; should render right amount of Avatar components when maxAvatars is passed" time="0.016">
    </testcase>
    <testcase classname="&lt;Avatars /&gt; should Avatar components have the right props passed" name="&lt;Avatars /&gt; should Avatar components have the right props passed" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="&lt;VerticalNavigation/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:40" time="0.675" tests="6">
    <testcase classname="&lt;VerticalNavigation/&gt; should set the ariaLabel passed as aria-label in the nav element" name="&lt;VerticalNavigation/&gt; should set the ariaLabel passed as aria-label in the nav element" time="0.018">
    </testcase>
    <testcase classname="&lt;VerticalNavigation/&gt; should render the children passed" name="&lt;VerticalNavigation/&gt; should render the children passed" time="0.005">
    </testcase>
    <testcase classname="&lt;VerticalNavigation/&gt; should call onSelect event with the right data when an item is clicked" name="&lt;VerticalNavigation/&gt; should call onSelect event with the right data when an item is clicked" time="0.041">
    </testcase>
    <testcase classname="&lt;VerticalNavigation/&gt; should set tabIndex 0 in the clickable element element when use VerticalSection" name="&lt;VerticalNavigation/&gt; should set tabIndex 0 in the clickable element element when use VerticalSection" time="0.017">
    </testcase>
    <testcase classname="&lt;VerticalNavigation/&gt; should set tabIndex 0 in the clickable element element when use VerticalSectionOverflow and expanded is true" name="&lt;VerticalNavigation/&gt; should set tabIndex 0 in the clickable element element when use VerticalSectionOverflow and expanded is true" time="0.036">
    </testcase>
    <testcase classname="&lt;VerticalNavigation/&gt; should set tabIndex -1 in the clickable element element when use VerticalSectionOverflow and expanded is false" name="&lt;VerticalNavigation/&gt; should set tabIndex -1 in the clickable element element when use VerticalSectionOverflow and expanded is false" time="0.024">
    </testcase>
  </testsuite>
  <testsuite name="hexToRgb" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:40" time="0.361" tests="2">
    <testcase classname="hexToRgb should return the right value in rgb format" name="hexToRgb should return the right value in rgb format" time="0.002">
    </testcase>
    <testcase classname="hexToRgb should return an empty string when wrong color is passed" name="hexToRgb should return an empty string when wrong color is passed" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TimePicker/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:38" time="2.205" tests="13">
    <testcase classname="&lt;TimePicker/&gt; should fire onBlur with undefined when there is not value" name="&lt;TimePicker/&gt; should fire onBlur with undefined when there is not value" time="0.092">
    </testcase>
    <testcase classname="&lt;TimePicker/&gt; should fire onBlur with the value passed" name="&lt;TimePicker/&gt; should fire onBlur with the value passed" time="0.022">
    </testcase>
    <testcase classname="&lt;TimePicker/&gt; should fire onFocus with undefined when there is not value" name="&lt;TimePicker/&gt; should fire onFocus with undefined when there is not value" time="0.019">
    </testcase>
    <testcase classname="&lt;TimePicker/&gt; should fire onFocus with the value passed" name="&lt;TimePicker/&gt; should fire onFocus with the value passed" time="0.014">
    </testcase>
    <testcase classname="&lt;TimePicker/&gt; should set isOpen to true and fire onClick when readOnly is not passed" name="&lt;TimePicker/&gt; should set isOpen to true and fire onClick when readOnly is not passed" time="0.723">
    </testcase>
    <testcase classname="&lt;TimePicker/&gt; should not set isOpen to true and not fire onClick when readOnly is passed" name="&lt;TimePicker/&gt; should not set isOpen to true and not fire onClick when readOnly is passed" time="0.209">
    </testcase>
    <testcase classname="&lt;TimePicker/&gt; should open the modal when enter key or space key is pressed while input is focused and readOnly is not passed" name="&lt;TimePicker/&gt; should open the modal when enter key or space key is pressed while input is focused and readOnly is not passed" time="0.165">
    </testcase>
    <testcase classname="&lt;TimePicker/&gt; should not open the modal when enter key or space key is pressed while input is focused and readOnly is passed" name="&lt;TimePicker/&gt; should not open the modal when enter key or space key is pressed while input is focused and readOnly is passed" time="0.037">
    </testcase>
    <testcase classname="&lt;TimePicker/&gt; should call to focusHourInput when the modal is open" name="&lt;TimePicker/&gt; should call to focusHourInput when the modal is open" time="0.069">
    </testcase>
    <testcase classname="&lt;TimePicker/&gt; should set the right input value when value change dynamically" name="&lt;TimePicker/&gt; should set the right input value when value change dynamically" time="0.024">
    </testcase>
    <testcase classname="&lt;TimePicker/&gt; should initialize value state to the right value when hour24 is passed" name="&lt;TimePicker/&gt; should initialize value state to the right value when hour24 is passed" time="0.01">
    </testcase>
    <testcase classname="&lt;TimePicker/&gt; should initialize value state to the right value when hour24 is not passed" name="&lt;TimePicker/&gt; should initialize value state to the right value when hour24 is not passed" time="0.009">
    </testcase>
    <testcase classname="&lt;TimePicker/&gt; should set the right value state when value prop is changed dynamically" name="&lt;TimePicker/&gt; should set the right value state when value prop is changed dynamically" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="withReduxForm" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:40" time="0.489" tests="5">
    <testcase classname="withReduxForm should render an input element with the right props" name="withReduxForm should render an input element with the right props" time="0.069">
    </testcase>
    <testcase classname="withReduxForm should render an input element with the right props when redux form input and meta objects are passed" name="withReduxForm should render an input element with the right props when redux form input and meta objects are passed" time="0.004">
    </testcase>
    <testcase classname="withReduxForm should pass the right error when redux form meta object is passed but touched and submitFailed are false" name="withReduxForm should pass the right error when redux form meta object is passed but touched and submitFailed are false" time="0.003">
    </testcase>
    <testcase classname="withReduxForm should pass the right error when redux form meta object is passed and touched is true" name="withReduxForm should pass the right error when redux form meta object is passed and touched is true" time="0.002">
    </testcase>
    <testcase classname="withReduxForm should pass the right error when redux form meta object is passed and submitFailed is true" name="withReduxForm should pass the right error when redux form meta object is passed and submitFailed is true" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="lighten" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.348" tests="2">
    <testcase classname="lighten should return the right value with coefficient by default" name="lighten should return the right value with coefficient by default" time="0.002">
    </testcase>
    <testcase classname="lighten should return the right value with custom coefficient" name="lighten should return the right value with custom coefficient" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="abbreviateNumber" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.37" tests="5">
    <testcase classname="abbreviateNumber should return the same number passed when it is less than 1000" name="abbreviateNumber should return the same number passed when it is less than 1000" time="0.002">
    </testcase>
    <testcase classname="abbreviateNumber should attach k suffix when it is greater than 1000 and less than 1 Million" name="abbreviateNumber should attach k suffix when it is greater than 1000 and less than 1 Million" time="0.001">
    </testcase>
    <testcase classname="abbreviateNumber should attach M suffix when it is greater than 1 Million and less than 1 Billion" name="abbreviateNumber should attach M suffix when it is greater than 1 Million and less than 1 Billion" time="0.005">
    </testcase>
    <testcase classname="abbreviateNumber should attach G suffix when it is greater than 1 Billion and less than 1 Trillion" name="abbreviateNumber should attach G suffix when it is greater than 1 Billion and less than 1 Trillion" time="0.002">
    </testcase>
    <testcase classname="abbreviateNumber should return an empty string with invalid numbers" name="abbreviateNumber should return an empty string with invalid numbers" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="&lt;NavigationButton /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:40" time="0.499" tests="3">
    <testcase classname="&lt;NavigationButton /&gt; should call the onClick function when clicked" name="&lt;NavigationButton /&gt; should call the onClick function when clicked" time="0.022">
    </testcase>
    <testcase classname="&lt;NavigationButton /&gt; should not call the onClick function when clicked if disabled" name="&lt;NavigationButton /&gt; should not call the onClick function when clicked if disabled" time="0.013">
    </testcase>
    <testcase classname="&lt;NavigationButton /&gt; should set the aria-disabled to the button element if disabled" name="&lt;NavigationButton /&gt; should set the aria-disabled to the button element if disabled" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="isDark" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.338" tests="2">
    <testcase classname="isDark should return true with a dark color" name="isDark should return true with a dark color" time="0.002">
    </testcase>
    <testcase classname="isDark should return false with a light color" name="isDark should return false with a light color" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Sidebar/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:40" time="0.949" tests="1">
    <testcase classname="&lt;Sidebar/&gt; should be accessible" name="&lt;Sidebar/&gt; should be accessible" time="0.418">
    </testcase>
  </testsuite>
  <testsuite name="normalizeTheme" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.359" tests="4">
    <testcase classname="normalizeTheme should return default values when no valid theme was passed" name="normalizeTheme should return default values when no valid theme was passed" time="0.012">
    </testcase>
    <testcase classname="normalizeTheme should return default values when palette is an empty string" name="normalizeTheme should return default values when palette is an empty string" time="0.001">
    </testcase>
    <testcase classname="normalizeTheme should return default values when palette is an empty object" name="normalizeTheme should return default values when palette is an empty object" time="0.004">
    </testcase>
    <testcase classname="normalizeTheme should return the theme with the brand passed" name="normalizeTheme should return the theme with the brand passed" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Counter /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.398" tests="1">
    <testcase classname="&lt;Counter /&gt; should render the right total number of avatars" name="&lt;Counter /&gt; should render the right total number of avatars" time="0.022">
    </testcase>
  </testsuite>
  <testsuite name="darken" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.349" tests="2">
    <testcase classname="darken should return the right value with coefficient by default" name="darken should return the right value with coefficient by default" time="0.002">
    </testcase>
    <testcase classname="darken should return the right value with custom coefficient" name="darken should return the right value with custom coefficient" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Sidebar&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.352" tests="2">
    <testcase classname="&lt;Sidebar&gt; should render the children passed" name="&lt;Sidebar&gt; should render the children passed" time="0.016">
    </testcase>
    <testcase classname="&lt;Sidebar&gt; should set the ariaLabel passed as aria-label in the nav element" name="&lt;Sidebar&gt; should set the ariaLabel passed as aria-label in the nav element" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TableWithBrowserPagination /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:39" time="2.383" tests="22">
    <testcase classname="&lt;TableWithBrowserPagination /&gt; should show the Pagination when pageSize is less than data length" name="&lt;TableWithBrowserPagination /&gt; should show the Pagination when pageSize is less than data length" time="0.114">
    </testcase>
    <testcase classname="&lt;TableWithBrowserPagination /&gt; should not show the Pagination when pageSize is equal or more than data length" name="&lt;TableWithBrowserPagination /&gt; should not show the Pagination when pageSize is equal or more than data length" time="0.035">
    </testcase>
    <testcase classname="&lt;TableWithBrowserPagination /&gt; should show the Select when the pages amount is greater than 6" name="&lt;TableWithBrowserPagination /&gt; should show the Select when the pages amount is greater than 6" time="0.049">
    </testcase>
    <testcase classname="&lt;TableWithBrowserPagination /&gt; should not show the Select when the pages amount is equal or less than 6" name="&lt;TableWithBrowserPagination /&gt; should not show the Select when the pages amount is equal or less than 6" time="0.061">
    </testcase>
    <testcase classname="&lt;TableWithBrowserPagination /&gt; should pass the right data to Table" name="&lt;TableWithBrowserPagination /&gt; should pass the right data to Table" time="0.017">
    </testcase>
    <testcase classname="&lt;TableWithBrowserPagination /&gt; should pass the right activePage to Pagination" name="&lt;TableWithBrowserPagination /&gt; should pass the right activePage to Pagination" time="0.041">
    </testcase>
    <testcase classname="&lt;TableWithBrowserPagination /&gt; should pass the right pages to Pagination" name="&lt;TableWithBrowserPagination /&gt; should pass the right pages to Pagination" time="0.072">
    </testcase>
    <testcase classname="&lt;TableWithBrowserPagination /&gt; should pass the right value to Select" name="&lt;TableWithBrowserPagination /&gt; should pass the right value to Select" time="0.043">
    </testcase>
    <testcase classname="&lt;TableWithBrowserPagination /&gt; should pass the right pages to Options" name="&lt;TableWithBrowserPagination /&gt; should pass the right pages to Options" time="0.078">
    </testcase>
    <testcase classname="&lt;TableWithBrowserPagination /&gt; should call updateData when pageSize change dynamically" name="&lt;TableWithBrowserPagination /&gt; should call updateData when pageSize change dynamically" time="0.053">
    </testcase>
    <testcase classname="&lt;TableWithBrowserPagination /&gt; should set the current activePage when data change dynamically and activePage is less than pages amount" name="&lt;TableWithBrowserPagination /&gt; should set the current activePage when data change dynamically and activePage is less than pages amount" time="0.093">
    </testcase>
    <testcase classname="&lt;TableWithBrowserPagination /&gt; should set the current activePage when data change dynamically and activePage is equal to pages amount" name="&lt;TableWithBrowserPagination /&gt; should set the current activePage when data change dynamically and activePage is equal to pages amount" time="0.081">
    </testcase>
    <testcase classname="&lt;TableWithBrowserPagination /&gt; should set activePage to 1 when data change dynamically and activePage is greater than pages amount" name="&lt;TableWithBrowserPagination /&gt; should set activePage to 1 when data change dynamically and activePage is greater than pages amount" time="0.105">
    </testcase>
    <testcase classname="&lt;TableWithBrowserPagination /&gt; should call getPageItems with the right data for second time when data change dynamically and activePage is less than pages amount" name="&lt;TableWithBrowserPagination /&gt; should call getPageItems with the right data for second time when data change dynamically and activePage is less than pages amount" time="0.068">
    </testcase>
    <testcase classname="&lt;TableWithBrowserPagination /&gt; should call getPageItems with the right data for second time when data change dynamically and activePage is equal to pages amount" name="&lt;TableWithBrowserPagination /&gt; should call getPageItems with the right data for second time when data change dynamically and activePage is equal to pages amount" time="0.063">
    </testcase>
    <testcase classname="&lt;TableWithBrowserPagination /&gt; should call getPageItems with the right data for second time when data change dynamically and activePage is greater than pages amount" name="&lt;TableWithBrowserPagination /&gt; should call getPageItems with the right data for second time when data change dynamically and activePage is greater than pages amount" time="0.08">
    </testcase>
    <testcase classname="&lt;TableWithBrowserPagination /&gt; should set the right activePage when select a page option in select element" name="&lt;TableWithBrowserPagination /&gt; should set the right activePage when select a page option in select element" time="0.051">
    </testcase>
    <testcase classname="&lt;TableWithBrowserPagination /&gt; should call getPageItems with the right data when select a page option in select element" name="&lt;TableWithBrowserPagination /&gt; should call getPageItems with the right data when select a page option in select element" time="0.048">
    </testcase>
    <testcase classname="&lt;TableWithBrowserPagination /&gt; should call scrollTop when select a page option in select element" name="&lt;TableWithBrowserPagination /&gt; should call scrollTop when select a page option in select element" time="0.05">
    </testcase>
    <testcase classname="&lt;TableWithBrowserPagination /&gt; should set the right activePage when select a page in Pagination" name="&lt;TableWithBrowserPagination /&gt; should set the right activePage when select a page in Pagination" time="0.048">
    </testcase>
    <testcase classname="&lt;TableWithBrowserPagination /&gt; should call getPageItems with the right data when select a page in Pagination" name="&lt;TableWithBrowserPagination /&gt; should call getPageItems with the right data when select a page in Pagination" time="0.044">
    </testcase>
    <testcase classname="&lt;TableWithBrowserPagination /&gt; should call scrollTop when select a page in Pagination" name="&lt;TableWithBrowserPagination /&gt; should call scrollTop when select a page in Pagination" time="0.041">
    </testcase>
  </testsuite>
  <testsuite name="replaceAlpha" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.328" tests="2">
    <testcase classname="replaceAlpha should replace alpha value with the one is passed" name="replaceAlpha should replace alpha value with the one is passed" time="0.001">
    </testcase>
    <testcase classname="replaceAlpha should return an empty string when wrong format is passed or no alpha at all" name="replaceAlpha should return an empty string when wrong format is passed or no alpha at all" time="0">
    </testcase>
  </testsuite>
  <testsuite name="colorToRgba" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.388" tests="4">
    <testcase classname="colorToRgba should return empty string" name="colorToRgba should return empty string" time="0.002">
    </testcase>
    <testcase classname="colorToRgba should return rgba converted value from hex color format" name="colorToRgba should return rgba converted value from hex color format" time="0.001">
    </testcase>
    <testcase classname="colorToRgba should return rgba converted value from rgb or rgba color format" name="colorToRgba should return rgba converted value from rgb or rgba color format" time="0.001">
    </testcase>
    <testcase classname="colorToRgba should return rgba converted value from hsl or hsla color format" name="colorToRgba should return rgba converted value from hsl or hsla color format" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getSingleNewTypedValue" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.328" tests="6">
    <testcase classname="getSingleNewTypedValue should return null when a invalid prev value is passed" name="getSingleNewTypedValue should return null when a invalid prev value is passed" time="0.002">
    </testcase>
    <testcase classname="getSingleNewTypedValue should return null when a invalid value is passed" name="getSingleNewTypedValue should return null when a invalid value is passed" time="0.001">
    </testcase>
    <testcase classname="getSingleNewTypedValue should return the same value passed when a prev value is not passed and a valid value is passed" name="getSingleNewTypedValue should return the same value passed when a prev value is not passed and a valid value is passed" time="0.001">
    </testcase>
    <testcase classname="getSingleNewTypedValue should return null when prev value and value are the same" name="getSingleNewTypedValue should return null when prev value and value are the same" time="0">
    </testcase>
    <testcase classname="getSingleNewTypedValue should return the &quot;2&quot; new value" name="getSingleNewTypedValue should return the &quot;2&quot; new value" time="0.001">
    </testcase>
    <testcase classname="getSingleNewTypedValue should return the &quot;0&quot; new value" name="getSingleNewTypedValue should return the &quot;0&quot; new value" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="attachThemeAttrs" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.379" tests="2">
    <testcase classname="attachThemeAttrs should return a merge object with props and default themes values when props.theme.rainbow is an empty" name="attachThemeAttrs should return a merge object with props and default themes values when props.theme.rainbow is an empty" time="0.024">
    </testcase>
    <testcase classname="attachThemeAttrs should return a merge object with props and props.theme.rainbow when props.theme.rainbow was passed" name="attachThemeAttrs should return a merge object with props and props.theme.rainbow when props.theme.rainbow was passed" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="getNextHour" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.345" tests="6">
    <testcase classname="getNextHour should return the string &quot;1&quot; when no value is passed" name="getNextHour should return the string &quot;1&quot; when no value is passed" time="0.001">
    </testcase>
    <testcase classname="getNextHour should return the string &quot;0&quot; when no value is passed and hour24 is true" name="getNextHour should return the string &quot;0&quot; when no value is passed and hour24 is true" time="0.001">
    </testcase>
    <testcase classname="getNextHour should return the string &quot;1&quot; when value passed converted to Number is equal to 12" name="getNextHour should return the string &quot;1&quot; when value passed converted to Number is equal to 12" time="0.001">
    </testcase>
    <testcase classname="getNextHour should return the string &quot;0&quot; when value passed converted to Number is equal to 23 and hour24 is true" name="getNextHour should return the string &quot;0&quot; when value passed converted to Number is equal to 23 and hour24 is true" time="0">
    </testcase>
    <testcase classname="getNextHour should return the string of the value passed increased by 1 when value passed converted to Number is different to 12" name="getNextHour should return the string of the value passed increased by 1 when value passed converted to Number is different to 12" time="0.014">
    </testcase>
    <testcase classname="getNextHour should return the string of the value passed increased by 1 when value passed converted to Number is different to 23 and hour24 is true" name="getNextHour should return the string of the value passed increased by 1 when value passed converted to Number is different to 23 and hour24 is true" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="get24HourTime" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.384" tests="3">
    <testcase classname="get24HourTime should return the right 24 hour for AM time" name="get24HourTime should return the right 24 hour for AM time" time="0.004">
    </testcase>
    <testcase classname="get24HourTime should return the right 24 hour for PM time" name="get24HourTime should return the right 24 hour for PM time" time="0.003">
    </testcase>
    <testcase classname="get24HourTime should return the right 24 hour when ampm has incorrect value" name="get24HourTime should return the right 24 hour when ampm has incorrect value" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="isValidColor" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.372" tests="2">
    <testcase classname="isValidColor should return true with a valid color" name="isValidColor should return true with a valid color" time="0.004">
    </testcase>
    <testcase classname="isValidColor should return false with an invalid color value" name="isValidColor should return false with an invalid color value" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="withReduxForm" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.36" tests="1">
    <testcase classname="withReduxForm should be focusable" name="withReduxForm should be focusable" time="0.035">
    </testcase>
  </testsuite>
  <testsuite name="recomposeColor" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.407" tests="2">
    <testcase classname="recomposeColor should return the right value" name="recomposeColor should return the right value" time="0.001">
    </testcase>
    <testcase classname="recomposeColor should return an empty string with the wrong color" name="recomposeColor should return an empty string with the wrong color" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getLuminance" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.345" tests="1">
    <testcase classname="getLuminance should return the right value" name="getLuminance should return the right value" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="rgbaToRgb" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.357" tests="2">
    <testcase classname="rgbaToRgb should return the right value in rgb format" name="rgbaToRgb should return the right value in rgb format" time="0.001">
    </testcase>
    <testcase classname="rgbaToRgb should return an empty string when wrong color is passed" name="rgbaToRgb should return an empty string when wrong color is passed" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="decomposeColor" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.392" tests="5">
    <testcase classname="decomposeColor should return an object" name="decomposeColor should return an object" time="0.002">
    </testcase>
    <testcase classname="decomposeColor should return an object with type as string and values as array" name="decomposeColor should return an object with type as string and values as array" time="0.001">
    </testcase>
    <testcase classname="decomposeColor should return the same value when color is decomposed already" name="decomposeColor should return the same value when color is decomposed already" time="0">
    </testcase>
    <testcase classname="decomposeColor should return the right value" name="decomposeColor should return the right value" time="0.002">
    </testcase>
    <testcase classname="decomposeColor should throw an error when it passed a wrong value" name="decomposeColor should throw an error when it passed a wrong value" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="getBrightness" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.41" tests="2">
    <testcase classname="getBrightness should return the right value" name="getBrightness should return the right value" time="0.002">
    </testcase>
    <testcase classname="getBrightness should return the right value when color passed is hsl" name="getBrightness should return the right value when color passed is hsl" time="0">
    </testcase>
  </testsuite>
  <testsuite name="rgbToRgba" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.372" tests="2">
    <testcase classname="rgbToRgba should return the right value in rgba format" name="rgbToRgba should return the right value in rgba format" time="0.002">
    </testcase>
    <testcase classname="rgbToRgba should return an empty string when wrong color is passed" name="rgbToRgba should return an empty string when wrong color is passed" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="normalizeHour" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.372" tests="8">
    <testcase classname="normalizeHour should return an empty string when the value passed is other type than a number" name="normalizeHour should return an empty string when the value passed is other type than a number" time="0.003">
    </testcase>
    <testcase classname="normalizeHour should return &quot;12&quot; when the value passed is &quot;000&quot;" name="normalizeHour should return &quot;12&quot; when the value passed is &quot;000&quot;" time="0">
    </testcase>
    <testcase classname="normalizeHour should return &quot;00&quot; when the value passed is &quot;000&quot; and hour24 is true" name="normalizeHour should return &quot;00&quot; when the value passed is &quot;000&quot; and hour24 is true" time="0.001">
    </testcase>
    <testcase classname="normalizeHour should return &quot;00&quot;" name="normalizeHour should return &quot;00&quot;" time="0.002">
    </testcase>
    <testcase classname="normalizeHour should prefix with 0 when the value is less than 10" name="normalizeHour should prefix with 0 when the value is less than 10" time="0.007">
    </testcase>
    <testcase classname="normalizeHour should return the value passed minus 12 when the value is between 12 and 20" name="normalizeHour should return the value passed minus 12 when the value is between 12 and 20" time="0.002">
    </testcase>
    <testcase classname="normalizeHour should return the value passed when the value is between 12 and 20 and hour24 is true" name="normalizeHour should return the value passed when the value is between 12 and 20 and hour24 is true" time="0.002">
    </testcase>
    <testcase classname="normalizeHour should return &quot;11&quot;" name="normalizeHour should return &quot;11&quot;" time="0">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Options /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.362" tests="2">
    <testcase classname="&lt;Options /&gt; should not render any option when pages is 0" name="&lt;Options /&gt; should not render any option when pages is 0" time="0.016">
    </testcase>
    <testcase classname="&lt;Options /&gt; should render the right amount of options when pages is greater than 1" name="&lt;Options /&gt; should render the right amount of options when pages is greater than 1" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="clamp" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.341" tests="3">
    <testcase classname="clamp should return the same value if it is between 0 and 1" name="clamp should return the same value if it is between 0 and 1" time="0.001">
    </testcase>
    <testcase classname="clamp should return 0 if value is less than 0" name="clamp should return 0 if value is less than 0" time="0.001">
    </testcase>
    <testcase classname="clamp should return 1 if value is greater than 1" name="clamp should return 1 if value is greater than 1" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getPrevHour" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.379" tests="6">
    <testcase classname="getPrevHour should return the string &quot;12&quot; when any value is passed" name="getPrevHour should return the string &quot;12&quot; when any value is passed" time="0.001">
    </testcase>
    <testcase classname="getPrevHour should return the string &quot;23&quot; when no value is passed and hour24 is true" name="getPrevHour should return the string &quot;23&quot; when no value is passed and hour24 is true" time="0.001">
    </testcase>
    <testcase classname="getPrevHour should return the string &quot;12&quot; when value passed converted to Number is equal to 0 or 1" name="getPrevHour should return the string &quot;12&quot; when value passed converted to Number is equal to 0 or 1" time="0.001">
    </testcase>
    <testcase classname="getPrevHour should return the string &quot;23&quot; when value passed converted to Number is equal to 0 and hour24 is true" name="getPrevHour should return the string &quot;23&quot; when value passed converted to Number is equal to 0 and hour24 is true" time="0.001">
    </testcase>
    <testcase classname="getPrevHour should return the string of the value passed decreased by 1 when value passed converted to Number is different to 0 or 1" name="getPrevHour should return the string of the value passed decreased by 1 when value passed converted to Number is different to 0 or 1" time="0.002">
    </testcase>
    <testcase classname="getPrevHour should return the string of the value passed decreased by 1 when value passed converted to Number is different to 0 and hour24 is true" name="getPrevHour should return the string of the value passed decreased by 1 when value passed converted to Number is different to 0 and hour24 is true" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="getContrastRatio" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.374" tests="1">
    <testcase classname="getContrastRatio should return the right value" name="getContrastRatio should return the right value" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="getContrastText" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.374" tests="2">
    <testcase classname="getContrastText should return the right value" name="getContrastText should return the right value" time="0.004">
    </testcase>
    <testcase classname="getContrastText should return an error without background" name="getContrastText should return an error without background" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="getInputValue" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.363" tests="4">
    <testcase classname="getInputValue should return an empty string when value is not passed and placeholder is passed" name="getInputValue should return an empty string when value is not passed and placeholder is passed" time="0.001">
    </testcase>
    <testcase classname="getInputValue should return the value passed" name="getInputValue should return the value passed" time="0.005">
    </testcase>
    <testcase classname="getInputValue should return &quot;--:-- --&quot; when value and placeholder are not passed" name="getInputValue should return &quot;--:-- --&quot; when value and placeholder are not passed" time="0">
    </testcase>
    <testcase classname="getInputValue should return &quot;--:--&quot; when hour24 is true and value and placeholder are falsey" name="getInputValue should return &quot;--:--&quot; when hour24 is true and value and placeholder are falsey" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="hexToRgba" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.413" tests="3">
    <testcase classname="hexToRgba should return the right value in rgba format" name="hexToRgba should return the right value in rgba format" time="0.001">
    </testcase>
    <testcase classname="hexToRgba should return an empty string when wrong color is passed" name="hexToRgba should return an empty string when wrong color is passed" time="0.003">
    </testcase>
    <testcase classname="hexToRgba should return rgba with alpha = 1 wich is the default value" name="hexToRgba should return rgba with alpha = 1 wich is the default value" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="isNumber" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.359" tests="2">
    <testcase classname="isNumber should return true when the value passed is a positive integer number" name="isNumber should return true when the value passed is a positive integer number" time="0.002">
    </testcase>
    <testcase classname="isNumber should return false when the value passed is not a positive integer number" name="isNumber should return false when the value passed is not a positive integer number" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getPageBorderRadius function" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.345" tests="3">
    <testcase classname="getPageBorderRadius function should return square border radius styles for 0 pages" name="getPageBorderRadius function should return square border radius styles for 0 pages" time="0">
    </testcase>
    <testcase classname="getPageBorderRadius function should return rounded border radius for 1 page" name="getPageBorderRadius function should return rounded border radius for 1 page" time="0.001">
    </testcase>
    <testcase classname="getPageBorderRadius function should return squared border radius styles for 10 pages" name="getPageBorderRadius function should return squared border radius styles for 10 pages" time="0">
    </testcase>
  </testsuite>
  <testsuite name="getPrevMinute" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.385" tests="3">
    <testcase classname="getPrevMinute should return the string &quot;59&quot; when any value is passed" name="getPrevMinute should return the string &quot;59&quot; when any value is passed" time="0.001">
    </testcase>
    <testcase classname="getPrevMinute should return the string &quot;59&quot; when value passed converted to Number is equal to 0" name="getPrevMinute should return the string &quot;59&quot; when value passed converted to Number is equal to 0" time="0.001">
    </testcase>
    <testcase classname="getPrevMinute should return the string of the value passed decreased by 1 when value passed converted to Number is different to 0" name="getPrevMinute should return the string of the value passed decreased by 1 when value passed converted to Number is different to 0" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="&lt;getPageItems /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.366" tests="2">
    <testcase classname="&lt;getPageItems /&gt; should return the same data passed when pageSize is greater than data length" name="&lt;getPageItems /&gt; should return the same data passed when pageSize is greater than data length" time="0.001">
    </testcase>
    <testcase classname="&lt;getPageItems /&gt; should return the right sliced data when pageSize is less than data length" name="&lt;getPageItems /&gt; should return the right sliced data when pageSize is less than data length" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="getHour" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.361" tests="2">
    <testcase classname="getHour should return the right hour when value passed is a valid formatted time" name="getHour should return the right hour when value passed is a valid formatted time" time="0.004">
    </testcase>
    <testcase classname="getHour should return an empty string when value passed is falsy" name="getHour should return an empty string when value passed is falsy" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="getAmPm" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.359" tests="3">
    <testcase classname="getAmPm should return &quot;AM&quot; when value passed is a valid formatted time" name="getAmPm should return &quot;AM&quot; when value passed is a valid formatted time" time="0.002">
    </testcase>
    <testcase classname="getAmPm should return &quot;PM&quot; when value passed is a valid formatted time" name="getAmPm should return &quot;PM&quot; when value passed is a valid formatted time" time="0.001">
    </testcase>
    <testcase classname="getAmPm should return undefined when value passed is falsy" name="getAmPm should return undefined when value passed is falsy" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="getDefaultAmPm" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.36" tests="2">
    <testcase classname="getDefaultAmPm should return &quot;PM&quot; when value passed is a number and it is greater than 11 and less than 20" name="getDefaultAmPm should return &quot;PM&quot; when value passed is a number and it is greater than 11 and less than 20" time="0.002">
    </testcase>
    <testcase classname="getDefaultAmPm should return &quot;AM&quot; when value passed is a number and it is less than 11 and greater than 20" name="getDefaultAmPm should return &quot;AM&quot; when value passed is a number and it is less than 11 and greater than 20" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="get12HourTime" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:41" time="0.43" tests="4">
    <testcase classname="get12HourTime should return undefined when the value passed does not exists or is not a string" name="get12HourTime should return undefined when the value passed does not exists or is not a string" time="0.007">
    </testcase>
    <testcase classname="get12HourTime should return undefined when the values passed does not have the right format" name="get12HourTime should return undefined when the values passed does not have the right format" time="0.001">
    </testcase>
    <testcase classname="get12HourTime should return the right 12 hour for AM time" name="get12HourTime should return the right 12 hour for AM time" time="0.002">
    </testcase>
    <testcase classname="get12HourTime should return the right 12 hour for PM time" name="get12HourTime should return the right 12 hour for PM time" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="getFirstItem function" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:42" time="0.364" tests="5">
    <testcase classname="getFirstItem function should return 1 if the activeItem is 1" name="getFirstItem function should return 1 if the activeItem is 1" time="0.005">
    </testcase>
    <testcase classname="getFirstItem function should return 1 if the activeItem is 2" name="getFirstItem function should return 1 if the activeItem is 2" time="0">
    </testcase>
    <testcase classname="getFirstItem function should return 3 if the activeItem is 7" name="getFirstItem function should return 3 if the activeItem is 7" time="0.001">
    </testcase>
    <testcase classname="getFirstItem function should return 3 if the activeItem is 6" name="getFirstItem function should return 3 if the activeItem is 6" time="0">
    </testcase>
    <testcase classname="getFirstItem function should return 2 if the activeItem is 4" name="getFirstItem function should return 2 if the activeItem is 4" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="normalizeMinutes" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:42" time="0.355" tests="4">
    <testcase classname="normalizeMinutes should return an empty string when the value passed is other type than a number" name="normalizeMinutes should return an empty string when the value passed is other type than a number" time="0.003">
    </testcase>
    <testcase classname="normalizeMinutes should return &quot;00&quot;" name="normalizeMinutes should return &quot;00&quot;" time="0.006">
    </testcase>
    <testcase classname="normalizeMinutes should prefix with 0 when the value is less than 10" name="normalizeMinutes should prefix with 0 when the value is less than 10" time="0.002">
    </testcase>
    <testcase classname="normalizeMinutes should return the same value when the value passed is between 10 and 59" name="normalizeMinutes should return the same value when the value passed is between 10 and 59" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AccordionSection/&gt; removeItemFromArray" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:42" time="0.319" tests="1">
    <testcase classname="&lt;AccordionSection/&gt; removeItemFromArray should return a new array without the item to remove" name="&lt;AccordionSection/&gt; removeItemFromArray should return a new array without the item to remove" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="getNextMinute" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:42" time="0.337" tests="3">
    <testcase classname="getNextMinute should return the string &quot;0&quot; when any value is passed" name="getNextMinute should return the string &quot;0&quot; when any value is passed" time="0.001">
    </testcase>
    <testcase classname="getNextMinute should return the string &quot;0&quot; when value passed converted to Number is equal to 59" name="getNextMinute should return the string &quot;0&quot; when value passed converted to Number is equal to 59" time="0.001">
    </testcase>
    <testcase classname="getNextMinute should return the string of the value passed increased by 1 when value passed converted to Number is different to 59" name="getNextMinute should return the string of the value passed increased by 1 when value passed converted to Number is different to 59" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="isChecked" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:42" time="0.337" tests="3">
    <testcase classname="isChecked should return true when value is equal to inputValue and value is truthy" name="isChecked should return true when value is equal to inputValue and value is truthy" time="0.001">
    </testcase>
    <testcase classname="isChecked should return true when defaultValue is equal to inputValue and value is falsy" name="isChecked should return true when defaultValue is equal to inputValue and value is falsy" time="0.002">
    </testcase>
    <testcase classname="isChecked should return true when inputValue is equal to &quot;AM&quot; and defaultValue and value are falsy" name="isChecked should return true when inputValue is equal to &quot;AM&quot; and defaultValue and value are falsy" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getNextAmPmValue" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:42" time="0.333" tests="3">
    <testcase classname="getNextAmPmValue should return the string &quot;PM&quot; when value passed is equal to &quot;AM&quot;" name="getNextAmPmValue should return the string &quot;PM&quot; when value passed is equal to &quot;AM&quot;" time="0.001">
    </testcase>
    <testcase classname="getNextAmPmValue should return the string &quot;PM&quot; when value passed is undefined" name="getNextAmPmValue should return the string &quot;PM&quot; when value passed is undefined" time="0.001">
    </testcase>
    <testcase classname="getNextAmPmValue should return the string &quot;AM&quot; when value passed is different to &quot;AM&quot; or undefined" name="getNextAmPmValue should return the string &quot;AM&quot; when value passed is different to &quot;AM&quot; or undefined" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getMinutes" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:42" time="0.324" tests="2">
    <testcase classname="getMinutes should return the right minutes when value passed is a formatted time" name="getMinutes should return the right minutes when value passed is a formatted time" time="0.003">
    </testcase>
    <testcase classname="getMinutes should return an empty string when value passed is falsy" name="getMinutes should return an empty string when value passed is falsy" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AccordionSection/&gt; isInArray" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:42" time="0.349" tests="2">
    <testcase classname="&lt;AccordionSection/&gt; isInArray should return &quot;true&quot; when an item of the array match" name="&lt;AccordionSection/&gt; isInArray should return &quot;true&quot; when an item of the array match" time="0.001">
    </testcase>
    <testcase classname="&lt;AccordionSection/&gt; isInArray should return &quot;false&quot; when an item of the array not match" name="&lt;AccordionSection/&gt; isInArray should return &quot;false&quot; when an item of the array not match" time="0">
    </testcase>
  </testsuite>
  <testsuite name="addMonths" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:42" time="0.322" tests="1">
    <testcase classname="addMonths should return a date 2 month after" name="addMonths should return a date 2 month after" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="resolveOptions function" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:42" time="0.371" tests="6">
    <testcase classname="resolveOptions function should return the conf option with legend parameters only" name="resolveOptions function should return the conf option with legend parameters only" time="0.002">
    </testcase>
    <testcase classname="resolveOptions function should return the conf option with legend and animation parameters" name="resolveOptions function should return the conf option with legend and animation parameters" time="0.002">
    </testcase>
    <testcase classname="resolveOptions function should return the conf option with legend and line parameters" name="resolveOptions function should return the conf option with legend and line parameters" time="0.002">
    </testcase>
    <testcase classname="resolveOptions function should return the conf option with legend and curves parameters" name="resolveOptions function should return the conf option with legend and curves parameters" time="0.001">
    </testcase>
    <testcase classname="resolveOptions function should return the conf option with legend and stacked parameters" name="resolveOptions function should return the conf option with legend and stacked parameters" time="0.002">
    </testcase>
    <testcase classname="resolveOptions function should return the conf option with all parameters" name="resolveOptions function should return the conf option with all parameters" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;GoogleAddressLookup/&gt;" errors="0" failures="0" skipped="1" timestamp="2020-03-11T17:53:42" time="0.624" tests="1">
    <testcase classname="&lt;GoogleAddressLookup/&gt; should be accessible" name="&lt;GoogleAddressLookup/&gt; should be accessible" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="&lt;DirectionalFooter on ImportRecordsFlow/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:42" time="0.802" tests="1">
    <testcase classname="&lt;DirectionalFooter on ImportRecordsFlow/&gt; should be accessible" name="&lt;DirectionalFooter on ImportRecordsFlow/&gt; should be accessible" time="0.385">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Tabset /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:42" time="1.172" tests="14">
    <testcase classname="&lt;Tabset /&gt; should render the children passed" name="&lt;Tabset /&gt; should render the children passed" time="0.033">
    </testcase>
    <testcase classname="&lt;Tabset /&gt; should set isActive to true only on the third Tab when activeTabName is tab-3" name="&lt;Tabset /&gt; should set isActive to true only on the third Tab when activeTabName is tab-3" time="0.112">
    </testcase>
    <testcase classname="&lt;Tabset /&gt; should call onSelect event with the right data when an item is clicked" name="&lt;Tabset /&gt; should call onSelect event with the right data when an item is clicked" time="0.02">
    </testcase>
    <testcase classname="&lt;Tabset /&gt; should call scrollToSelectedTab function with the right data when an item is clicked" name="&lt;Tabset /&gt; should call scrollToSelectedTab function with the right data when an item is clicked" time="0.015">
    </testcase>
    <testcase classname="&lt;Tabset /&gt; should not call updateButtonsVisibility function if any child is changed" name="&lt;Tabset /&gt; should not call updateButtonsVisibility function if any child is changed" time="0.021">
    </testcase>
    <testcase classname="&lt;Tabset /&gt; should call updateButtonsVisibility function when a child is changed" name="&lt;Tabset /&gt; should call updateButtonsVisibility function when a child is changed" time="0.023">
    </testcase>
    <testcase classname="&lt;Tabset /&gt; should call updateButtonsVisibility function and set isFirstTime to false when all children are registered and is first time" name="&lt;Tabset /&gt; should call updateButtonsVisibility function and set isFirstTime to false when all children are registered and is first time" time="0.021">
    </testcase>
    <testcase classname="&lt;Tabset /&gt; should set the left button disabled to true" name="&lt;Tabset /&gt; should set the left button disabled to true" time="0.16">
    </testcase>
    <testcase classname="&lt;Tabset /&gt; should set the right button disabled to true" name="&lt;Tabset /&gt; should set the right button disabled to true" time="0.049">
    </testcase>
    <testcase classname="&lt;Tabset /&gt; should set the areButtonsVisible to true when children total width is more than tabset width" name="&lt;Tabset /&gt; should set the areButtonsVisible to true when children total width is more than tabset width" time="0.041">
    </testcase>
    <testcase classname="&lt;Tabset /&gt; should set the areButtonsVisible to false when children total width is less than tabset width" name="&lt;Tabset /&gt; should set the areButtonsVisible to false when children total width is less than tabset width" time="0.036">
    </testcase>
    <testcase classname="&lt;Tabset /&gt; should set the right scroll motion when click on the first tab" name="&lt;Tabset /&gt; should set the right scroll motion when click on the first tab" time="0.04">
    </testcase>
    <testcase classname="&lt;Tabset /&gt; should set the right scroll motion when click on a tab that is out of view on the left side" name="&lt;Tabset /&gt; should set the right scroll motion when click on a tab that is out of view on the left side" time="0.019">
    </testcase>
    <testcase classname="&lt;Tabset /&gt; should set the right scroll motion when click on a tab that is out of view on the right side" name="&lt;Tabset /&gt; should set the right scroll motion when click on a tab that is out of view on the right side" time="0.031">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Row /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:42" time="0.948" tests="9">
    <testcase classname="&lt;Row /&gt; should return a tr element with no children when columns is not passed" name="&lt;Row /&gt; should return a tr element with no children when columns is not passed" time="0.036">
    </testcase>
    <testcase classname="&lt;Row /&gt; should return the amount of Cell components that correspond with the columns" name="&lt;Row /&gt; should return the amount of Cell components that correspond with the columns" time="0.016">
    </testcase>
    <testcase classname="&lt;Row /&gt; should set the right value to isFirst prop in Cell component" name="&lt;Row /&gt; should set the right value to isFirst prop in Cell component" time="0.01">
    </testcase>
    <testcase classname="&lt;Row /&gt; should set empty string to value prop in Cell component when the column field does not exists" name="&lt;Row /&gt; should set empty string to value prop in Cell component when the column field does not exists" time="0.033">
    </testcase>
    <testcase classname="&lt;Row /&gt; should set the right value prop in Cell component when use dot notation in field" name="&lt;Row /&gt; should set the right value prop in Cell component when use dot notation in field" time="0.01">
    </testcase>
    <testcase classname="&lt;Row /&gt; should set aria-selected in tr element to false when the row is not selected" name="&lt;Row /&gt; should set aria-selected in tr element to false when the row is not selected" time="0.005">
    </testcase>
    <testcase classname="&lt;Row /&gt; should set aria-selected in tr element to true when the row is selected" name="&lt;Row /&gt; should set aria-selected in tr element to true when the row is selected" time="0.009">
    </testcase>
    <testcase classname="&lt;Row /&gt; should set the right value to isFirst prop in Cell component when the firs column is selectable checkbox" name="&lt;Row /&gt; should set the right value to isFirst prop in Cell component when the firs column is selectable checkbox" time="0.082">
    </testcase>
    <testcase classname="&lt;Row /&gt; should render LoadingCells component when data type is LOADING" name="&lt;Row /&gt; should render LoadingCells component when data type is LOADING" time="0.052">
    </testcase>
  </testsuite>
  <testsuite name="&lt;SelectableCell /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:42" time="0.88" tests="18">
    <testcase classname="&lt;SelectableCell /&gt; should render a td element with role &quot;gridcell&quot;" name="&lt;SelectableCell /&gt; should render a td element with role &quot;gridcell&quot;" time="0.069">
    </testcase>
    <testcase classname="&lt;SelectableCell /&gt; should set the right name prop to Input component" name="&lt;SelectableCell /&gt; should set the right name prop to Input component" time="0.017">
    </testcase>
    <testcase classname="&lt;SelectableCell /&gt; should set the type prop in Input component to checkbox by default" name="&lt;SelectableCell /&gt; should set the type prop in Input component to checkbox by default" time="0.01">
    </testcase>
    <testcase classname="&lt;SelectableCell /&gt; should set the type prop in Input component to radio when inputType passed is &quot;radio&quot;" name="&lt;SelectableCell /&gt; should set the type prop in Input component to radio when inputType passed is &quot;radio&quot;" time="0.04">
    </testcase>
    <testcase classname="&lt;SelectableCell /&gt; should set the checked prop in Input component to true when isSelected is passed" name="&lt;SelectableCell /&gt; should set the checked prop in Input component to true when isSelected is passed" time="0.009">
    </testcase>
    <testcase classname="&lt;SelectableCell /&gt; should set the disabled prop in Input component to true when isDisabled is passed" name="&lt;SelectableCell /&gt; should set the disabled prop in Input component to true when isDisabled is passed" time="0.016">
    </testcase>
    <testcase classname="&lt;SelectableCell /&gt; should event.preventDefault when the input container is clicked with shift key pressed" name="&lt;SelectableCell /&gt; should event.preventDefault when the input container is clicked with shift key pressed" time="0.014">
    </testcase>
    <testcase classname="&lt;SelectableCell /&gt; should not call event.preventDefault when the input container is clicked without shift key pressed" name="&lt;SelectableCell /&gt; should not call event.preventDefault when the input container is clicked without shift key pressed" time="0.012">
    </testcase>
    <testcase classname="&lt;SelectableCell /&gt; should not call any event when inputType is &quot;radio&quot; and isSelected is passed" name="&lt;SelectableCell /&gt; should not call any event when inputType is &quot;radio&quot; and isSelected is passed" time="0.014">
    </testcase>
    <testcase classname="&lt;SelectableCell /&gt; should call the right event when inputType is &quot;radio&quot; and isSelected is not passed" name="&lt;SelectableCell /&gt; should call the right event when inputType is &quot;radio&quot; and isSelected is not passed" time="0.018">
    </testcase>
    <testcase classname="&lt;SelectableCell /&gt; should call the right event when shiftKey is not pressed, inputType is &quot;checkbox&quot; and isSelected is not passed" name="&lt;SelectableCell /&gt; should call the right event when shiftKey is not pressed, inputType is &quot;checkbox&quot; and isSelected is not passed" time="0.013">
    </testcase>
    <testcase classname="&lt;SelectableCell /&gt; should call the right event when shiftKey is not pressed, inputType is &quot;checkbox&quot; and isSelected is passed" name="&lt;SelectableCell /&gt; should call the right event when shiftKey is not pressed, inputType is &quot;checkbox&quot; and isSelected is passed" time="0.009">
    </testcase>
    <testcase classname="&lt;SelectableCell /&gt; should call the right event when shiftKey is pressed, inputType is &quot;checkbox&quot; and isSelected is not passed" name="&lt;SelectableCell /&gt; should call the right event when shiftKey is pressed, inputType is &quot;checkbox&quot; and isSelected is not passed" time="0.013">
    </testcase>
    <testcase classname="&lt;SelectableCell /&gt; should call the right event when shiftKey is pressed, inputType is &quot;checkbox&quot; and isSelected is passed" name="&lt;SelectableCell /&gt; should call the right event when shiftKey is pressed, inputType is &quot;checkbox&quot; and isSelected is passed" time="0.012">
    </testcase>
    <testcase classname="&lt;SelectableCell /&gt; should call event.preventDefault when press left key in input type radio" name="&lt;SelectableCell /&gt; should call event.preventDefault when press left key in input type radio" time="0.009">
    </testcase>
    <testcase classname="&lt;SelectableCell /&gt; should call event.preventDefault when press right key in input type radio" name="&lt;SelectableCell /&gt; should call event.preventDefault when press right key in input type radio" time="0.009">
    </testcase>
    <testcase classname="&lt;SelectableCell /&gt; should not call event.preventDefault when press left key in input type checkbox" name="&lt;SelectableCell /&gt; should not call event.preventDefault when press left key in input type checkbox" time="0.013">
    </testcase>
    <testcase classname="&lt;SelectableCell /&gt; should not call event.preventDefault when press right key in input type checkbox" name="&lt;SelectableCell /&gt; should not call event.preventDefault when press right key in input type checkbox" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CarouselCard/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:42" time="1.337" tests="1">
    <testcase classname="&lt;CarouselCard/&gt; should be accessible" name="&lt;CarouselCard/&gt; should be accessible" time="0.859">
    </testcase>
  </testsuite>
  <testsuite name="&lt;StepTwo on ImportRecordsFlow/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:42" time="1.521" tests="2">
    <testcase classname="&lt;StepTwo on ImportRecordsFlow/&gt; should be accessible" name="&lt;StepTwo on ImportRecordsFlow/&gt; should be accessible" time="0.206">
    </testcase>
    <testcase classname="&lt;StepTwo on ImportRecordsFlow/&gt; should be accessible when has file selected" name="&lt;StepTwo on ImportRecordsFlow/&gt; should be accessible when has file selected" time="0.61">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Picklist /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:42" time="1.489" tests="14">
    <testcase classname="&lt;Picklist /&gt; should set the value label as value in the input element" name="&lt;Picklist /&gt; should set the value label as value in the input element" time="0.082">
    </testcase>
    <testcase classname="&lt;Picklist /&gt; should have the right number of children registered when mounted" name="&lt;Picklist /&gt; should have the right number of children registered when mounted" time="0.04">
    </testcase>
    <testcase classname="&lt;Picklist /&gt; should open menu when click the picklist input" name="&lt;Picklist /&gt; should open menu when click the picklist input" time="0.07">
    </testcase>
    <testcase classname="&lt;Picklist /&gt; should open menu when picklist is focused and press a navigation key" name="&lt;Picklist /&gt; should open menu when picklist is focused and press a navigation key" time="0.172">
    </testcase>
    <testcase classname="&lt;Picklist /&gt; should open menu when picklist is focused and press SPACE key" name="&lt;Picklist /&gt; should open menu when picklist is focused and press SPACE key" time="0.044">
    </testcase>
    <testcase classname="&lt;Picklist /&gt; should close menu when is opened and click the picklist input" name="&lt;Picklist /&gt; should close menu when is opened and click the picklist input" time="0.066">
    </testcase>
    <testcase classname="&lt;Picklist /&gt; should close menu when is opened and press ESCAPE key" name="&lt;Picklist /&gt; should close menu when is opened and press ESCAPE key" time="0.064">
    </testcase>
    <testcase classname="&lt;Picklist /&gt; should close menu when is opened and press TAB key" name="&lt;Picklist /&gt; should close menu when is opened and press TAB key" time="0.047">
    </testcase>
    <testcase classname="&lt;Picklist /&gt; should fire onChange when option is selected by click" name="&lt;Picklist /&gt; should fire onChange when option is selected by click" time="0.036">
    </testcase>
    <testcase classname="&lt;Picklist /&gt; should fire onChange when option is selected by pressing ENTER key" name="&lt;Picklist /&gt; should fire onChange when option is selected by pressing ENTER key" time="0.076">
    </testcase>
    <testcase classname="&lt;Picklist /&gt; should render scroll down arrow when number of children is more than five" name="&lt;Picklist /&gt; should render scroll down arrow when number of children is more than five" time="0.083">
    </testcase>
    <testcase classname="&lt;Picklist /&gt; should not render scroll down arrow when number of children is less than five" name="&lt;Picklist /&gt; should not render scroll down arrow when number of children is less than five" time="0.035">
    </testcase>
    <testcase classname="&lt;Picklist /&gt; should not render scroll up arrow when popup menu scroll position is zero" name="&lt;Picklist /&gt; should not render scroll up arrow when popup menu scroll position is zero" time="0.061">
    </testcase>
    <testcase classname="&lt;Picklist /&gt; should render scroll up arrow when popup menu scroll position is greater than zero" name="&lt;Picklist /&gt; should render scroll up arrow when popup menu scroll position is greater than zero" time="0.083">
    </testcase>
  </testsuite>
  <testsuite name="&lt;StepFour on ImportRecordsFlow/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:42" time="1.513" tests="1">
    <testcase classname="&lt;StepFour on ImportRecordsFlow/&gt; should be accessible" name="&lt;StepFour on ImportRecordsFlow/&gt; should be accessible" time="0.582">
    </testcase>
  </testsuite>
  <testsuite name="&lt;DateTimePicker/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:42" time="1.7" tests="1">
    <testcase classname="&lt;DateTimePicker/&gt; should be focusable" name="&lt;DateTimePicker/&gt; should be focusable" time="1.09">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Table/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:42" time="1.67" tests="1">
    <testcase classname="&lt;Table/&gt; should be accessible" name="&lt;Table/&gt; should be accessible" time="0.796">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Modal/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:43" time="0.981" tests="1">
    <testcase classname="&lt;Modal/&gt; should be accessible" name="&lt;Modal/&gt; should be accessible" time="0.447">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Lookup /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:42" time="2.043" tests="26">
    <testcase classname="&lt;Lookup /&gt; should set an id in the input element" name="&lt;Lookup /&gt; should set an id in the input element" time="0.058">
    </testcase>
    <testcase classname="&lt;Lookup /&gt; should set type &quot;search&quot; in the input element" name="&lt;Lookup /&gt; should set type &quot;search&quot; in the input element" time="0.013">
    </testcase>
    <testcase classname="&lt;Lookup /&gt; should pass a generated id to the Error element and set the same id to the aria-describedby for the input when a error is passed" name="&lt;Lookup /&gt; should pass a generated id to the Error element and set the same id to the aria-describedby for the input when a error is passed" time="0.092">
    </testcase>
    <testcase classname="&lt;Lookup /&gt; should pass the right props to the Label component" name="&lt;Lookup /&gt; should pass the right props to the Label component" time="0.024">
    </testcase>
    <testcase classname="&lt;Lookup /&gt; should render the Options menu when there are options and the input is focused" name="&lt;Lookup /&gt; should render the Options menu when there are options and the input is focused" time="0.038">
    </testcase>
    <testcase classname="&lt;Lookup /&gt; should render the Options menu when there are not options but the input has value typed and is focused" name="&lt;Lookup /&gt; should render the Options menu when there are not options but the input has value typed and is focused" time="0.1">
    </testcase>
    <testcase classname="&lt;Lookup /&gt; should call onChange with the right data when select an option" name="&lt;Lookup /&gt; should call onChange with the right data when select an option" time="0.052">
    </testcase>
    <testcase classname="&lt;Lookup /&gt; should reset input value when select an option" name="&lt;Lookup /&gt; should reset input value when select an option" time="0.067">
    </testcase>
    <testcase classname="&lt;Lookup /&gt; should call onSearch with the right value when type in the input" name="&lt;Lookup /&gt; should call onSearch with the right value when type in the input" time="0.04">
    </testcase>
    <testcase classname="&lt;Lookup /&gt; should not render a SelectedValue component when value passed is other than object" name="&lt;Lookup /&gt; should not render a SelectedValue component when value passed is other than object" time="0.132">
    </testcase>
    <testcase classname="&lt;Lookup /&gt; should render a SelectedValue component when value is passed" name="&lt;Lookup /&gt; should render a SelectedValue component when value is passed" time="0.127">
    </testcase>
    <testcase classname="&lt;Lookup /&gt; should call onChange and onSearch with the right values when remove the value selected" name="&lt;Lookup /&gt; should call onChange and onSearch with the right values when remove the value selected" time="0.014">
    </testcase>
    <testcase classname="&lt;Lookup /&gt; should reset the input value when click the close button" name="&lt;Lookup /&gt; should reset the input value when click the close button" time="0.038">
    </testcase>
    <testcase classname="&lt;Lookup /&gt; should call onChange with the right data and reset the input value when press enter key with the options menu open" name="&lt;Lookup /&gt; should call onChange with the right data and reset the input value when press enter key with the options menu open" time="0.072">
    </testcase>
    <testcase classname="&lt;Lookup /&gt; should call onChange with the right data when press arrow down key and then enter key with the options menu open" name="&lt;Lookup /&gt; should call onChange with the right data when press arrow down key and then enter key with the options menu open" time="0.042">
    </testcase>
    <testcase classname="&lt;Lookup /&gt; should call onChange with the right data when press down, up and enter key with the options menu open" name="&lt;Lookup /&gt; should call onChange with the right data when press down, up and enter key with the options menu open" time="0.054">
    </testcase>
    <testcase classname="&lt;Lookup /&gt; should pass a function to onClearValue prop in SelectedValue component" name="&lt;Lookup /&gt; should pass a function to onClearValue prop in SelectedValue component" time="0.012">
    </testcase>
    <testcase classname="&lt;Lookup /&gt; should not set the onClearValue prop in SelectedValue component when pass disabled" name="&lt;Lookup /&gt; should not set the onClearValue prop in SelectedValue component when pass disabled" time="0.011">
    </testcase>
    <testcase classname="&lt;Lookup /&gt; should not set the onClearValue prop in SelectedValue component when pass readOnly" name="&lt;Lookup /&gt; should not set the onClearValue prop in SelectedValue component when pass readOnly" time="0.134">
    </testcase>
    <testcase classname="&lt;Lookup /&gt; should set the right options and reset the focusedItemIndex when the options changes" name="&lt;Lookup /&gt; should set the right options and reset the focusedItemIndex when the options changes" time="0.062">
    </testcase>
    <testcase classname="&lt;Lookup /&gt; should set the right options and reset the focusedItemIndex when the options changes and are type &quot;section&quot;" name="&lt;Lookup /&gt; should set the right options and reset the focusedItemIndex when the options changes and are type &quot;section&quot;" time="0.087">
    </testcase>
    <testcase classname="&lt;Lookup /&gt; should call event.stopPropagation when press esc key and the input has value typed" name="&lt;Lookup /&gt; should call event.stopPropagation when press esc key and the input has value typed" time="0.026">
    </testcase>
    <testcase classname="&lt;Lookup /&gt; should not call event.stopPropagation when press esc key and the input has not value typed" name="&lt;Lookup /&gt; should not call event.stopPropagation when press esc key and the input has not value typed" time="0.03">
    </testcase>
    <testcase classname="&lt;Lookup /&gt; should fire onBlur with null" name="&lt;Lookup /&gt; should fire onBlur with null" time="0.034">
    </testcase>
    <testcase classname="&lt;Lookup /&gt; should set the initial visual-focus to the option that is passed as preferredSelectedOption" name="&lt;Lookup /&gt; should set the initial visual-focus to the option that is passed as preferredSelectedOption" time="0.026">
    </testcase>
    <testcase classname="&lt;Lookup /&gt; should fallback to 0 if the index passed as preferredSelectedOption does not exist" name="&lt;Lookup /&gt; should fallback to 0 if the index passed as preferredSelectedOption does not exist" time="0.025">
    </testcase>
  </testsuite>
  <testsuite name="&lt;StepThree on ImportRecordsFlow/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:42" time="1.968" tests="1">
    <testcase classname="&lt;StepThree on ImportRecordsFlow/&gt; should be accessible" name="&lt;StepThree on ImportRecordsFlow/&gt; should be accessible" time="0.883">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Head /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:44" time="0.644" tests="7">
    <testcase classname="&lt;Head /&gt; should return null if columns is not passed" name="&lt;Head /&gt; should return null if columns is not passed" time="0.013">
    </testcase>
    <testcase classname="&lt;Head /&gt; should return null if columns is an empty array" name="&lt;Head /&gt; should return null if columns is an empty array" time="0.001">
    </testcase>
    <testcase classname="&lt;Head /&gt; should return the right amount of Header components" name="&lt;Head /&gt; should return the right amount of Header components" time="0.065">
    </testcase>
    <testcase classname="&lt;Head /&gt; should set the right sortDirection in Header component when only defaultSortDirection is passed" name="&lt;Head /&gt; should set the right sortDirection in Header component when only defaultSortDirection is passed" time="0.019">
    </testcase>
    <testcase classname="&lt;Head /&gt; should set the right sortDirection in Header component when sortDirection is passed and sortedBy match with the column field" name="&lt;Head /&gt; should set the right sortDirection in Header component when sortDirection is passed and sortedBy match with the column field" time="0.027">
    </testcase>
    <testcase classname="&lt;Head /&gt; should set isSorted to true in Header component when the sortedBy passed match with the column field" name="&lt;Head /&gt; should set isSorted to true in Header component when the sortedBy passed match with the column field" time="0.03">
    </testcase>
    <testcase classname="&lt;Head /&gt; should set isSorted to false in Header component when the sortedBy passed does not match with the column field" name="&lt;Head /&gt; should set isSorted to false in Header component when the sortedBy passed does not match with the column field" time="0.024">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Lookup/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:43" time="0.796" tests="1">
    <testcase classname="&lt;Lookup/&gt; should be focusable" name="&lt;Lookup/&gt; should be focusable" time="0.118">
    </testcase>
  </testsuite>
  <testsuite name="&lt;SelectedValue /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:44" time="0.797" tests="9">
    <testcase classname="&lt;SelectedValue /&gt; should render an input container" name="&lt;SelectedValue /&gt; should render an input container" time="0.074">
    </testcase>
    <testcase classname="&lt;SelectedValue /&gt; should set the id passed as the id prop in the input element" name="&lt;SelectedValue /&gt; should set the id passed as the id prop in the input element" time="0.076">
    </testcase>
    <testcase classname="&lt;SelectedValue /&gt; should not render an icon container" name="&lt;SelectedValue /&gt; should not render an icon container" time="0.018">
    </testcase>
    <testcase classname="&lt;SelectedValue /&gt; should render an icon container" name="&lt;SelectedValue /&gt; should render an icon container" time="0.008">
    </testcase>
    <testcase classname="&lt;SelectedValue /&gt; should render a close button" name="&lt;SelectedValue /&gt; should render a close button" time="0.022">
    </testcase>
    <testcase classname="&lt;SelectedValue /&gt; should fire an event when the close button is clicked" name="&lt;SelectedValue /&gt; should fire an event when the close button is clicked" time="0.009">
    </testcase>
    <testcase classname="&lt;SelectedValue /&gt; should not render the close button when readOnly is passed" name="&lt;SelectedValue /&gt; should not render the close button when readOnly is passed" time="0.077">
    </testcase>
    <testcase classname="&lt;SelectedValue /&gt; should not render the close button when disabled is passed" name="&lt;SelectedValue /&gt; should not render the close button when disabled is passed" time="0.005">
    </testcase>
    <testcase classname="&lt;SelectedValue /&gt; should copy value label to clipboard when input gets focus" name="&lt;SelectedValue /&gt; should copy value label to clipboard when input gets focus" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="&lt;GMap/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:43" time="1.061" tests="1">
    <testcase classname="&lt;GMap/&gt; should be accessible" name="&lt;GMap/&gt; should be accessible" time="0.524">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Body /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:43" time="0.942" tests="5">
    <testcase classname="&lt;Body /&gt; should return an empty component when data and columns are not passed and is not loading" name="&lt;Body /&gt; should return an empty component when data and columns are not passed and is not loading" time="0.052">
    </testcase>
    <testcase classname="&lt;Body /&gt; should return an empty component when there is not data and is not loading" name="&lt;Body /&gt; should return an empty component when there is not data and is not loading" time="0.008">
    </testcase>
    <testcase classname="&lt;Body /&gt; should return a loading component when there is not data and is loading" name="&lt;Body /&gt; should return a loading component when there is not data and is loading" time="0.022">
    </testcase>
    <testcase classname="&lt;Body /&gt; should return one row more when there is data and is loading" name="&lt;Body /&gt; should return one row more when there is data and is loading" time="0.115">
    </testcase>
    <testcase classname="&lt;Body /&gt; should return an array of Row components" name="&lt;Body /&gt; should return an array of Row components" time="0.031">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Cell /&gt; when isFirst is not passed" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:44" time="0.828" tests="16">
    <testcase classname="&lt;Cell /&gt; when isFirst is not passed should render a td element with text &quot;cell-1&quot; " name="&lt;Cell /&gt; when isFirst is not passed should render a td element with text &quot;cell-1&quot; " time="0.031">
    </testcase>
    <testcase classname="&lt;Cell /&gt; when isFirst is not passed should render a td element with a component to display de value" name="&lt;Cell /&gt; when isFirst is not passed should render a td element with a component to display de value" time="0.007">
    </testcase>
    <testcase classname="&lt;Cell /&gt; when isFirst is not passed should set role=&quot;gridcell&quot; in td element" name="&lt;Cell /&gt; when isFirst is not passed should set role=&quot;gridcell&quot; in td element" time="0.013">
    </testcase>
    <testcase classname="&lt;Cell /&gt; when isFirst is not passed should set tabIndex={-1} in td element " name="&lt;Cell /&gt; when isFirst is not passed should set tabIndex={-1} in td element " time="0.006">
    </testcase>
    <testcase classname="&lt;Cell /&gt; when isFirst is not passed should set the right data-label in td element when the header passed is a string" name="&lt;Cell /&gt; when isFirst is not passed should set the right data-label in td element when the header passed is a string" time="0.005">
    </testcase>
    <testcase classname="&lt;Cell /&gt; when isFirst is not passed should not set any data-label in td element when the header passed is not a string" name="&lt;Cell /&gt; when isFirst is not passed should not set any data-label in td element when the header passed is not a string" time="0.006">
    </testcase>
    <testcase classname="&lt;Cell /&gt; when isFirst is not passed should render the SelectableCell component when columnType is &quot;SELECTABLE_CHECKBOX&quot;" name="&lt;Cell /&gt; when isFirst is not passed should render the SelectableCell component when columnType is &quot;SELECTABLE_CHECKBOX&quot;" time="0.076">
    </testcase>
    <testcase classname="&lt;Cell /&gt; when isFirst is not passed should render the ActionsCell component when columnType is &quot;action&quot;" name="&lt;Cell /&gt; when isFirst is not passed should render the ActionsCell component when columnType is &quot;action&quot;" time="0.003">
    </testcase>
    <testcase classname="&lt;Cell /&gt; when isFirst is not passed should pass the row data and other columns props to cell component" name="&lt;Cell /&gt; when isFirst is not passed should pass the row data and other columns props to cell component" time="0.004">
    </testcase>
    <testcase classname="&lt;Cell /&gt; when isFirst is passed should render a th element with text &quot;cell-1&quot; " name="&lt;Cell /&gt; when isFirst is passed should render a th element with text &quot;cell-1&quot; " time="0.005">
    </testcase>
    <testcase classname="&lt;Cell /&gt; when isFirst is passed should render a th element with a component to display de value if isFirst is passed" name="&lt;Cell /&gt; when isFirst is passed should render a th element with a component to display de value if isFirst is passed" time="0.004">
    </testcase>
    <testcase classname="&lt;Cell /&gt; when isFirst is passed should set scope=&quot;row&quot; in th element" name="&lt;Cell /&gt; when isFirst is passed should set scope=&quot;row&quot; in th element" time="0.013">
    </testcase>
    <testcase classname="&lt;Cell /&gt; when isFirst is passed should set tabIndex={-1} in th element" name="&lt;Cell /&gt; when isFirst is passed should set tabIndex={-1} in th element" time="0.003">
    </testcase>
    <testcase classname="&lt;Cell /&gt; when isFirst is passed should set the right data-label in th element when the header passed is a string" name="&lt;Cell /&gt; when isFirst is passed should set the right data-label in th element when the header passed is a string" time="0.004">
    </testcase>
    <testcase classname="&lt;Cell /&gt; when isFirst is passed should not set any data-label in th element when the header passed is not a string" name="&lt;Cell /&gt; when isFirst is passed should not set any data-label in th element when the header passed is not a string" time="0.003">
    </testcase>
    <testcase classname="&lt;Cell /&gt; when isFirst is passed should render the SelectableCell component when columnType is &quot;SELECTABLE_CHECKBOX&quot;" name="&lt;Cell /&gt; when isFirst is passed should render the SelectableCell component when columnType is &quot;SELECTABLE_CHECKBOX&quot;" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ActionsCell /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:44" time="0.873" tests="7">
    <testcase classname="&lt;ActionsCell /&gt; should not render anything when columnChildren is not passed" name="&lt;ActionsCell /&gt; should not render anything when columnChildren is not passed" time="0.017">
    </testcase>
    <testcase classname="&lt;ActionsCell /&gt; should render the menu items passed as columnChildren" name="&lt;ActionsCell /&gt; should render the menu items passed as columnChildren" time="0.063">
    </testcase>
    <testcase classname="&lt;ActionsCell /&gt; should render only one menu item" name="&lt;ActionsCell /&gt; should render only one menu item" time="0.013">
    </testcase>
    <testcase classname="&lt;ActionsCell /&gt; should set the menuAlignment to &quot;right&quot; in ButtonMenu component" name="&lt;ActionsCell /&gt; should set the menuAlignment to &quot;right&quot; in ButtonMenu component" time="0.098">
    </testcase>
    <testcase classname="&lt;ActionsCell /&gt; should set the menuAlignment to &quot;bottom-right&quot; in ButtonMenu component" name="&lt;ActionsCell /&gt; should set the menuAlignment to &quot;bottom-right&quot; in ButtonMenu component" time="0.038">
    </testcase>
    <testcase classname="&lt;ActionsCell /&gt; should not render any MenuItem when columnChildren are invalid" name="&lt;ActionsCell /&gt; should not render any MenuItem when columnChildren are invalid" time="0.03">
    </testcase>
    <testcase classname="&lt;ActionsCell /&gt; should fire an event when a MenuItem is clicked" name="&lt;ActionsCell /&gt; should fire an event when a MenuItem is clicked" time="0.027">
    </testcase>
  </testsuite>
  <testsuite name="&lt;DateTimePicker/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:42" time="2.815" tests="9">
    <testcase classname="&lt;DateTimePicker/&gt; should fire onBlur with undefined when there is not value" name="&lt;DateTimePicker/&gt; should fire onBlur with undefined when there is not value" time="0.062">
    </testcase>
    <testcase classname="&lt;DateTimePicker/&gt; should fire onBlur with the value passed" name="&lt;DateTimePicker/&gt; should fire onBlur with the value passed" time="0.029">
    </testcase>
    <testcase classname="&lt;DateTimePicker/&gt; should fire onFocus with undefined when there is not value" name="&lt;DateTimePicker/&gt; should fire onFocus with undefined when there is not value" time="0.057">
    </testcase>
    <testcase classname="&lt;DateTimePicker/&gt; should fire onFocus with the value passed" name="&lt;DateTimePicker/&gt; should fire onFocus with the value passed" time="0.018">
    </testcase>
    <testcase classname="&lt;DateTimePicker/&gt; should set isOpen to true and fire onClick when readOnly is not passed" name="&lt;DateTimePicker/&gt; should set isOpen to true and fire onClick when readOnly is not passed" time="1.101">
    </testcase>
    <testcase classname="&lt;DateTimePicker/&gt; should not set isOpen to true and not fire onClick when readOnly is passed" name="&lt;DateTimePicker/&gt; should not set isOpen to true and not fire onClick when readOnly is passed" time="0.136">
    </testcase>
    <testcase classname="&lt;DateTimePicker/&gt; should open the modal when enter key or space key is pressed while input is focused and readOnly is not passed" name="&lt;DateTimePicker/&gt; should open the modal when enter key or space key is pressed while input is focused and readOnly is not passed" time="0.633">
    </testcase>
    <testcase classname="&lt;DateTimePicker/&gt; should not open the modal when enter key or space key is pressed while input is focused and readOnly is passed" name="&lt;DateTimePicker/&gt; should not open the modal when enter key or space key is pressed while input is focused and readOnly is passed" time="0.035">
    </testcase>
    <testcase classname="&lt;DateTimePicker/&gt; should set the right input value" name="&lt;DateTimePicker/&gt; should set the right input value" time="0.026">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Header /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:44" time="0.89" tests="14">
    <testcase classname="&lt;Header /&gt; should set scope=&quot;col&quot; in th element" name="&lt;Header /&gt; should set scope=&quot;col&quot; in th element" time="0.071">
    </testcase>
    <testcase classname="&lt;Header /&gt; should set tabIndex={0} in th element when isSorted is passed" name="&lt;Header /&gt; should set tabIndex={0} in th element when isSorted is passed" time="0.026">
    </testcase>
    <testcase classname="&lt;Header /&gt; should set tabIndex={-1} in th element when isSorted is not passed" name="&lt;Header /&gt; should set tabIndex={-1} in th element when isSorted is not passed" time="0.012">
    </testcase>
    <testcase classname="&lt;Header /&gt; should set the right aria-label in th element when the content passed is a string" name="&lt;Header /&gt; should set the right aria-label in th element when the content passed is a string" time="0.01">
    </testcase>
    <testcase classname="&lt;Header /&gt; should not set any aria-label in th element when the content passed is not a string" name="&lt;Header /&gt; should not set any aria-label in th element when the content passed is not a string" time="0.01">
    </testcase>
    <testcase classname="&lt;Header /&gt; should set the right title in the content container element when the content passed is a string" name="&lt;Header /&gt; should set the right title in the content container element when the content passed is a string" time="0.013">
    </testcase>
    <testcase classname="&lt;Header /&gt; should not set any title in the content container element when the content passed is not a string" name="&lt;Header /&gt; should not set any title in the content container element when the content passed is not a string" time="0.01">
    </testcase>
    <testcase classname="&lt;Header /&gt; should set isResizable to true in ResizeBar component" name="&lt;Header /&gt; should set isResizable to true in ResizeBar component" time="0.013">
    </testcase>
    <testcase classname="&lt;Header /&gt; should set isResizable to false in ResizeBar component when resizeColumnDisabled is passed" name="&lt;Header /&gt; should set isResizable to false in ResizeBar component when resizeColumnDisabled is passed" time="0.023">
    </testcase>
    <testcase classname="&lt;Header /&gt; should set isResizable to false in ResizeBar component when width is passed" name="&lt;Header /&gt; should set isResizable to false in ResizeBar component when width is passed" time="0.011">
    </testcase>
    <testcase classname="&lt;Header /&gt; should call onSort with the right data when the header is clicked and sortable is passed" name="&lt;Header /&gt; should call onSort with the right data when the header is clicked and sortable is passed" time="0.051">
    </testcase>
    <testcase classname="&lt;Header /&gt; should not call onSort when sortable is not passed" name="&lt;Header /&gt; should not call onSort when sortable is not passed" time="0.017">
    </testcase>
    <testcase classname="&lt;Header /&gt; should call onResize with the right data when resize the column" name="&lt;Header /&gt; should call onResize with the right data when resize the column" time="0.018">
    </testcase>
    <testcase classname="&lt;Header /&gt; should render SelectableHeader component when type passed is &quot;SELECTABLE_CHECKBOX&quot;" name="&lt;Header /&gt; should render SelectableHeader component when type passed is &quot;SELECTABLE_CHECKBOX&quot;" time="0.055">
    </testcase>
  </testsuite>
  <testsuite name="&lt;RadioButtonGroup /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:44" time="0.775" tests="5">
    <testcase classname="&lt;RadioButtonGroup /&gt; should set isVisible to true in Marker when there is an option selected initially" name="&lt;RadioButtonGroup /&gt; should set isVisible to true in Marker when there is an option selected initially" time="0.096">
    </testcase>
    <testcase classname="&lt;RadioButtonGroup /&gt; should set isVisible to false in Marker when there is a disabled option selected initially" name="&lt;RadioButtonGroup /&gt; should set isVisible to false in Marker when there is a disabled option selected initially" time="0.049">
    </testcase>
    <testcase classname="&lt;RadioButtonGroup /&gt; should set isVisible to false in Marker when there is an invalid option selected initially" name="&lt;RadioButtonGroup /&gt; should set isVisible to false in Marker when there is an invalid option selected initially" time="0.016">
    </testcase>
    <testcase classname="&lt;RadioButtonGroup /&gt; should pass the right styles to Marker when there is an option selected" name="&lt;RadioButtonGroup /&gt; should pass the right styles to Marker when there is an option selected" time="0.006">
    </testcase>
    <testcase classname="&lt;RadioButtonGroup /&gt; should set isVisible to true in Marker when selecting an option" name="&lt;RadioButtonGroup /&gt; should set isVisible to true in Marker when selecting an option" time="0.045">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Modal/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:43" time="1.336" tests="19">
    <testcase classname="&lt;Modal/&gt; should render the children passed" name="&lt;Modal/&gt; should render the children passed" time="0.14">
    </testcase>
    <testcase classname="&lt;Modal/&gt; should render the footer passed" name="&lt;Modal/&gt; should render the footer passed" time="0.018">
    </testcase>
    <testcase classname="&lt;Modal/&gt; should set tabIndex as -1 in section element" name="&lt;Modal/&gt; should set tabIndex as -1 in section element" time="0.01">
    </testcase>
    <testcase classname="&lt;Modal/&gt; should set the same generated id to section as aria-labelledby and to Header as id" name="&lt;Modal/&gt; should set the same generated id to section as aria-labelledby and to Header as id" time="0.012">
    </testcase>
    <testcase classname="&lt;Modal/&gt; should set the same generated id to section as aria-describedby and to children container as id" name="&lt;Modal/&gt; should set the same generated id to section as aria-describedby and to children container as id" time="0.017">
    </testcase>
    <testcase classname="&lt;Modal/&gt; should set aria-modal to true in section element" name="&lt;Modal/&gt; should set aria-modal to true in section element" time="0.012">
    </testcase>
    <testcase classname="&lt;Modal/&gt; should set aria-hidden to false in section element when modal is open" name="&lt;Modal/&gt; should set aria-hidden to false in section element when modal is open" time="0.019">
    </testcase>
    <testcase classname="&lt;Modal/&gt; should fire an event when the close button is clicked and the modal is open" name="&lt;Modal/&gt; should fire an event when the close button is clicked and the modal is open" time="0.011">
    </testcase>
    <testcase classname="&lt;Modal/&gt; should fire an event when the modal backdrop is clicked and the modal is open" name="&lt;Modal/&gt; should fire an event when the modal backdrop is clicked and the modal is open" time="0.013">
    </testcase>
    <testcase classname="&lt;Modal/&gt; should fire an event when the ESC key is pressed and the modal is open" name="&lt;Modal/&gt; should fire an event when the ESC key is pressed and the modal is open" time="0.019">
    </testcase>
    <testcase classname="&lt;Modal/&gt; should call disableBodyScroll when open the modal" name="&lt;Modal/&gt; should call disableBodyScroll when open the modal" time="0.011">
    </testcase>
    <testcase classname="&lt;Modal/&gt; should call enableBodyScroll when component unmounts and there is not another modal open" name="&lt;Modal/&gt; should call enableBodyScroll when component unmounts and there is not another modal open" time="0.024">
    </testcase>
    <testcase classname="&lt;Modal/&gt; should not call enableBodyScroll when component unmounts and there is another modal open" name="&lt;Modal/&gt; should not call enableBodyScroll when component unmounts and there is another modal open" time="0.008">
    </testcase>
    <testcase classname="&lt;Modal/&gt; should call enableBodyScroll when close modal and there is not another modal open" name="&lt;Modal/&gt; should call enableBodyScroll when close modal and there is not another modal open" time="0.015">
    </testcase>
    <testcase classname="&lt;Modal/&gt; should not call enableBodyScroll when close modal and there is another modal open" name="&lt;Modal/&gt; should not call enableBodyScroll when close modal and there is another modal open" time="0.009">
    </testcase>
    <testcase classname="&lt;Modal/&gt; should call CounterManager.decrement when the component unmount and it is open" name="&lt;Modal/&gt; should call CounterManager.decrement when the component unmount and it is open" time="0.009">
    </testcase>
    <testcase classname="&lt;Modal/&gt; should not call CounterManager.decrement when the component unmount and it is not open" name="&lt;Modal/&gt; should not call CounterManager.decrement when the component unmount and it is not open" time="0.002">
    </testcase>
    <testcase classname="&lt;Modal/&gt; should render the close button by default" name="&lt;Modal/&gt; should render the close button by default" time="0.007">
    </testcase>
    <testcase classname="&lt;Modal/&gt; should not render the close button when the hideCloseButton prop is equal to true" name="&lt;Modal/&gt; should not render the close button when the hideCloseButton prop is equal to true" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="&lt;DateTimePickerModal/&gt;" errors="0" failures="0" skipped="2" timestamp="2020-03-11T17:53:42" time="2.946" tests="5">
    <testcase classname="&lt;DateTimePickerModal/&gt; should set Modal isOpen prop to true" name="&lt;DateTimePickerModal/&gt; should set Modal isOpen prop to true" time="1.092">
    </testcase>
    <testcase classname="&lt;DateTimePickerModal/&gt; should pass right value to Calendar component" name="&lt;DateTimePickerModal/&gt; should pass right value to Calendar component" time="0.593">
    </testcase>
    <testcase classname="&lt;DateTimePickerModal/&gt; should pass the right time to TimeSelect component" name="&lt;DateTimePickerModal/&gt; should pass the right time to TimeSelect component" time="0.476">
    </testcase>
    <testcase classname="&lt;DateTimePickerModal/&gt; should set 12:00 AM to TimeSelect when value is null and date is changed" name="&lt;DateTimePickerModal/&gt; should set 12:00 AM to TimeSelect when value is null and date is changed" time="0">
      <skipped/>
    </testcase>
    <testcase classname="&lt;DateTimePickerModal/&gt; should fire OnChange when Ok button is clicked" name="&lt;DateTimePickerModal/&gt; should fire OnChange when Ok button is clicked" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="&lt;Tabset/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:44" time="0.879" tests="1">
    <testcase classname="&lt;Tabset/&gt; should be accessible" name="&lt;Tabset/&gt; should be accessible" time="0.336">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Lookup/&gt;" errors="0" failures="0" skipped="1" timestamp="2020-03-11T17:53:44" time="0.888" tests="2">
    <testcase classname="&lt;Lookup/&gt; should be accessible when the value typed do not match" name="&lt;Lookup/&gt; should be accessible when the value typed do not match" time="0">
      <skipped/>
    </testcase>
    <testcase classname="&lt;Lookup/&gt; should be accessible when a value is selected" name="&lt;Lookup/&gt; should be accessible when a value is selected" time="0.302">
    </testcase>
  </testsuite>
  <testsuite name="&lt;MapMarker/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:44" time="0.78" tests="19">
    <testcase classname="&lt;MapMarker/&gt; should set aria-pressed to true in marker button when it is selected" name="&lt;MapMarker/&gt; should set aria-pressed to true in marker button when it is selected" time="0.048">
    </testcase>
    <testcase classname="&lt;MapMarker/&gt; should not retrun anything when latitude and longitude are not passed" name="&lt;MapMarker/&gt; should not retrun anything when latitude and longitude are not passed" time="0.004">
    </testcase>
    <testcase classname="&lt;MapMarker/&gt; should render the marker when latitude and longitude are passed" name="&lt;MapMarker/&gt; should render the marker when latitude and longitude are passed" time="0.01">
    </testcase>
    <testcase classname="&lt;MapMarker/&gt; should not call google.maps.Marker when latitude is not passed" name="&lt;MapMarker/&gt; should not call google.maps.Marker when latitude is not passed" time="0.003">
    </testcase>
    <testcase classname="&lt;MapMarker/&gt; should not call google.maps.Marker when longitude is not passed" name="&lt;MapMarker/&gt; should not call google.maps.Marker when longitude is not passed" time="0.002">
    </testcase>
    <testcase classname="&lt;MapMarker/&gt; should call google.maps.Marker with the right data" name="&lt;MapMarker/&gt; should call google.maps.Marker with the right data" time="0.019">
    </testcase>
    <testcase classname="&lt;MapMarker/&gt; should call addListener on marker with the right data" name="&lt;MapMarker/&gt; should call addListener on marker with the right data" time="0.01">
    </testcase>
    <testcase classname="&lt;MapMarker/&gt; should call geocoder.geocode with the right data when label and description are not passed" name="&lt;MapMarker/&gt; should call geocoder.geocode with the right data when label and description are not passed" time="0.012">
    </testcase>
    <testcase classname="&lt;MapMarker/&gt; should not call geocoder.geocode when label is passed" name="&lt;MapMarker/&gt; should not call geocoder.geocode when label is passed" time="0.011">
    </testcase>
    <testcase classname="&lt;MapMarker/&gt; should not call geocoder.geocode when description is passed" name="&lt;MapMarker/&gt; should not call geocoder.geocode when description is passed" time="0.012">
    </testcase>
    <testcase classname="&lt;MapMarker/&gt; should call global.google.maps.InfoWindow with the description is passed" name="&lt;MapMarker/&gt; should call global.google.maps.InfoWindow with the description is passed" time="0.012">
    </testcase>
    <testcase classname="&lt;MapMarker/&gt; should call global.google.maps.InfoWindow with the label is passed" name="&lt;MapMarker/&gt; should call global.google.maps.InfoWindow with the label is passed" time="0.016">
    </testcase>
    <testcase classname="&lt;MapMarker/&gt; should call google.maps.event.removeListener when unmount the component" name="&lt;MapMarker/&gt; should call google.maps.event.removeListener when unmount the component" time="0.015">
    </testcase>
    <testcase classname="&lt;MapMarker/&gt; should call setAnimation on marker with null when the marker button is clicked" name="&lt;MapMarker/&gt; should call setAnimation on marker with null when the marker button is clicked" time="0.011">
    </testcase>
    <testcase classname="&lt;MapMarker/&gt; should call setAnimation on marker with the bounce animation when mouseover event occurs on marker button" name="&lt;MapMarker/&gt; should call setAnimation on marker with the bounce animation when mouseover event occurs on marker button" time="0.01">
    </testcase>
    <testcase classname="&lt;MapMarker/&gt; should call setAnimation on marker with the bounce animation when the marker button is focused" name="&lt;MapMarker/&gt; should call setAnimation on marker with the bounce animation when the marker button is focused" time="0.011">
    </testcase>
    <testcase classname="&lt;MapMarker/&gt; should call setAnimation on marker with null when mouseleave event occurs on marker button" name="&lt;MapMarker/&gt; should call setAnimation on marker with null when mouseleave event occurs on marker button" time="0.022">
    </testcase>
    <testcase classname="&lt;MapMarker/&gt; should call setAnimation on marker with null when the marker button is blurred" name="&lt;MapMarker/&gt; should call setAnimation on marker with null when the marker button is blurred" time="0.013">
    </testcase>
    <testcase classname="&lt;MapMarker/&gt; should set aria-pressed to false in marker button when it is not selected" name="&lt;MapMarker/&gt; should set aria-pressed to false in marker button when it is not selected" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Options /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:44" time="0.685" tests="14">
    <testcase classname="&lt;Options /&gt; should render the empty message when items is an empty array" name="&lt;Options /&gt; should render the empty message when items is an empty array" time="0.025">
    </testcase>
    <testcase classname="&lt;Options /&gt; should render the options list when there are items" name="&lt;Options /&gt; should render the options list when there are items" time="0.019">
    </testcase>
    <testcase classname="&lt;Options /&gt; should set the right height to the ul element" name="&lt;Options /&gt; should set the right height to the ul element" time="0.044">
    </testcase>
    <testcase classname="&lt;Options /&gt; should set the right max height to the ul element when size is not passed" name="&lt;Options /&gt; should set the right max height to the ul element when size is not passed" time="0.006">
    </testcase>
    <testcase classname="&lt;Options /&gt; should set the right max height to the ul element when size is small" name="&lt;Options /&gt; should set the right max height to the ul element when size is small" time="0.007">
    </testcase>
    <testcase classname="&lt;Options /&gt; should set the right max height to the ul element when size is medium" name="&lt;Options /&gt; should set the right max height to the ul element when size is medium" time="0.005">
    </testcase>
    <testcase classname="&lt;Options /&gt; should set the right max height to the ul element when size is large" name="&lt;Options /&gt; should set the right max height to the ul element when size is large" time="0.015">
    </testcase>
    <testcase classname="&lt;Options /&gt; should set the right max height to the ul element when a wrong size is passed" name="&lt;Options /&gt; should set the right max height to the ul element when a wrong size is passed" time="0.007">
    </testcase>
    <testcase classname="&lt;Options /&gt; should render the amount of menu items passed as items" name="&lt;Options /&gt; should render the amount of menu items passed as items" time="0.009">
    </testcase>
    <testcase classname="&lt;Options /&gt; should set the right isActive in the items when a focusedItemIndex is passed" name="&lt;Options /&gt; should set the right isActive in the items when a focusedItemIndex is passed" time="0.019">
    </testcase>
    <testcase classname="&lt;Options /&gt; should render a header item when has type &quot;header&quot;" name="&lt;Options /&gt; should render a header item when has type &quot;header&quot;" time="0.005">
    </testcase>
    <testcase classname="&lt;Options /&gt; should fire an event with the right data when click an item" name="&lt;Options /&gt; should fire an event with the right data when click an item" time="0.013">
    </testcase>
    <testcase classname="&lt;Options /&gt; should fire an event with the right data when hover an item" name="&lt;Options /&gt; should fire an event with the right data when hover an item" time="0.012">
    </testcase>
    <testcase classname="&lt;Options /&gt; should call preventDefault when click in a header option" name="&lt;Options /&gt; should call preventDefault when click in a header option" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Breadcrumbs/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:44" time="0.652" tests="1">
    <testcase classname="&lt;Breadcrumbs/&gt; should be accessible" name="&lt;Breadcrumbs/&gt; should be accessible" time="0.192">
    </testcase>
  </testsuite>
  <testsuite name="&lt;RadioButtonGroup/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:44" time="0.917" tests="1">
    <testcase classname="&lt;RadioButtonGroup/&gt; should be accessible when both all options and the group have a label" name="&lt;RadioButtonGroup/&gt; should be accessible when both all options and the group have a label" time="0.38">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AvatarMenu/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:44" time="0.816" tests="2">
    <testcase classname="&lt;AvatarMenu/&gt; should be accessible when pass assistiveText" name="&lt;AvatarMenu/&gt; should be accessible when pass assistiveText" time="0.198">
    </testcase>
    <testcase classname="&lt;AvatarMenu/&gt; should be accessible when pass title" name="&lt;AvatarMenu/&gt; should be accessible when pass title" time="0.104">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Button/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:45" time="0.595" tests="13">
    <testcase classname="&lt;Button/&gt; should focus the button when the focus method is called" name="&lt;Button/&gt; should focus the button when the focus method is called" time="0.023">
    </testcase>
    <testcase classname="&lt;Button/&gt; should blur the button when the blur method is called" name="&lt;Button/&gt; should blur the button when the blur method is called" time="0.011">
    </testcase>
    <testcase classname="&lt;Button/&gt; should set disable to true when it is passed" name="&lt;Button/&gt; should set disable to true when it is passed" time="0.005">
    </testcase>
    <testcase classname="&lt;Button/&gt; should set the tabIndex passed" name="&lt;Button/&gt; should set the tabIndex passed" time="0.006">
    </testcase>
    <testcase classname="&lt;Button/&gt; should set the title passed" name="&lt;Button/&gt; should set the title passed" time="0.011">
    </testcase>
    <testcase classname="&lt;Button/&gt; should set the type passed" name="&lt;Button/&gt; should set the type passed" time="0.014">
    </testcase>
    <testcase classname="&lt;Button/&gt; should set aria-haspopup to true when it is passed" name="&lt;Button/&gt; should set aria-haspopup to true when it is passed" time="0.007">
    </testcase>
    <testcase classname="&lt;Button/&gt; should set the label passed as children" name="&lt;Button/&gt; should set the label passed as children" time="0.004">
    </testcase>
    <testcase classname="&lt;Button/&gt; should render the Spinner when isLoading is passed" name="&lt;Button/&gt; should render the Spinner when isLoading is passed" time="0.065">
    </testcase>
    <testcase classname="&lt;Button/&gt; should set disable to true when isLoading is passed" name="&lt;Button/&gt; should set disable to true when isLoading is passed" time="0.008">
    </testcase>
    <testcase classname="&lt;Button/&gt; should render the Spinner and label when isLoading and label are passed" name="&lt;Button/&gt; should render the Spinner and label when isLoading and label are passed" time="0.006">
    </testcase>
    <testcase classname="&lt;Button/&gt; should render the Spinner and children when isLoading, children and label are passed" name="&lt;Button/&gt; should render the Spinner and children when isLoading, children and label are passed" time="0.006">
    </testcase>
    <testcase classname="&lt;Button/&gt; should render the children when label and children are passed" name="&lt;Button/&gt; should render the children when label and children are passed" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Button/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:45" time="0.546" tests="2">
    <testcase classname="&lt;Button/&gt; should be accessible when label is passed" name="&lt;Button/&gt; should be accessible when label is passed" time="0.098">
    </testcase>
    <testcase classname="&lt;Button/&gt; should be accessible when text is passed as children" name="&lt;Button/&gt; should be accessible when text is passed as children" time="0.046">
    </testcase>
  </testsuite>
  <testsuite name="&lt;RightElement /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:45" time="0.428" tests="3">
    <testcase classname="&lt;RightElement /&gt; should render an icon container" name="&lt;RightElement /&gt; should render an icon container" time="0.017">
    </testcase>
    <testcase classname="&lt;RightElement /&gt; should render a close button when showCloseButton is passed" name="&lt;RightElement /&gt; should render a close button when showCloseButton is passed" time="0.022">
    </testcase>
    <testcase classname="&lt;RightElement /&gt; should fire an event when click the button" name="&lt;RightElement /&gt; should fire an event when click the button" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="Select component" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:45" time="0.531" tests="6">
    <testcase classname="Select component should set an id in the select element" name="Select component should set an id in the select element" time="0.034">
    </testcase>
    <testcase classname="Select component should set the value passed in the select element" name="Select component should set the value passed in the select element" time="0.01">
    </testcase>
    <testcase classname="Select component should fire an event when the user selects an option" name="Select component should fire an event when the user selects an option" time="0.008">
    </testcase>
    <testcase classname="Select component should set the disabled passed in the select element" name="Select component should set the disabled passed in the select element" time="0.008">
    </testcase>
    <testcase classname="Select component should set the required passed in the select element when it is passed" name="Select component should set the required passed in the select element when it is passed" time="0.01">
    </testcase>
    <testcase classname="Select component should set the required prop passed in the RequiredAsterisk component" name="Select component should set the required prop passed in the RequiredAsterisk component" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="&lt;MapComponent/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:45" time="0.772" tests="10">
    <testcase classname="&lt;MapComponent/&gt; should have the right class names" name="&lt;MapComponent/&gt; should have the right class names" time="0.033">
    </testcase>
    <testcase classname="&lt;MapComponent/&gt; should not call google.maps.Map when isScriptLoaded and isScriptLoadSucceed are false" name="&lt;MapComponent/&gt; should not call google.maps.Map when isScriptLoaded and isScriptLoadSucceed are false" time="0.011">
    </testcase>
    <testcase classname="&lt;MapComponent/&gt; should not call google.maps.Map when isScriptLoaded is true and isScriptLoadSucceed is false" name="&lt;MapComponent/&gt; should not call google.maps.Map when isScriptLoaded is true and isScriptLoadSucceed is false" time="0.008">
    </testcase>
    <testcase classname="&lt;MapComponent/&gt; should not call google.maps.Map when isScriptLoaded and isScriptLoadSucceed are true but previous isScriptLoaded was true" name="&lt;MapComponent/&gt; should not call google.maps.Map when isScriptLoaded and isScriptLoadSucceed are true but previous isScriptLoaded was true" time="0.007">
    </testcase>
    <testcase classname="&lt;MapComponent/&gt; should call google.maps.Map with the right data" name="&lt;MapComponent/&gt; should call google.maps.Map with the right data" time="0.013">
    </testcase>
    <testcase classname="&lt;MapComponent/&gt; should call google.maps.Geocoder" name="&lt;MapComponent/&gt; should call google.maps.Geocoder" time="0.012">
    </testcase>
    <testcase classname="&lt;MapComponent/&gt; should set the right state after isScriptLoaded and isScriptLoadSucceed are set to true" name="&lt;MapComponent/&gt; should set the right state after isScriptLoaded and isScriptLoadSucceed are set to true" time="0.014">
    </testcase>
    <testcase classname="&lt;MapComponent/&gt; should set the right state when a marker button is clicked" name="&lt;MapComponent/&gt; should set the right state when a marker button is clicked" time="0.091">
    </testcase>
    <testcase classname="&lt;MapComponent/&gt; should call map.panTo with the right data when a marker button is clicked" name="&lt;MapComponent/&gt; should call map.panTo with the right data when a marker button is clicked" time="0.051">
    </testcase>
    <testcase classname="&lt;MapComponent/&gt; should render right amount of children" name="&lt;MapComponent/&gt; should render right amount of children" time="0.026">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Select/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:45" time="0.567" tests="1">
    <testcase classname="&lt;Select/&gt; should be accessible when label is passed" name="&lt;Select/&gt; should be accessible when label is passed" time="0.147">
    </testcase>
  </testsuite>
  <testsuite name="SelectableHeader" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:45" time="0.744" tests="12">
    <testcase classname="SelectableHeader should not render the InputCheckbox when maxRowSelection is 1" name="SelectableHeader should not render the InputCheckbox when maxRowSelection is 1" time="0.028">
    </testcase>
    <testcase classname="SelectableHeader should set scope to &quot;col&quot; in th element" name="SelectableHeader should set scope to &quot;col&quot; in th element" time="0.043">
    </testcase>
    <testcase classname="SelectableHeader should set name to the right value in InputCheckbox component" name="SelectableHeader should set name to the right value in InputCheckbox component" time="0.009">
    </testcase>
    <testcase classname="SelectableHeader should set type to &quot;checkbox&quot; in InputCheckbox component" name="SelectableHeader should set type to &quot;checkbox&quot; in InputCheckbox component" time="0.009">
    </testcase>
    <testcase classname="SelectableHeader should set checked to true in InputCheckbox component when bulkSelection is &quot;all&quot;" name="SelectableHeader should set checked to true in InputCheckbox component when bulkSelection is &quot;all&quot;" time="0.007">
    </testcase>
    <testcase classname="SelectableHeader should set checked to false in InputCheckbox component when bulkSelection is other than &quot;all&quot;" name="SelectableHeader should set checked to false in InputCheckbox component when bulkSelection is other than &quot;all&quot;" time="0.055">
    </testcase>
    <testcase classname="SelectableHeader should set indeterminate to true in InputCheckbox component when bulkSelection is &quot;some&quot;" name="SelectableHeader should set indeterminate to true in InputCheckbox component when bulkSelection is &quot;some&quot;" time="0.005">
    </testcase>
    <testcase classname="SelectableHeader should set indeterminate to false in InputCheckbox component when bulkSelection is other than &quot;some&quot;" name="SelectableHeader should set indeterminate to false in InputCheckbox component when bulkSelection is other than &quot;some&quot;" time="0.042">
    </testcase>
    <testcase classname="SelectableHeader should set disabled to true in InputCheckbox component when maxRowSelection passed is 0" name="SelectableHeader should set disabled to true in InputCheckbox component when maxRowSelection passed is 0" time="0.008">
    </testcase>
    <testcase classname="SelectableHeader should set disabled to false in InputCheckbox component when maxRowSelection is other than 0" name="SelectableHeader should set disabled to false in InputCheckbox component when maxRowSelection is other than 0" time="0.04">
    </testcase>
    <testcase classname="SelectableHeader should call the right event when bulkSelection is &quot;none&quot;" name="SelectableHeader should call the right event when bulkSelection is &quot;none&quot;" time="0.014">
    </testcase>
    <testcase classname="SelectableHeader should call the right event when bulkSelection is other than &quot;none&quot;" name="SelectableHeader should call the right event when bulkSelection is other than &quot;none&quot;" time="0.029">
    </testcase>
  </testsuite>
  <testsuite name="&lt;InputCheckbox/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:45" time="0.523" tests="10">
    <testcase classname="&lt;InputCheckbox/&gt; should set an id in the input element" name="&lt;InputCheckbox/&gt; should set an id in the input element" time="0.041">
    </testcase>
    <testcase classname="&lt;InputCheckbox/&gt; should set the value passed in the input element" name="&lt;InputCheckbox/&gt; should set the value passed in the input element" time="0.01">
    </testcase>
    <testcase classname="&lt;InputCheckbox/&gt; should fire an event when the user change the input" name="&lt;InputCheckbox/&gt; should fire an event when the user change the input" time="0.013">
    </testcase>
    <testcase classname="&lt;InputCheckbox/&gt; should set the tabIndex passed in the input element" name="&lt;InputCheckbox/&gt; should set the tabIndex passed in the input element" time="0.005">
    </testcase>
    <testcase classname="&lt;InputCheckbox/&gt; should set the disabled passed in the input element" name="&lt;InputCheckbox/&gt; should set the disabled passed in the input element" time="0.011">
    </testcase>
    <testcase classname="&lt;InputCheckbox/&gt; should pass a generated inputId to the Label component" name="&lt;InputCheckbox/&gt; should pass a generated inputId to the Label component" time="0.005">
    </testcase>
    <testcase classname="&lt;InputCheckbox/&gt; should pass the right props to the Label component" name="&lt;InputCheckbox/&gt; should pass the right props to the Label component" time="0.006">
    </testcase>
    <testcase classname="&lt;InputCheckbox/&gt; should set indeterminate prop to true in input reference when it is passed" name="&lt;InputCheckbox/&gt; should set indeterminate prop to true in input reference when it is passed" time="0.007">
    </testcase>
    <testcase classname="&lt;InputCheckbox/&gt; should set indeterminate prop to true in input reference when it is passed later the component is mounted" name="&lt;InputCheckbox/&gt; should set indeterminate prop to true in input reference when it is passed later the component is mounted" time="0.013">
    </testcase>
    <testcase classname="&lt;InputCheckbox/&gt; should set checked prop passed in input element" name="&lt;InputCheckbox/&gt; should set checked prop passed in input element" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PrimitiveMenu/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:45" time="0.643" tests="7">
    <testcase classname="&lt;PrimitiveMenu/&gt; should focus the button when the focus method is called" name="&lt;PrimitiveMenu/&gt; should focus the button when the focus method is called" time="0.05">
    </testcase>
    <testcase classname="&lt;PrimitiveMenu/&gt; should blur the button when the blur method is called" name="&lt;PrimitiveMenu/&gt; should blur the button when the blur method is called" time="0.014">
    </testcase>
    <testcase classname="&lt;PrimitiveMenu/&gt; should set the isLoading passed in the MenuContent" name="&lt;PrimitiveMenu/&gt; should set the isLoading passed in the MenuContent" time="0.061">
    </testcase>
    <testcase classname="&lt;PrimitiveMenu/&gt; should render the children passed" name="&lt;PrimitiveMenu/&gt; should render the children passed" time="0.01">
    </testcase>
    <testcase classname="&lt;PrimitiveMenu/&gt; should set the role as menu in the ul element" name="&lt;PrimitiveMenu/&gt; should set the role as menu in the ul element" time="0.013">
    </testcase>
    <testcase classname="&lt;PrimitiveMenu/&gt; should set the title passed as the aria-label in the ul element" name="&lt;PrimitiveMenu/&gt; should set the title passed as the aria-label in the ul element" time="0.009">
    </testcase>
    <testcase classname="&lt;PrimitiveMenu/&gt; should set the assistiveText passed as the aria-label in the ul element when the title is not passed" name="&lt;PrimitiveMenu/&gt; should set the assistiveText passed as the aria-label in the ul element when the title is not passed" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="&lt;VerticalSectionOverflow/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:45" time="0.718" tests="12">
    <testcase classname="&lt;VerticalSectionOverflow/&gt; should change the isExpanded state when the button element is clicked" name="&lt;VerticalSectionOverflow/&gt; should change the isExpanded state when the button element is clicked" time="0.062">
    </testcase>
    <testcase classname="&lt;VerticalSectionOverflow/&gt; should change the isExpanded state when the button element is clicked and the expanded is set to true" name="&lt;VerticalSectionOverflow/&gt; should change the isExpanded state when the button element is clicked and the expanded is set to true" time="0.017">
    </testcase>
    <testcase classname="&lt;VerticalSectionOverflow/&gt; should set a generated id as aria-controls in button element and as id in the overflow container" name="&lt;VerticalSectionOverflow/&gt; should set a generated id as aria-controls in button element and as id in the overflow container" time="0.014">
    </testcase>
    <testcase classname="&lt;VerticalSectionOverflow/&gt; should set the aria-expanded in the button element to false initially" name="&lt;VerticalSectionOverflow/&gt; should set the aria-expanded in the button element to false initially" time="0.018">
    </testcase>
    <testcase classname="&lt;VerticalSectionOverflow/&gt; should set the aria-expanded in the button element to true if expanded is passed" name="&lt;VerticalSectionOverflow/&gt; should set the aria-expanded in the button element to true if expanded is passed" time="0.007">
    </testcase>
    <testcase classname="&lt;VerticalSectionOverflow/&gt; should set the aria-expanded in the button element to true if it is clicked" name="&lt;VerticalSectionOverflow/&gt; should set the aria-expanded in the button element to true if it is clicked" time="0.023">
    </testcase>
    <testcase classname="&lt;VerticalSectionOverflow/&gt; should pass the right props to Description component when use default values" name="&lt;VerticalSectionOverflow/&gt; should pass the right props to Description component when use default values" time="0.008">
    </testcase>
    <testcase classname="&lt;VerticalSectionOverflow/&gt; should pass the right props to Description component when the respective props are passed" name="&lt;VerticalSectionOverflow/&gt; should pass the right props to Description component when the respective props are passed" time="0.02">
    </testcase>
    <testcase classname="&lt;VerticalSectionOverflow/&gt; should set the isExpanded prop in Description component to true when the the button is clicked" name="&lt;VerticalSectionOverflow/&gt; should set the isExpanded prop in Description component to true when the the button is clicked" time="0.039">
    </testcase>
    <testcase classname="&lt;VerticalSectionOverflow/&gt; should set the assistiveText passed as text in AssistiveText component" name="&lt;VerticalSectionOverflow/&gt; should set the assistiveText passed as text in AssistiveText component" time="0.02">
    </testcase>
    <testcase classname="&lt;VerticalSectionOverflow/&gt; should render the children passed" name="&lt;VerticalSectionOverflow/&gt; should render the children passed" time="0.007">
    </testcase>
    <testcase classname="&lt;VerticalSectionOverflow/&gt; should fire an event when click in the VerticalSectionOverflow and onToggleSection is a function" name="&lt;VerticalSectionOverflow/&gt; should fire an event when click in the VerticalSectionOverflow and onToggleSection is a function" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="&lt;RadioButton /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:45" time="0.585" tests="8">
    <testcase classname="&lt;RadioButton /&gt; should set type radio to the input element" name="&lt;RadioButton /&gt; should set type radio to the input element" time="0.042">
    </testcase>
    <testcase classname="&lt;RadioButton /&gt; should pass a generated id to the input element and set the same id to the htmFor of the label element" name="&lt;RadioButton /&gt; should pass a generated id to the input element and set the same id to the htmFor of the label element" time="0.017">
    </testcase>
    <testcase classname="&lt;RadioButton /&gt; should set the name passed to the name prop of the input element" name="&lt;RadioButton /&gt; should set the name passed to the name prop of the input element" time="0.007">
    </testcase>
    <testcase classname="&lt;RadioButton /&gt; should set the value passed to the value prop of the input element" name="&lt;RadioButton /&gt; should set the value passed to the value prop of the input element" time="0.006">
    </testcase>
    <testcase classname="&lt;RadioButton /&gt; should set the isChecked passed to the checked prop of the input element" name="&lt;RadioButton /&gt; should set the isChecked passed to the checked prop of the input element" time="0.014">
    </testcase>
    <testcase classname="&lt;RadioButton /&gt; should set the value ariaDescribedby to the ariaDescribedby prop of the input element" name="&lt;RadioButton /&gt; should set the value ariaDescribedby to the ariaDescribedby prop of the input element" time="0.004">
    </testcase>
    <testcase classname="&lt;RadioButton /&gt; should fire an event when the user click the radio" name="&lt;RadioButton /&gt; should fire an event when the user click the radio" time="0.01">
    </testcase>
    <testcase classname="&lt;RadioButton /&gt; should set the disabled passed to the disabled prop of the input element" name="&lt;RadioButton /&gt; should set the disabled passed to the disabled prop of the input element" time="0.034">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Spinner/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:45" time="0.506" tests="1">
    <testcase classname="&lt;Spinner/&gt; should be accessible" name="&lt;Spinner/&gt; should be accessible" time="0.081">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Slider/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:45" time="0.649" tests="1">
    <testcase classname="&lt;Slider/&gt; should be accessible" name="&lt;Slider/&gt; should be accessible" time="0.224">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ProgressBar/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:45" time="0.488" tests="1">
    <testcase classname="&lt;ProgressBar/&gt; should be accessible" name="&lt;ProgressBar/&gt; should be accessible" time="0.062">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TimelineMarker/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:45" time="0.608" tests="6">
    <testcase classname="&lt;TimelineMarker/&gt; should render the children passed" name="&lt;TimelineMarker/&gt; should render the children passed" time="0.052">
    </testcase>
    <testcase classname="&lt;TimelineMarker/&gt; should render the icon passed" name="&lt;TimelineMarker/&gt; should render the icon passed" time="0.016">
    </testcase>
    <testcase classname="&lt;TimelineMarker/&gt; should render the calendar icon by default" name="&lt;TimelineMarker/&gt; should render the calendar icon by default" time="0.013">
    </testcase>
    <testcase classname="&lt;TimelineMarker/&gt; should render the label passed" name="&lt;TimelineMarker/&gt; should render the label passed" time="0.01">
    </testcase>
    <testcase classname="&lt;TimelineMarker/&gt; should render the datetime passed" name="&lt;TimelineMarker/&gt; should render the datetime passed" time="0.008">
    </testcase>
    <testcase classname="&lt;TimelineMarker/&gt; should render the description passed" name="&lt;TimelineMarker/&gt; should render the description passed" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ProgressCircular/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:45" time="0.557" tests="1">
    <testcase classname="&lt;ProgressCircular/&gt; should be accessible" name="&lt;ProgressCircular/&gt; should be accessible" time="0.099">
    </testcase>
  </testsuite>
  <testsuite name="&lt;LoadingCells /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:45" time="0.513" tests="2">
    <testcase classname="&lt;LoadingCells /&gt; should not render anything when value is 0" name="&lt;LoadingCells /&gt; should not render anything when value is 0" time="0.017">
    </testcase>
    <testcase classname="&lt;LoadingCells /&gt; should render the amount of children that match with the value passed" name="&lt;LoadingCells /&gt; should render the amount of children that match with the value passed" time="0.024">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AvatarMenu/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:45" time="0.647" tests="8">
    <testcase classname="&lt;AvatarMenu/&gt; should pass the icon passed to the AvatarButton" name="&lt;AvatarMenu/&gt; should pass the icon passed to the AvatarButton" time="0.044">
    </testcase>
    <testcase classname="&lt;AvatarMenu/&gt; should set the title passed in the AvatarButton" name="&lt;AvatarMenu/&gt; should set the title passed in the AvatarButton" time="0.014">
    </testcase>
    <testcase classname="&lt;AvatarMenu/&gt; should set the disabled passed in the AvatarButton" name="&lt;AvatarMenu/&gt; should set the disabled passed in the AvatarButton" time="0.015">
    </testcase>
    <testcase classname="&lt;AvatarMenu/&gt; should set the tabIndex passed in the AvatarButton" name="&lt;AvatarMenu/&gt; should set the tabIndex passed in the AvatarButton" time="0.008">
    </testcase>
    <testcase classname="&lt;AvatarMenu/&gt; should set the initials passed in the AvatarButton" name="&lt;AvatarMenu/&gt; should set the initials passed in the AvatarButton" time="0.014">
    </testcase>
    <testcase classname="&lt;AvatarMenu/&gt; should set the initialsVariant passed in the AvatarButton" name="&lt;AvatarMenu/&gt; should set the initialsVariant passed in the AvatarButton" time="0.022">
    </testcase>
    <testcase classname="&lt;AvatarMenu/&gt; should set the avatarSize passed in the AvatarButton" name="&lt;AvatarMenu/&gt; should set the avatarSize passed in the AvatarButton" time="0.016">
    </testcase>
    <testcase classname="&lt;AvatarMenu/&gt; should set the src passed in the AvatarButton" name="&lt;AvatarMenu/&gt; should set the src passed in the AvatarButton" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Tab /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:45" time="0.656" tests="13">
    <testcase classname="&lt;Tab /&gt; should set the right class names when custom class name is passed" name="&lt;Tab /&gt; should set the right class names when custom class name is passed" time="0.044">
    </testcase>
    <testcase classname="&lt;Tab /&gt; should call onSelect when clicked" name="&lt;Tab /&gt; should call onSelect when clicked" time="0.013">
    </testcase>
    <testcase classname="&lt;Tab /&gt; should not call onSelect when clicked if disabled is passed" name="&lt;Tab /&gt; should not call onSelect when clicked if disabled is passed" time="0.024">
    </testcase>
    <testcase classname="&lt;Tab /&gt; should set role to presentation in li." name="&lt;Tab /&gt; should set role to presentation in li." time="0.005">
    </testcase>
    <testcase classname="&lt;Tab /&gt; should set the title passed as title in li." name="&lt;Tab /&gt; should set the title passed as title in li." time="0.005">
    </testcase>
    <testcase classname="&lt;Tab /&gt; should set role to tab in button element" name="&lt;Tab /&gt; should set role to tab in button element" time="0.005">
    </testcase>
    <testcase classname="&lt;Tab /&gt; should set aria-selected to true in button element when the tab is selected" name="&lt;Tab /&gt; should set aria-selected to true in button element when the tab is selected" time="0.05">
    </testcase>
    <testcase classname="&lt;Tab /&gt; should set tabIndex to 0 in button element when tab is selected" name="&lt;Tab /&gt; should set tabIndex to 0 in button element when tab is selected" time="0.005">
    </testcase>
    <testcase classname="&lt;Tab /&gt; should set tabIndex to -1 in button element when tab is not selected" name="&lt;Tab /&gt; should set tabIndex to -1 in button element when tab is not selected" time="0.004">
    </testcase>
    <testcase classname="&lt;Tab /&gt; should set id in the button element" name="&lt;Tab /&gt; should set id in the button element" time="0.004">
    </testcase>
    <testcase classname="&lt;Tab /&gt; should set id in the button element" name="&lt;Tab /&gt; should set id in the button element" time="0.005">
    </testcase>
    <testcase classname="&lt;Tab /&gt; should call privateUpdateTab function with right data when a tab is changed" name="&lt;Tab /&gt; should call privateUpdateTab function with right data when a tab is changed" time="0.006">
    </testcase>
    <testcase classname="&lt;Tab /&gt; should not call privateUpdateTab function if any tab is changed" name="&lt;Tab /&gt; should not call privateUpdateTab function if any tab is changed" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ButtonIcon/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:46" time="0.492" tests="10">
    <testcase classname="&lt;ButtonIcon/&gt; should focus the button when the focus method is called" name="&lt;ButtonIcon/&gt; should focus the button when the focus method is called" time="0.034">
    </testcase>
    <testcase classname="&lt;ButtonIcon/&gt; should blur the button when the blur method is called" name="&lt;ButtonIcon/&gt; should blur the button when the blur method is called" time="0.006">
    </testcase>
    <testcase classname="&lt;ButtonIcon/&gt; should set disable to true when it is passed" name="&lt;ButtonIcon/&gt; should set disable to true when it is passed" time="0.005">
    </testcase>
    <testcase classname="&lt;ButtonIcon/&gt; should set the tabIndex passed" name="&lt;ButtonIcon/&gt; should set the tabIndex passed" time="0.005">
    </testcase>
    <testcase classname="&lt;ButtonIcon/&gt; should set the title passed" name="&lt;ButtonIcon/&gt; should set the title passed" time="0.005">
    </testcase>
    <testcase classname="&lt;ButtonIcon/&gt; should set the type passed" name="&lt;ButtonIcon/&gt; should set the type passed" time="0.005">
    </testcase>
    <testcase classname="&lt;ButtonIcon/&gt; should set aria-haspopup to true when it is passed" name="&lt;ButtonIcon/&gt; should set aria-haspopup to true when it is passed" time="0.004">
    </testcase>
    <testcase classname="&lt;ButtonIcon/&gt; should set aria-controls to true when it is passed" name="&lt;ButtonIcon/&gt; should set aria-controls to true when it is passed" time="0.008">
    </testcase>
    <testcase classname="&lt;ButtonIcon/&gt; should set aria-expanded to true when it is passed" name="&lt;ButtonIcon/&gt; should set aria-expanded to true when it is passed" time="0.006">
    </testcase>
    <testcase classname="&lt;ButtonIcon/&gt; should pass assistiveText to the prop text of AssistiveText component" name="&lt;ButtonIcon/&gt; should pass assistiveText to the prop text of AssistiveText component" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CarouselCard /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:46" time="0.659" tests="2">
    <testcase classname="&lt;CarouselCard /&gt; should render the children passed" name="&lt;CarouselCard /&gt; should render the children passed" time="0.087">
    </testcase>
    <testcase classname="&lt;CarouselCard /&gt; should set the right state when disableAutoScroll is passed" name="&lt;CarouselCard /&gt; should set the right state when disableAutoScroll is passed" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="&lt;InputCheckboxLabel/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:46" time="0.404" tests="1">
    <testcase classname="&lt;InputCheckboxLabel/&gt; should set the inputId passed as the htmlFor prop in the label element" name="&lt;InputCheckboxLabel/&gt; should set the inputId passed as the htmlFor prop in the label element" time="0.027">
    </testcase>
  </testsuite>
  <testsuite name="&lt;InputCheckbox/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:46" time="0.534" tests="1">
    <testcase classname="&lt;InputCheckbox/&gt; should be accessible when label is passed" name="&lt;InputCheckbox/&gt; should be accessible when label is passed" time="0.15">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Badge/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:46" time="0.457" tests="2">
    <testcase classname="&lt;Badge/&gt; should be accessible when label is passed" name="&lt;Badge/&gt; should be accessible when label is passed" time="0.069">
    </testcase>
    <testcase classname="&lt;Badge/&gt; should be accessible when text is passed as children" name="&lt;Badge/&gt; should be accessible when text is passed as children" time="0.042">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Slider/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:46" time="0.494" tests="1">
    <testcase classname="&lt;Slider/&gt; should be focusable" name="&lt;Slider/&gt; should be focusable" time="0.112">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Textarea/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:46" time="0.726" tests="11">
    <testcase classname="&lt;Textarea/&gt; should set an id in the textarea element" name="&lt;Textarea/&gt; should set an id in the textarea element" time="0.064">
    </testcase>
    <testcase classname="&lt;Textarea/&gt; should set the value passed in the textarea element" name="&lt;Textarea/&gt; should set the value passed in the textarea element" time="0.007">
    </testcase>
    <testcase classname="&lt;Textarea/&gt; should set the placeholder passed in the textarea element" name="&lt;Textarea/&gt; should set the placeholder passed in the textarea element" time="0.007">
    </testcase>
    <testcase classname="&lt;Textarea/&gt; should fire an event when the user change the textarea" name="&lt;Textarea/&gt; should fire an event when the user change the textarea" time="0.01">
    </testcase>
    <testcase classname="&lt;Textarea/&gt; should set the disabled passed in the textarea element" name="&lt;Textarea/&gt; should set the disabled passed in the textarea element" time="0.015">
    </testcase>
    <testcase classname="&lt;Textarea/&gt; should set the readonly passed in the textarea element" name="&lt;Textarea/&gt; should set the readonly passed in the textarea element" time="0.008">
    </testcase>
    <testcase classname="&lt;Textarea/&gt; should set required in the textarea element if it is passed" name="&lt;Textarea/&gt; should set required in the textarea element if it is passed" time="0.024">
    </testcase>
    <testcase classname="&lt;Textarea/&gt; should set the maxLength passed in the textarea element" name="&lt;Textarea/&gt; should set the maxLength passed in the textarea element" time="0.006">
    </testcase>
    <testcase classname="&lt;Textarea/&gt; should set the minLength passed in the textarea element" name="&lt;Textarea/&gt; should set the minLength passed in the textarea element" time="0.005">
    </testcase>
    <testcase classname="&lt;Textarea/&gt; should pass a generated id to the Label component and set the same id to the aria-labelledby for the textarea when a bottomHelpText is passed" name="&lt;Textarea/&gt; should pass a generated id to the Label component and set the same id to the aria-labelledby for the textarea when a bottomHelpText is passed" time="0.015">
    </testcase>
    <testcase classname="&lt;Textarea/&gt; should pass the right props to the Label component" name="&lt;Textarea/&gt; should pass the right props to the Label component" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ResizeBar /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:46" time="0.639" tests="9">
    <testcase classname="&lt;ResizeBar /&gt; should set isResizable passed to isTrue in RenderIf component" name="&lt;ResizeBar /&gt; should set isResizable passed to isTrue in RenderIf component" time="0.063">
    </testcase>
    <testcase classname="&lt;ResizeBar /&gt; should pass the right props to input element" name="&lt;ResizeBar /&gt; should pass the right props to input element" time="0.006">
    </testcase>
    <testcase classname="&lt;ResizeBar /&gt; should handle onMouseDown event" name="&lt;ResizeBar /&gt; should handle onMouseDown event" time="0.009">
    </testcase>
    <testcase classname="&lt;ResizeBar /&gt; should handle onMouseMove event" name="&lt;ResizeBar /&gt; should handle onMouseMove event" time="0.012">
    </testcase>
    <testcase classname="&lt;ResizeBar /&gt; should handle onMouseMove event and set newXposition to 800 if the new width is bigger than 1000" name="&lt;ResizeBar /&gt; should handle onMouseMove event and set newXposition to 800 if the new width is bigger than 1000" time="0.032">
    </testcase>
    <testcase classname="&lt;ResizeBar /&gt; should handle onMouseMove event and set newXposition to -150 if the new width is smaller than 50" name="&lt;ResizeBar /&gt; should handle onMouseMove event and set newXposition to -150 if the new width is smaller than 50" time="0.008">
    </testcase>
    <testcase classname="&lt;ResizeBar /&gt; should set the right state when handle onMouseMove event" name="&lt;ResizeBar /&gt; should set the right state when handle onMouseMove event" time="0.011">
    </testcase>
    <testcase classname="&lt;ResizeBar /&gt; should call onResize with the right data when handle onMouseUp event" name="&lt;ResizeBar /&gt; should call onResize with the right data when handle onMouseUp event" time="0.016">
    </testcase>
    <testcase classname="&lt;ResizeBar /&gt; should set the right state when handle onMouseUp event" name="&lt;ResizeBar /&gt; should set the right state when handle onMouseUp event" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Table /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:42" time="4.469" tests="38">
    <testcase classname="&lt;Table /&gt; should not render anything if a string keyField is not passed" name="&lt;Table /&gt; should not render anything if a string keyField is not passed" time="0.23">
    </testcase>
    <testcase classname="&lt;Table /&gt; should return a table with one column" name="&lt;Table /&gt; should return a table with one column" time="0.108">
    </testcase>
    <testcase classname="&lt;Table /&gt; should not add a column when showCheckboxColumn is not passed" name="&lt;Table /&gt; should not add a column when showCheckboxColumn is not passed" time="0.074">
    </testcase>
    <testcase classname="&lt;Table /&gt; should add a column when showCheckboxColumn is passed" name="&lt;Table /&gt; should add a column when showCheckboxColumn is passed" time="0.135">
    </testcase>
    <testcase classname="&lt;Table /&gt; should update the columns state when add a column and showCheckboxColumn is not passed" name="&lt;Table /&gt; should update the columns state when add a column and showCheckboxColumn is not passed" time="0.091">
    </testcase>
    <testcase classname="&lt;Table /&gt; should update the columns state when add a column and showCheckboxColumn is passed" name="&lt;Table /&gt; should update the columns state when add a column and showCheckboxColumn is passed" time="0.091">
    </testcase>
    <testcase classname="&lt;Table /&gt; should not update the columns state when the props changed are others than children" name="&lt;Table /&gt; should not update the columns state when the props changed are others than children" time="0.06">
    </testcase>
    <testcase classname="&lt;Table /&gt; should set the right table width when resize for first time" name="&lt;Table /&gt; should set the right table width when resize for first time" time="0.089">
    </testcase>
    <testcase classname="&lt;Table /&gt; should store the right columns in state when resize a column" name="&lt;Table /&gt; should store the right columns in state when resize a column" time="0.062">
    </testcase>
    <testcase classname="&lt;Table /&gt; should set the right table width when resize for second time" name="&lt;Table /&gt; should set the right table width when resize for second time" time="0.1">
    </testcase>
    <testcase classname="&lt;Table /&gt; should call onSort with the right data when a sortable column header is clicked" name="&lt;Table /&gt; should call onSort with the right data when a sortable column header is clicked" time="0.054">
    </testcase>
    <testcase classname="&lt;Table /&gt; should not call onSort when a non sortable column header is clicked" name="&lt;Table /&gt; should not call onSort when a non sortable column header is clicked" time="0.049">
    </testcase>
    <testcase classname="&lt;Table /&gt; should call onSort the first time with sortDireciton as &quot;desc&quot; and the second time as &quot;asc&quot; when defaultSortDirection is set to &quot;desc&quot;" name="&lt;Table /&gt; should call onSort the first time with sortDireciton as &quot;desc&quot; and the second time as &quot;asc&quot; when defaultSortDirection is set to &quot;desc&quot;" time="0.081">
    </testcase>
    <testcase classname="&lt;Table /&gt; should set the right rows initially" name="&lt;Table /&gt; should set the right rows initially" time="0.111">
    </testcase>
    <testcase classname="&lt;Table /&gt; should set the right rows initially when there are selected columns" name="&lt;Table /&gt; should set the right rows initially when there are selected columns" time="0.087">
    </testcase>
    <testcase classname="&lt;Table /&gt; should set the right rows initially when maxRowSelection is 1" name="&lt;Table /&gt; should set the right rows initially when maxRowSelection is 1" time="0.13">
    </testcase>
    <testcase classname="&lt;Table /&gt; should set the bulkSelection initially to &quot;none&quot; when there are not selected rows" name="&lt;Table /&gt; should set the bulkSelection initially to &quot;none&quot; when there are not selected rows" time="0.069">
    </testcase>
    <testcase classname="&lt;Table /&gt; should set the bulkSelection initially to &quot;some&quot; when there are one row selected" name="&lt;Table /&gt; should set the bulkSelection initially to &quot;some&quot; when there are one row selected" time="0.065">
    </testcase>
    <testcase classname="&lt;Table /&gt; should set the bulkSelection initially to &quot;all&quot; when all rows are selected" name="&lt;Table /&gt; should set the bulkSelection initially to &quot;all&quot; when all rows are selected" time="0.077">
    </testcase>
    <testcase classname="&lt;Table /&gt; should set the right state when change the maxRowSelection" name="&lt;Table /&gt; should set the right state when change the maxRowSelection" time="0.096">
    </testcase>
    <testcase classname="&lt;Table /&gt; should set the right state when change the selectedRows" name="&lt;Table /&gt; should set the right state when change the selectedRows" time="0.103">
    </testcase>
    <testcase classname="&lt;Table /&gt; should fire onRowSelection with new selected data when change the selectedRows" name="&lt;Table /&gt; should fire onRowSelection with new selected data when change the selectedRows" time="0.085">
    </testcase>
    <testcase classname="&lt;Table /&gt; should call onRowSelection with the right data when select all rows and there are selected rows" name="&lt;Table /&gt; should call onRowSelection with the right data when select all rows and there are selected rows" time="0.108">
    </testcase>
    <testcase classname="&lt;Table /&gt; should call onRowSelection with the right data when select all rows and there are not selected rows" name="&lt;Table /&gt; should call onRowSelection with the right data when select all rows and there are not selected rows" time="0.073">
    </testcase>
    <testcase classname="&lt;Table /&gt; should call onRowSelection with the right data when select a single row and there are selected rows" name="&lt;Table /&gt; should call onRowSelection with the right data when select a single row and there are selected rows" time="0.083">
    </testcase>
    <testcase classname="&lt;Table /&gt; should call onRowSelection with the right data when select a single row with shiftKey pressed" name="&lt;Table /&gt; should call onRowSelection with the right data when select a single row with shiftKey pressed" time="0.117">
    </testcase>
    <testcase classname="&lt;Table /&gt; should call onRowSelection with the right data when select a single row and maxRowSelection is 1" name="&lt;Table /&gt; should call onRowSelection with the right data when select a single row and maxRowSelection is 1" time="0.081">
    </testcase>
    <testcase classname="&lt;Table /&gt; should call onRowSelection with the right data when deselect a single row" name="&lt;Table /&gt; should call onRowSelection with the right data when deselect a single row" time="0.077">
    </testcase>
    <testcase classname="&lt;Table /&gt; should set the right indexes when data prop changes" name="&lt;Table /&gt; should set the right indexes when data prop changes" time="0.102">
    </testcase>
    <testcase classname="&lt;Table /&gt; should set the right state when data prop changes" name="&lt;Table /&gt; should set the right state when data prop changes" time="0.081">
    </testcase>
    <testcase classname="&lt;Table /&gt; should set the right state when data prop changes and have selected rows" name="&lt;Table /&gt; should set the right state when data prop changes and have selected rows" time="0.093">
    </testcase>
    <testcase classname="&lt;Table /&gt; should set the initial selectedRowsKeys to empty object when not pass selectedRows" name="&lt;Table /&gt; should set the initial selectedRowsKeys to empty object when not pass selectedRows" time="0.076">
    </testcase>
    <testcase classname="&lt;Table /&gt; should set the right initial selectedRowsKeys when pass selectedRows" name="&lt;Table /&gt; should set the right initial selectedRowsKeys when pass selectedRows" time="0.083">
    </testcase>
    <testcase classname="&lt;Table /&gt; should not reset selectedRowsKeys state when pass new data prop" name="&lt;Table /&gt; should not reset selectedRowsKeys state when pass new data prop" time="0.12">
    </testcase>
    <testcase classname="&lt;Table /&gt; should fire onRowSelection when pass new data prop that does not contains prev selected data" name="&lt;Table /&gt; should fire onRowSelection when pass new data prop that does not contains prev selected data" time="0.136">
    </testcase>
    <testcase classname="&lt;Table /&gt; should not change bulkSelection state when select all rows and then pass new data prop that remove one row" name="&lt;Table /&gt; should not change bulkSelection state when select all rows and then pass new data prop that remove one row" time="0.121">
    </testcase>
    <testcase classname="&lt;Table /&gt; should not fire onRowSelection when set data and selectedRows after mount the component" name="&lt;Table /&gt; should not fire onRowSelection when set data and selectedRows after mount the component" time="0.1">
    </testcase>
    <testcase classname="&lt;Table /&gt; should set input type to &quot;checkbox&quot; when there is only one row" name="&lt;Table /&gt; should set input type to &quot;checkbox&quot; when there is only one row" time="0.034">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ButtonIcon/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:46" time="0.491" tests="1">
    <testcase classname="&lt;ButtonIcon/&gt; should be accessible when pass assistiveText" name="&lt;ButtonIcon/&gt; should be accessible when pass assistiveText" time="0.107">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Header/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:46" time="0.542" tests="2">
    <testcase classname="&lt;Header/&gt; should render the text passed inside an h2 element when is a string" name="&lt;Header/&gt; should render the text passed inside an h2 element when is a string" time="0.041">
    </testcase>
    <testcase classname="&lt;Header/&gt; should return the same text passed when it is not a string" name="&lt;Header/&gt; should return the same text passed when it is not a string" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="Textarea" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:46" time="0.509" tests="1">
    <testcase classname="Textarea should be accessible when label is passed" name="Textarea should be accessible when label is passed" time="0.162">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Select/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:46" time="0.551" tests="1">
    <testcase classname="&lt;Select/&gt; should be focusable" name="&lt;Select/&gt; should be focusable" time="0.07">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AvatarContent/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:46" time="0.489" tests="5">
    <testcase classname="&lt;AvatarContent/&gt; should render an img when src is passed" name="&lt;AvatarContent/&gt; should render an img when src is passed" time="0.018">
    </testcase>
    <testcase classname="&lt;AvatarContent/&gt; should pass right props to the img element when a valid src is passed" name="&lt;AvatarContent/&gt; should pass right props to the img element when a valid src is passed" time="0.005">
    </testcase>
    <testcase classname="&lt;AvatarContent/&gt; should render an abbr when src is not passed and initials props is passed" name="&lt;AvatarContent/&gt; should render an abbr when src is not passed and initials props is passed" time="0.007">
    </testcase>
    <testcase classname="&lt;AvatarContent/&gt; should pass right props to the abbr element when src is not passed and initials props is passed" name="&lt;AvatarContent/&gt; should pass right props to the abbr element when src is not passed and initials props is passed" time="0.004">
    </testcase>
    <testcase classname="&lt;AvatarContent/&gt; should return the icon passed when src and initials are not passed" name="&lt;AvatarContent/&gt; should return the icon passed when src and initials are not passed" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Slider /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:46" time="0.647" tests="9">
    <testcase classname="&lt;Slider /&gt; should fire an event when the user change the input" name="&lt;Slider /&gt; should fire an event when the user change the input" time="0.09">
    </testcase>
    <testcase classname="&lt;Slider /&gt; should set the value passed in the input element" name="&lt;Slider /&gt; should set the value passed in the input element" time="0.007">
    </testcase>
    <testcase classname="&lt;Slider /&gt; should set the min value passed in the input element" name="&lt;Slider /&gt; should set the min value passed in the input element" time="0.007">
    </testcase>
    <testcase classname="&lt;Slider /&gt; should set the max value passed in the input element" name="&lt;Slider /&gt; should set the max value passed in the input element" time="0.007">
    </testcase>
    <testcase classname="&lt;Slider /&gt; should set the step value passed in the input element" name="&lt;Slider /&gt; should set the step value passed in the input element" time="0.006">
    </testcase>
    <testcase classname="&lt;Slider /&gt; should set the disabled passed in the input element" name="&lt;Slider /&gt; should set the disabled passed in the input element" time="0.006">
    </testcase>
    <testcase classname="&lt;Slider /&gt; should set an id in the input element" name="&lt;Slider /&gt; should set an id in the input element" time="0.006">
    </testcase>
    <testcase classname="&lt;Slider /&gt; should pass a generated id to the Error element and set the same id to the aria-describedby for the input when a error is passed" name="&lt;Slider /&gt; should pass a generated id to the Error element and set the same id to the aria-describedby for the input when a error is passed" time="0.012">
    </testcase>
    <testcase classname="&lt;Slider /&gt; should not set aria-describedby in the input if no error is passed" name="&lt;Slider /&gt; should not set aria-describedby in the input if no error is passed" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ReCaptchaComponent /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:46" time="0.463" tests="2">
    <testcase classname="&lt;ReCaptchaComponent /&gt; it should call the ready function" name="&lt;ReCaptchaComponent /&gt; it should call the ready function" time="0.015">
    </testcase>
    <testcase classname="&lt;ReCaptchaComponent /&gt; it should call the render function with the right params" name="&lt;ReCaptchaComponent /&gt; it should call the render function with the right params" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AnimationButtom /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:46" time="0.514" tests="6">
    <testcase classname="&lt;AnimationButtom /&gt; should set the right assistive text" name="&lt;AnimationButtom /&gt; should set the right assistive text" time="0.034">
    </testcase>
    <testcase classname="&lt;AnimationButtom /&gt; should set the right assistive text" name="&lt;AnimationButtom /&gt; should set the right assistive text" time="0.008">
    </testcase>
    <testcase classname="&lt;AnimationButtom /&gt; should set the right aria-pressed value" name="&lt;AnimationButtom /&gt; should set the right aria-pressed value" time="0.007">
    </testcase>
    <testcase classname="&lt;AnimationButtom /&gt; should show the play icon" name="&lt;AnimationButtom /&gt; should show the play icon" time="0.008">
    </testcase>
    <testcase classname="&lt;AnimationButtom /&gt; should show the pause icon when isAnimationPaused is false" name="&lt;AnimationButtom /&gt; should show the pause icon when isAnimationPaused is false" time="0.008">
    </testcase>
    <testcase classname="&lt;AnimationButtom /&gt; should call the function passed in onClick" name="&lt;AnimationButtom /&gt; should call the function passed in onClick" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Spinner/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:46" time="0.391" tests="3">
    <testcase classname="&lt;Spinner/&gt; should not render the spinner when isVisible is false" name="&lt;Spinner/&gt; should not render the spinner when isVisible is false" time="0.014">
    </testcase>
    <testcase classname="&lt;Spinner/&gt; should not render the spinner when isVisible is true" name="&lt;Spinner/&gt; should not render the spinner when isVisible is true" time="0.024">
    </testcase>
    <testcase classname="&lt;Spinner/&gt; should pass assistiveText to the prop text of AssistiveText component" name="&lt;Spinner/&gt; should pass assistiveText to the prop text of AssistiveText component" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="&lt;VisualPickerOption/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:46" time="0.513" tests="6">
    <testcase classname="&lt;VisualPickerOption/&gt; should set type radio to the input element" name="&lt;VisualPickerOption/&gt; should set type radio to the input element" time="0.029">
    </testcase>
    <testcase classname="&lt;VisualPickerOption/&gt; should set type checkbox to the input element" name="&lt;VisualPickerOption/&gt; should set type checkbox to the input element" time="0.007">
    </testcase>
    <testcase classname="&lt;VisualPickerOption/&gt; should set correct name to the input element" name="&lt;VisualPickerOption/&gt; should set correct name to the input element" time="0.008">
    </testcase>
    <testcase classname="&lt;VisualPickerOption/&gt; should mark the input element as checked when is not multiple" name="&lt;VisualPickerOption/&gt; should mark the input element as checked when is not multiple" time="0.013">
    </testcase>
    <testcase classname="&lt;VisualPickerOption/&gt; should mark the input element as checked when is multiple" name="&lt;VisualPickerOption/&gt; should mark the input element as checked when is multiple" time="0.006">
    </testcase>
    <testcase classname="&lt;VisualPickerOption/&gt; should not mark the input element as checked when is multiple and value passed is not an array" name="&lt;VisualPickerOption/&gt; should not mark the input element as checked when is multiple and value passed is not an array" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="&lt;InputCheckbox/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:46" time="0.527" tests="1">
    <testcase classname="&lt;InputCheckbox/&gt; should be focusable" name="&lt;InputCheckbox/&gt; should be focusable" time="0.06">
    </testcase>
  </testsuite>
  <testsuite name="&lt;VerticalItem when href is passed/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:46" time="0.639" tests="10">
    <testcase classname="&lt;VerticalItem when href is passed/&gt; should pass the right props to anchor element" name="&lt;VerticalItem when href is passed/&gt; should pass the right props to anchor element" time="0.038">
    </testcase>
    <testcase classname="&lt;VerticalItem when href is passed/&gt; should set the aria-current as page in anchor element when the item is selected" name="&lt;VerticalItem when href is passed/&gt; should set the aria-current as page in anchor element when the item is selected" time="0.011">
    </testcase>
    <testcase classname="&lt;VerticalItem when href is passed/&gt; should render the label passed" name="&lt;VerticalItem when href is passed/&gt; should render the label passed" time="0.007">
    </testcase>
    <testcase classname="&lt;VerticalItem when href is passed/&gt; should fire an event onClick when the item is clicked" name="&lt;VerticalItem when href is passed/&gt; should fire an event onClick when the item is clicked" time="0.006">
    </testcase>
    <testcase classname="&lt;VerticalItem when href is passed/&gt; should fire an event onSelect when the item is clicked" name="&lt;VerticalItem when href is passed/&gt; should fire an event onSelect when the item is clicked" time="0.006">
    </testcase>
    <testcase classname="&lt;VerticalItem when href is not passed/&gt; should pass the right props to button element" name="&lt;VerticalItem when href is not passed/&gt; should pass the right props to button element" time="0.01">
    </testcase>
    <testcase classname="&lt;VerticalItem when href is not passed/&gt; should set the aria-current as page in button element when the item is selected" name="&lt;VerticalItem when href is not passed/&gt; should set the aria-current as page in button element when the item is selected" time="0.013">
    </testcase>
    <testcase classname="&lt;VerticalItem when href is not passed/&gt; should render the label passed" name="&lt;VerticalItem when href is not passed/&gt; should render the label passed" time="0.005">
    </testcase>
    <testcase classname="&lt;VerticalItem when href is not passed/&gt; should fire an event onClick when the item is clicked" name="&lt;VerticalItem when href is not passed/&gt; should fire an event onClick when the item is clicked" time="0.005">
    </testcase>
    <testcase classname="&lt;VerticalItem when href is not passed/&gt; should fire an event onSelect when the item is clicked" name="&lt;VerticalItem when href is not passed/&gt; should fire an event onSelect when the item is clicked" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PicklistOption /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:46" time="0.626" tests="14">
    <testcase classname="&lt;PicklistOption /&gt; should render a option header when variant is header" name="&lt;PicklistOption /&gt; should render a option header when variant is header" time="0.02">
    </testcase>
    <testcase classname="&lt;PicklistOption /&gt; should render a regular option when variant is default" name="&lt;PicklistOption /&gt; should render a regular option when variant is default" time="0.008">
    </testcase>
    <testcase classname="&lt;PicklistOption /&gt; should not register when is disabled" name="&lt;PicklistOption /&gt; should not register when is disabled" time="0.012">
    </testcase>
    <testcase classname="&lt;PicklistOption /&gt; should not register when is variant header" name="&lt;PicklistOption /&gt; should not register when is variant header" time="0.006">
    </testcase>
    <testcase classname="&lt;PicklistOption /&gt; should not register when is name passed is not a string" name="&lt;PicklistOption /&gt; should not register when is name passed is not a string" time="0.005">
    </testcase>
    <testcase classname="&lt;PicklistOption /&gt; should register when mount" name="&lt;PicklistOption /&gt; should register when mount" time="0.003">
    </testcase>
    <testcase classname="&lt;PicklistOption /&gt; should register when deselected" name="&lt;PicklistOption /&gt; should register when deselected" time="0.008">
    </testcase>
    <testcase classname="&lt;PicklistOption /&gt; should unregister when unmount" name="&lt;PicklistOption /&gt; should unregister when unmount" time="0.004">
    </testcase>
    <testcase classname="&lt;PicklistOption /&gt; should fire an event with the right data when click the option" name="&lt;PicklistOption /&gt; should fire an event with the right data when click the option" time="0.01">
    </testcase>
    <testcase classname="&lt;PicklistOption /&gt; should not fire an event when click the option but is disabled" name="&lt;PicklistOption /&gt; should not fire an event when click the option but is disabled" time="0.005">
    </testcase>
    <testcase classname="&lt;PicklistOption /&gt; should fire an event with the right data when hover the option" name="&lt;PicklistOption /&gt; should fire an event with the right data when hover the option" time="0.002">
    </testcase>
    <testcase classname="&lt;PicklistOption /&gt; should not fire an event when hover the option but is disabled" name="&lt;PicklistOption /&gt; should not fire an event when hover the option but is disabled" time="0.007">
    </testcase>
    <testcase classname="&lt;PicklistOption /&gt; should render a checkmark icon when selected" name="&lt;PicklistOption /&gt; should render a checkmark icon when selected" time="0.004">
    </testcase>
    <testcase classname="&lt;PicklistOption /&gt; should call privateUnregisterChild with the right parameters on unmount" name="&lt;PicklistOption /&gt; should call privateUnregisterChild with the right parameters on unmount" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Badge/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:46" time="0.442" tests="3">
    <testcase classname="&lt;Badge/&gt; should render the &quot;Badge&quot; with the label passed" name="&lt;Badge/&gt; should render the &quot;Badge&quot; with the label passed" time="0.03">
    </testcase>
    <testcase classname="&lt;Badge/&gt; should render the &quot;Badge&quot; with the children passed" name="&lt;Badge/&gt; should render the &quot;Badge&quot; with the children passed" time="0.004">
    </testcase>
    <testcase classname="&lt;Badge/&gt; should not render the &quot;Badge&quot; when label and children are not passed" name="&lt;Badge/&gt; should not render the &quot;Badge&quot; when label and children are not passed" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ButtonItems /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:46" time="0.427" tests="2">
    <testcase classname="&lt;ButtonItems /&gt; should return the 3 radios when 3 options are passed" name="&lt;ButtonItems /&gt; should return the 3 radios when 3 options are passed" time="0.048">
    </testcase>
    <testcase classname="&lt;ButtonItems /&gt; should pass the right props to the RadioButtonItem component" name="&lt;ButtonItems /&gt; should pass the right props to the RadioButtonItem component" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="&lt;MenuItem/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:46" time="0.501" tests="10">
    <testcase classname="&lt;MenuItem/&gt; should render the label passed" name="&lt;MenuItem/&gt; should render the label passed" time="0.031">
    </testcase>
    <testcase classname="&lt;MenuItem/&gt; should set the title passed in the label container" name="&lt;MenuItem/&gt; should set the title passed in the label container" time="0.004">
    </testcase>
    <testcase classname="&lt;MenuItem/&gt; should pass the right props to the left and right Icon" name="&lt;MenuItem/&gt; should pass the right props to the left and right Icon" time="0.012">
    </testcase>
    <testcase classname="&lt;MenuItem/&gt; should set the isVisible to false to left and right Icon when the iconName is not passed" name="&lt;MenuItem/&gt; should set the isVisible to false to left and right Icon when the iconName is not passed" time="0.009">
    </testcase>
    <testcase classname="&lt;MenuItem/&gt; should set aria-disabled to true in the li element when disabled is passed" name="&lt;MenuItem/&gt; should set aria-disabled to true in the li element when disabled is passed" time="0.004">
    </testcase>
    <testcase classname="&lt;MenuItem/&gt; should fire an event when the li elment is clicked" name="&lt;MenuItem/&gt; should fire an event when the li elment is clicked" time="0.005">
    </testcase>
    <testcase classname="&lt;MenuItem/&gt; should not fire anything when the li elment is clicked but disabled is passed" name="&lt;MenuItem/&gt; should not fire anything when the li elment is clicked but disabled is passed" time="0.005">
    </testcase>
    <testcase classname="&lt;MenuItem/&gt; should set the role as menuitem in the li element" name="&lt;MenuItem/&gt; should set the role as menuitem in the li element" time="0.007">
    </testcase>
    <testcase classname="&lt;MenuItem/&gt; should set the role as separator in the li element when the variant is header" name="&lt;MenuItem/&gt; should set the role as separator in the li element when the variant is header" time="0.005">
    </testcase>
    <testcase classname="&lt;MenuItem/&gt; should set the title passed in the li element when the variant is header" name="&lt;MenuItem/&gt; should set the title passed in the li element when the variant is header" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Indicators /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:46" time="0.484" tests="2">
    <testcase classname="&lt;Indicators /&gt; should render the right amount of indicators" name="&lt;Indicators /&gt; should render the right amount of indicators" time="0.043">
    </testcase>
    <testcase classname="&lt;Indicators /&gt; should set the role as tablist in ul element" name="&lt;Indicators /&gt; should set the role as tablist in ul element" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Avatar/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:47" time="0.353" tests="1">
    <testcase classname="&lt;Avatar/&gt; should pass assistiveText to the prop text of AssistiveText component" name="&lt;Avatar/&gt; should pass assistiveText to the prop text of AssistiveText component" time="0.024">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Icon/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:47" time="0.356" tests="3">
    <testcase classname="&lt;Icon/&gt; should return the icon passed" name="&lt;Icon/&gt; should return the icon passed" time="0.014">
    </testcase>
    <testcase classname="&lt;Icon/&gt; should render the fallback icon when no icon is passed" name="&lt;Icon/&gt; should render the fallback icon when no icon is passed" time="0.009">
    </testcase>
    <testcase classname="&lt;Icon/&gt; should set the same text as title in span element and text in AssistiveText when no icon is passed" name="&lt;Icon/&gt; should set the same text as title in span element and text in AssistiveText when no icon is passed" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AvatarButton/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:47" time="0.438" tests="1">
    <testcase classname="&lt;AvatarButton/&gt; should be focusable" name="&lt;AvatarButton/&gt; should be focusable" time="0.038">
    </testcase>
  </testsuite>
  <testsuite name="&lt;VerticalSection/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:47" time="0.341" tests="2">
    <testcase classname="&lt;VerticalSection/&gt; should have the right className the container element" name="&lt;VerticalSection/&gt; should have the right className the container element" time="0.014">
    </testcase>
    <testcase classname="&lt;VerticalSection/&gt; should render the children passed" name="&lt;VerticalSection/&gt; should render the children passed" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Button /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:47" time="0.365" tests="1">
    <testcase classname="&lt;Button /&gt; should be focusable" name="&lt;Button /&gt; should be focusable" time="0.036">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Header/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:47" time="0.379" tests="2">
    <testcase classname="&lt;Header/&gt; should set the title passed" name="&lt;Header/&gt; should set the title passed" time="0.025">
    </testcase>
    <testcase classname="&lt;Header/&gt; should render the title passed if is not a string" name="&lt;Header/&gt; should render the title passed if is not a string" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="&lt;MenuContent/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:47" time="0.393" tests="3">
    <testcase classname="&lt;MenuContent/&gt; should render the Spinner when isLoading is true" name="&lt;MenuContent/&gt; should render the Spinner when isLoading is true" time="0.035">
    </testcase>
    <testcase classname="&lt;MenuContent/&gt; should pass the right props to Spinner when isLoading is true" name="&lt;MenuContent/&gt; should pass the right props to Spinner when isLoading is true" time="0.012">
    </testcase>
    <testcase classname="&lt;MenuContent/&gt; should render the children passed when isLoading is false" name="&lt;MenuContent/&gt; should render the children passed when isLoading is false" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Marker /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:47" time="0.359" tests="2">
    <testcase classname="&lt;Marker /&gt; should not render when it is not visible" name="&lt;Marker /&gt; should not render when it is not visible" time="0.016">
    </testcase>
    <testcase classname="&lt;Marker /&gt; should set the right position and size" name="&lt;Marker /&gt; should set the right position and size" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="zeroFill" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:47" time="0.304" tests="2">
    <testcase classname="zeroFill should return empty string" name="zeroFill should return empty string" time="0.002">
    </testcase>
    <testcase classname="zeroFill should return correct values string" name="zeroFill should return correct values string" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Breadcrumb/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:47" time="0.407" tests="8">
    <testcase classname="&lt;Breadcrumb/&gt; should render an anchor when href is passed" name="&lt;Breadcrumb/&gt; should render an anchor when href is passed" time="0.026">
    </testcase>
    <testcase classname="&lt;Breadcrumb/&gt; should render a button when href is not passed" name="&lt;Breadcrumb/&gt; should render a button when href is not passed" time="0.01">
    </testcase>
    <testcase classname="&lt;Breadcrumb/&gt; should set the href passed" name="&lt;Breadcrumb/&gt; should set the href passed" time="0.004">
    </testcase>
    <testcase classname="&lt;Breadcrumb/&gt; should invoke onClick callback when we clicked in the breadcrumb" name="&lt;Breadcrumb/&gt; should invoke onClick callback when we clicked in the breadcrumb" time="0.004">
    </testcase>
    <testcase classname="&lt;Breadcrumb/&gt; should set the label passed as children" name="&lt;Breadcrumb/&gt; should set the label passed as children" time="0.006">
    </testcase>
    <testcase classname="&lt;Breadcrumb/&gt; should set the right aria-disabled value when the disabled is passed" name="&lt;Breadcrumb/&gt; should set the right aria-disabled value when the disabled is passed" time="0.007">
    </testcase>
    <testcase classname="&lt;Breadcrumb/&gt; should set the label passed as children while href is passed" name="&lt;Breadcrumb/&gt; should set the label passed as children while href is passed" time="0.004">
    </testcase>
    <testcase classname="&lt;Breadcrumb/&gt; should set the right aria-disabled value when the disabled is passed while href is passed" name="&lt;Breadcrumb/&gt; should set the right aria-disabled value when the disabled is passed while href is passed" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Chart /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:47" time="0.405" tests="4">
    <testcase classname="&lt;Chart /&gt; should call ChartJS to render the chart when the component is mounted" name="&lt;Chart /&gt; should call ChartJS to render the chart when the component is mounted" time="0.018">
    </testcase>
    <testcase classname="&lt;Chart /&gt; should call ChartJS update method to update the chart when the component changes" name="&lt;Chart /&gt; should call ChartJS update method to update the chart when the component changes" time="0.012">
    </testcase>
    <testcase classname="&lt;Chart /&gt; should call ChartJS update method to update the chart when the children changes" name="&lt;Chart /&gt; should call ChartJS update method to update the chart when the children changes" time="0.005">
    </testcase>
    <testcase classname="&lt;Chart /&gt; should update the chart type when changed dynamically" name="&lt;Chart /&gt; should update the chart type when changed dynamically" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Chip/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:47" time="0.418" tests="1">
    <testcase classname="&lt;Chip/&gt; should be accessible" name="&lt;Chip/&gt; should be accessible" time="0.055">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Avatar/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:47" time="0.54" tests="1">
    <testcase classname="&lt;Avatar/&gt; should be accessible when a src and assistiveText are passed" name="&lt;Avatar/&gt; should be accessible when a src and assistiveText are passed" time="0.099">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Textarea/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:47" time="0.411" tests="1">
    <testcase classname="&lt;Textarea/&gt; should be focusable" name="&lt;Textarea/&gt; should be focusable" time="0.037">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Breadcrumbs/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:47" time="0.392" tests="2">
    <testcase classname="&lt;Breadcrumbs/&gt; should have a aria-label attribute for accessibility" name="&lt;Breadcrumbs/&gt; should have a aria-label attribute for accessibility" time="0.022">
    </testcase>
    <testcase classname="&lt;Breadcrumbs/&gt; should render the children passed" name="&lt;Breadcrumbs/&gt; should render the children passed" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Indicator /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:47" time="0.436" tests="7">
    <testcase classname="&lt;Indicator /&gt; should set the right props if the indicator is selected" name="&lt;Indicator /&gt; should set the right props if the indicator is selected" time="0.025">
    </testcase>
    <testcase classname="&lt;Indicator /&gt; should set the right props if the indicator is not selected" name="&lt;Indicator /&gt; should set the right props if the indicator is not selected" time="0.008">
    </testcase>
    <testcase classname="&lt;Indicator /&gt; should set the assistive text as title to the button element" name="&lt;Indicator /&gt; should set the assistive text as title to the button element" time="0.004">
    </testcase>
    <testcase classname="&lt;Indicator /&gt; should set title and text in AssistiveText to undefined when header is not a string" name="&lt;Indicator /&gt; should set title and text in AssistiveText to undefined when header is not a string" time="0.004">
    </testcase>
    <testcase classname="&lt;Indicator /&gt; should set the role as tab in button element" name="&lt;Indicator /&gt; should set the role as tab in button element" time="0.003">
    </testcase>
    <testcase classname="&lt;Indicator /&gt; should set the right accesivillity props" name="&lt;Indicator /&gt; should set the right accesivillity props" time="0.005">
    </testcase>
    <testcase classname="&lt;Indicator /&gt; should call the function passed in onSelect prop" name="&lt;Indicator /&gt; should call the function passed in onSelect prop" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AvatarButton/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:47" time="0.388" tests="2">
    <testcase classname="&lt;AvatarButton/&gt; should focus the AvatarButton when the focus method is called" name="&lt;AvatarButton/&gt; should focus the AvatarButton when the focus method is called" time="0.024">
    </testcase>
    <testcase classname="&lt;AvatarButton/&gt; should blur the AvatarButton when the blur method is called" name="&lt;AvatarButton/&gt; should blur the AvatarButton when the blur method is called" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Chip/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:47" time="0.438" tests="4">
    <testcase classname="&lt;Chip/&gt; should set the label passed" name="&lt;Chip/&gt; should set the label passed" time="0.018">
    </testcase>
    <testcase classname="&lt;Chip/&gt; should fire an event when the close button is clicked" name="&lt;Chip/&gt; should fire an event when the close button is clicked" time="0.026">
    </testcase>
    <testcase classname="&lt;Chip/&gt; should set isTrue in RenderIf to true when onDelete is passed" name="&lt;Chip/&gt; should set isTrue in RenderIf to true when onDelete is passed" time="0.008">
    </testcase>
    <testcase classname="&lt;Chip/&gt;  should set isTrue in RenderIf to false when onDelete is not passed" name="&lt;Chip/&gt;  should set isTrue in RenderIf to false when onDelete is not passed" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="&lt;MenuDivider /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:47" time="0.352" tests="1">
    <testcase classname="&lt;MenuDivider /&gt; should set the prop role as separator in li element" name="&lt;MenuDivider /&gt; should set the prop role as separator in li element" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="extractTime" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:47" time="0.372" tests="4">
    <testcase classname="extractTime should return an empty string when pass falsy values" name="extractTime should return an empty string when pass falsy values" time="0.002">
    </testcase>
    <testcase classname="extractTime should return an empty string when pass an invalid date" name="extractTime should return an empty string when pass an invalid date" time="0.001">
    </testcase>
    <testcase classname="extractTime should return the right time" name="extractTime should return the right time" time="0.002">
    </testcase>
    <testcase classname="extractTime should return the right time when hour24 param is true" name="extractTime should return the right time when hour24 param is true" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;SortArrowIcon /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:47" time="0.288" tests="2">
    <testcase classname="&lt;SortArrowIcon /&gt; should set the prop arrowAscendent to true when direction is asc" name="&lt;SortArrowIcon /&gt; should set the prop arrowAscendent to true when direction is asc" time="0.017">
    </testcase>
    <testcase classname="&lt;SortArrowIcon /&gt; should set the prop arrowAscendent to true when direction is desc" name="&lt;SortArrowIcon /&gt; should set the prop arrowAscendent to true when direction is desc" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="getRows" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:47" time="0.268" tests="2">
    <testcase classname="getRows should return an empty array when any params are passed" name="getRows should return an empty array when any params are passed" time="0">
    </testcase>
    <testcase classname="getRows should return the right rows" name="getRows should return the right rows" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ButtonMenu/&gt; utils" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:47" time="0.288" tests="5">
    <testcase classname="&lt;ButtonMenu/&gt; utils insertChildOrderly should insert the child in the right order if the item in the nodes is at middle" name="&lt;ButtonMenu/&gt; utils insertChildOrderly should insert the child in the right order if the item in the nodes is at middle" time="0.001">
    </testcase>
    <testcase classname="&lt;ButtonMenu/&gt; utils insertChildOrderly should insert the child in the right order if the item in the nodes is at end" name="&lt;ButtonMenu/&gt; utils insertChildOrderly should insert the child in the right order if the item in the nodes is at end" time="0.001">
    </testcase>
    <testcase classname="&lt;ButtonMenu/&gt; utils getChildMenuItemNodes should call querySelectorAll with a[role=&quot;menuitem&quot;]" name="&lt;ButtonMenu/&gt; utils getChildMenuItemNodes should call querySelectorAll with a[role=&quot;menuitem&quot;]" time="0">
    </testcase>
    <testcase classname="&lt;ButtonMenu/&gt; utils getChildMenuItemNodes should return the elements resolved by querySelectorAll" name="&lt;ButtonMenu/&gt; utils getChildMenuItemNodes should return the elements resolved by querySelectorAll" time="0">
    </testcase>
    <testcase classname="&lt;ButtonMenu/&gt; utils getChildMenuItemNodes should return an empty array if anything is passed" name="&lt;ButtonMenu/&gt; utils getChildMenuItemNodes should return an empty array if anything is passed" time="0">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Content/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:47" time="0.32" tests="5">
    <testcase classname="&lt;Content/&gt; should return the label when there are not children" name="&lt;Content/&gt; should return the label when there are not children" time="0.015">
    </testcase>
    <testcase classname="&lt;Content/&gt; should return the label when children is a falsy value other than zero" name="&lt;Content/&gt; should return the label when children is a falsy value other than zero" time="0.016">
    </testcase>
    <testcase classname="&lt;Content/&gt; should return the 0 when children is 0" name="&lt;Content/&gt; should return the 0 when children is 0" time="0.002">
    </testcase>
    <testcase classname="&lt;Content/&gt; should return children when label and children are passed" name="&lt;Content/&gt; should return children when label and children are passed" time="0.003">
    </testcase>
    <testcase classname="&lt;Content/&gt; should return children when label is not passed" name="&lt;Content/&gt; should return children when label is not passed" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ButtonMenu/&gt; utils" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:47" time="0.284" tests="10">
    <testcase classname="&lt;ButtonMenu/&gt; utils insertChildOrderly should insert the child in the right order if the item in the nodes is at middle" name="&lt;ButtonMenu/&gt; utils insertChildOrderly should insert the child in the right order if the item in the nodes is at middle" time="0.001">
    </testcase>
    <testcase classname="&lt;ButtonMenu/&gt; utils insertChildOrderly should insert the child in the right order if the item in the nodes is at end" name="&lt;ButtonMenu/&gt; utils insertChildOrderly should insert the child in the right order if the item in the nodes is at end" time="0.001">
    </testcase>
    <testcase classname="&lt;ButtonMenu/&gt; utils findItemByKey should find the item matched with the key passed" name="&lt;ButtonMenu/&gt; utils findItemByKey should find the item matched with the key passed" time="0.001">
    </testcase>
    <testcase classname="&lt;ButtonMenu/&gt; utils findItemByKey should find the item matched with the key passed altought the key is in lower case and the item innerText is in upper case" name="&lt;ButtonMenu/&gt; utils findItemByKey should find the item matched with the key passed altought the key is in lower case and the item innerText is in upper case" time="0">
    </testcase>
    <testcase classname="&lt;ButtonMenu/&gt; utils findItemByKey should return undefined if nothing match" name="&lt;ButtonMenu/&gt; utils findItemByKey should return undefined if nothing match" time="0.001">
    </testcase>
    <testcase classname="&lt;ButtonMenu/&gt; utils findItemIndex should find the right index" name="&lt;ButtonMenu/&gt; utils findItemIndex should find the right index" time="0">
    </testcase>
    <testcase classname="&lt;ButtonMenu/&gt; utils findItemIndex should return -1 if the item passed does not match" name="&lt;ButtonMenu/&gt; utils findItemIndex should return -1 if the item passed does not match" time="0.001">
    </testcase>
    <testcase classname="&lt;ButtonMenu/&gt; utils getChildMenuItemNodes should call querySelectorAll with [role=&quot;menuitem&quot;]" name="&lt;ButtonMenu/&gt; utils getChildMenuItemNodes should call querySelectorAll with [role=&quot;menuitem&quot;]" time="0">
    </testcase>
    <testcase classname="&lt;ButtonMenu/&gt; utils getChildMenuItemNodes should return the elements resolved by querySelectorAll" name="&lt;ButtonMenu/&gt; utils getChildMenuItemNodes should return the elements resolved by querySelectorAll" time="0.001">
    </testcase>
    <testcase classname="&lt;ButtonMenu/&gt; utils getChildMenuItemNodes should return an empty array if anything is passed" name="&lt;ButtonMenu/&gt; utils getChildMenuItemNodes should return an empty array if anything is passed" time="0">
    </testcase>
  </testsuite>
  <testsuite name="normalizeData" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:47" time="0.275" tests="3">
    <testcase classname="normalizeData should return the same data passed when it is an empty array" name="normalizeData should return the same data passed when it is an empty array" time="0.005">
    </testcase>
    <testcase classname="normalizeData should return the same data passed when it is an array" name="normalizeData should return the same data passed when it is an array" time="0.001">
    </testcase>
    <testcase classname="normalizeData should return an empty array when data passed is not an array" name="normalizeData should return an empty array when data passed is not an array" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getIndexes" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:47" time="0.277" tests="2">
    <testcase classname="getIndexes should return an empty object when rows passed is not an array or an empty array" name="getIndexes should return an empty object when rows passed is not an array or an empty array" time="0.003">
    </testcase>
    <testcase classname="getIndexes should return the right indexes object when rows are passed" name="getIndexes should return the right indexes object when rows are passed" time="0">
    </testcase>
  </testsuite>
  <testsuite name="isNotSameColumns" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:47" time="0.312" tests="10">
    <testcase classname="isNotSameColumns should return true when prevColumns and currentColumns does not have the same length " name="isNotSameColumns should return true when prevColumns and currentColumns does not have the same length " time="0.002">
    </testcase>
    <testcase classname="isNotSameColumns should return false when prevColumns and currentColumns are the same" name="isNotSameColumns should return false when prevColumns and currentColumns are the same" time="0.001">
    </testcase>
    <testcase classname="isNotSameColumns should return true when column field property changed" name="isNotSameColumns should return true when column field property changed" time="0.001">
    </testcase>
    <testcase classname="isNotSameColumns should return true when column sortable property changed" name="isNotSameColumns should return true when column sortable property changed" time="0.001">
    </testcase>
    <testcase classname="isNotSameColumns should return true when column header property changed" name="isNotSameColumns should return true when column header property changed" time="0.001">
    </testcase>
    <testcase classname="isNotSameColumns should return true when column component property changed" name="isNotSameColumns should return true when column component property changed" time="0.001">
    </testcase>
    <testcase classname="isNotSameColumns should return true when column defaultWith property changed" name="isNotSameColumns should return true when column defaultWith property changed" time="0">
    </testcase>
    <testcase classname="isNotSameColumns should return true when column width property changed" name="isNotSameColumns should return true when column width property changed" time="0.001">
    </testcase>
    <testcase classname="isNotSameColumns should return true when column type property changed" name="isNotSameColumns should return true when column type property changed" time="0">
    </testcase>
    <testcase classname="isNotSameColumns should return true when column children property changed" name="isNotSameColumns should return true when column children property changed" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getNextSortDirection" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:47" time="0.314" tests="11">
    <testcase classname="getNextSortDirection should return &quot;asc&quot; by default if any argument is passed" name="getNextSortDirection should return &quot;asc&quot; by default if any argument is passed" time="0.001">
    </testcase>
    <testcase classname="getNextSortDirection should return &quot;asc&quot; by default if only field is passed" name="getNextSortDirection should return &quot;asc&quot; by default if only field is passed" time="0">
    </testcase>
    <testcase classname="getNextSortDirection should return &quot;asc&quot; by default if only sortedBy is passed" name="getNextSortDirection should return &quot;asc&quot; by default if only sortedBy is passed" time="0.001">
    </testcase>
    <testcase classname="getNextSortDirection should return the sortDirection passed when field and sortedBy are not passed" name="getNextSortDirection should return the sortDirection passed when field and sortedBy are not passed" time="0">
    </testcase>
    <testcase classname="getNextSortDirection should return &quot;asc&quot; when sortDirection is not passed and field and sortBy does not match" name="getNextSortDirection should return &quot;asc&quot; when sortDirection is not passed and field and sortBy does not match" time="0.001">
    </testcase>
    <testcase classname="getNextSortDirection should return &quot;desc&quot; when sortDirection is not passed and field and sortBy match" name="getNextSortDirection should return &quot;desc&quot; when sortDirection is not passed and field and sortBy match" time="0">
    </testcase>
    <testcase classname="getNextSortDirection should return the sortDirection passed when sortedBy is not passed" name="getNextSortDirection should return the sortDirection passed when sortedBy is not passed" time="0.001">
    </testcase>
    <testcase classname="getNextSortDirection should return the sortDirection passed when field is not passed" name="getNextSortDirection should return the sortDirection passed when field is not passed" time="0">
    </testcase>
    <testcase classname="getNextSortDirection should return the sortDirection passed when field and sortedBy does not match" name="getNextSortDirection should return the sortDirection passed when field and sortedBy does not match" time="0">
    </testcase>
    <testcase classname="getNextSortDirection should return &quot;desc&quot; when sortDirection passed is &quot;asc&quot; and field and sortedBy match" name="getNextSortDirection should return &quot;desc&quot; when sortDirection passed is &quot;asc&quot; and field and sortedBy match" time="0.001">
    </testcase>
    <testcase classname="getNextSortDirection should return &quot;asc&quot; when sortDirection passed is &quot;desc&quot; and field and sortedBy match" name="getNextSortDirection should return &quot;asc&quot; when sortDirection passed is &quot;desc&quot; and field and sortedBy match" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;normalizeValue/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:47" time="0.285" tests="5">
    <testcase classname="&lt;normalizeValue/&gt; should return the same value passed if it is between 0 and 100" name="&lt;normalizeValue/&gt; should return the same value passed if it is between 0 and 100" time="0.001">
    </testcase>
    <testcase classname="&lt;normalizeValue/&gt; should return 0 if the value passed is less than 0" name="&lt;normalizeValue/&gt; should return 0 if the value passed is less than 0" time="0">
    </testcase>
    <testcase classname="&lt;normalizeValue/&gt; should return 100 if the value passed is more than 100" name="&lt;normalizeValue/&gt; should return 100 if the value passed is more than 100" time="0">
    </testcase>
    <testcase classname="&lt;normalizeValue/&gt; should return 100 if the value passed is equal 100" name="&lt;normalizeValue/&gt; should return 100 if the value passed is equal 100" time="0">
    </testcase>
    <testcase classname="&lt;normalizeValue/&gt; should return 0 if the value passed is equal 0" name="&lt;normalizeValue/&gt; should return 0 if the value passed is equal 0" time="0">
    </testcase>
  </testsuite>
  <testsuite name="computeUniqueRowKey" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:47" time="0.28" tests="5">
    <testcase classname="computeUniqueRowKey should return the right key when keyField is not passed" name="computeUniqueRowKey should return the right key when keyField is not passed" time="0.003">
    </testcase>
    <testcase classname="computeUniqueRowKey should return the right key when a wrong keyField is passed" name="computeUniqueRowKey should return the right key when a wrong keyField is passed" time="0.001">
    </testcase>
    <testcase classname="computeUniqueRowKey should return the right key when a valid keyField is passed" name="computeUniqueRowKey should return the right key when a valid keyField is passed" time="0.001">
    </testcase>
    <testcase classname="computeUniqueRowKey should return the right key when keyField use dot notation" name="computeUniqueRowKey should return the right key when keyField use dot notation" time="0.001">
    </testcase>
    <testcase classname="computeUniqueRowKey should return the right key when data is nested and keyField does not use dot notation" name="computeUniqueRowKey should return the right key when data is nested and keyField does not use dot notation" time="0">
    </testcase>
  </testsuite>
  <testsuite name="getRowsWithInitalSelectedRows" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:47" time="0.429" tests="9">
    <testcase classname="getRowsWithInitalSelectedRows should return an empty array when any params are passed" name="getRowsWithInitalSelectedRows should return an empty array when any params are passed" time="0.001">
    </testcase>
    <testcase classname="getRowsWithInitalSelectedRows should return the same rows passed when selectedRows passed is not an array" name="getRowsWithInitalSelectedRows should return the same rows passed when selectedRows passed is not an array" time="0.003">
    </testcase>
    <testcase classname="getRowsWithInitalSelectedRows should return the same rows passed when maxRowSelection passed is 0" name="getRowsWithInitalSelectedRows should return the same rows passed when maxRowSelection passed is 0" time="0.001">
    </testcase>
    <testcase classname="getRowsWithInitalSelectedRows should return the right rows when there are not selectedRows" name="getRowsWithInitalSelectedRows should return the right rows when there are not selectedRows" time="0.002">
    </testcase>
    <testcase classname="getRowsWithInitalSelectedRows should return the right rows when maxRowSelection is 1 and there is only one row selected" name="getRowsWithInitalSelectedRows should return the right rows when maxRowSelection is 1 and there is only one row selected" time="0.001">
    </testcase>
    <testcase classname="getRowsWithInitalSelectedRows should return the right rows when maxRowSelection is 1 and there is two rows selected" name="getRowsWithInitalSelectedRows should return the right rows when maxRowSelection is 1 and there is two rows selected" time="0.009">
    </testcase>
    <testcase classname="getRowsWithInitalSelectedRows should return the right rows when maxRowSelection is greater than 1 and match with the length of rows selected" name="getRowsWithInitalSelectedRows should return the right rows when maxRowSelection is greater than 1 and match with the length of rows selected" time="0.001">
    </testcase>
    <testcase classname="getRowsWithInitalSelectedRows should return the right rows when maxRowSelection is greater than 1 and less than the length of rows selected" name="getRowsWithInitalSelectedRows should return the right rows when maxRowSelection is greater than 1 and less than the length of rows selected" time="0.001">
    </testcase>
    <testcase classname="getRowsWithInitalSelectedRows should return the right rows when maxRowSelection is equal to previous selection lenght and greater than the length of rows selected" name="getRowsWithInitalSelectedRows should return the right rows when maxRowSelection is equal to previous selection lenght and greater than the length of rows selected" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ProgressBar/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:47" time="0.339" tests="2">
    <testcase classname="&lt;ProgressBar/&gt; should has set the value passed" name="&lt;ProgressBar/&gt; should has set the value passed" time="0.006">
    </testcase>
    <testcase classname="&lt;ProgressBar/&gt; should be accessible" name="&lt;ProgressBar/&gt; should be accessible" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ReCaptchaWrapper /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.35" tests="3">
    <testcase classname="&lt;ReCaptchaWrapper /&gt; should not render when isScriptLoaded and isScriptLoadSucceed are false" name="&lt;ReCaptchaWrapper /&gt; should not render when isScriptLoaded and isScriptLoadSucceed are false" time="0.013">
    </testcase>
    <testcase classname="&lt;ReCaptchaWrapper /&gt; should not render when isScriptLoaded is true and isScriptLoadSucceed is false" name="&lt;ReCaptchaWrapper /&gt; should not render when isScriptLoaded is true and isScriptLoadSucceed is false" time="0.002">
    </testcase>
    <testcase classname="&lt;ReCaptchaWrapper /&gt; should render the ReCaptcha loader with the right props" name="&lt;ReCaptchaWrapper /&gt; should render the ReCaptcha loader with the right props" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="getInitialFocusedIndex" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.281" tests="6">
    <testcase classname="getInitialFocusedIndex should return 0" name="getInitialFocusedIndex should return 0" time="0.002">
    </testcase>
    <testcase classname="getInitialFocusedIndex should return 1 when first option is type &quot;header&quot;" name="getInitialFocusedIndex should return 1 when first option is type &quot;header&quot;" time="0">
    </testcase>
    <testcase classname="getInitialFocusedIndex should return 0 when preferredSelectedOption is an invalid index" name="getInitialFocusedIndex should return 0 when preferredSelectedOption is an invalid index" time="0.001">
    </testcase>
    <testcase classname="getInitialFocusedIndex should return 0 when preferredSelectedOption is greater than non-header options" name="getInitialFocusedIndex should return 0 when preferredSelectedOption is greater than non-header options" time="0.005">
    </testcase>
    <testcase classname="getInitialFocusedIndex should return 3" name="getInitialFocusedIndex should return 3" time="0">
    </testcase>
    <testcase classname="getInitialFocusedIndex should return 4" name="getInitialFocusedIndex should return 4" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getMaxHeight" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.288" tests="4">
    <testcase classname="getMaxHeight should return the right height when is expanded and children has length of 3" name="getMaxHeight should return the right height when is expanded and children has length of 3" time="0.001">
    </testcase>
    <testcase classname="getMaxHeight should return the right height when is expanded and children is a single object" name="getMaxHeight should return the right height when is expanded and children is a single object" time="0.001">
    </testcase>
    <testcase classname="getMaxHeight should return 0 when is expanded and children is null" name="getMaxHeight should return 0 when is expanded and children is null" time="0.001">
    </testcase>
    <testcase classname="getMaxHeight should return 0 when is not expanded" name="getMaxHeight should return 0 when is not expanded" time="0">
    </testcase>
  </testsuite>
  <testsuite name="isValidMaxRowSelection" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.273" tests="5">
    <testcase classname="isValidMaxRowSelection should return false when any arguments are passed" name="isValidMaxRowSelection should return false when any arguments are passed" time="0.001">
    </testcase>
    <testcase classname="isValidMaxRowSelection should return true when maxRowSelection and rowsLength are the same" name="isValidMaxRowSelection should return true when maxRowSelection and rowsLength are the same" time="0.001">
    </testcase>
    <testcase classname="isValidMaxRowSelection should return true when maxRowSelection is less than rowsLength" name="isValidMaxRowSelection should return true when maxRowSelection is less than rowsLength" time="0.001">
    </testcase>
    <testcase classname="isValidMaxRowSelection should return false when maxRowSelection is greater than rowsLength" name="isValidMaxRowSelection should return false when maxRowSelection is greater than rowsLength" time="0.001">
    </testcase>
    <testcase classname="isValidMaxRowSelection should return false when maxRowSelection value is other than number" name="isValidMaxRowSelection should return false when maxRowSelection value is other than number" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Picklist/&gt;" errors="0" failures="0" skipped="1" timestamp="2020-03-11T17:53:47" time="0.438" tests="1">
    <testcase classname="&lt;Picklist/&gt; should be accessible" name="&lt;Picklist/&gt; should be accessible" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="&lt;Column /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.279" tests="1">
    <testcase classname="&lt;Column /&gt; should return a div element" name="&lt;Column /&gt; should return a div element" time="0.024">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Tabset/&gt; utils" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.37" tests="21">
    <testcase classname="&lt;Tabset/&gt; utils insertChildOrderly should insert the child in the right order if the item in the nodes is at middle" name="&lt;Tabset/&gt; utils insertChildOrderly should insert the child in the right order if the item in the nodes is at middle" time="0.002">
    </testcase>
    <testcase classname="&lt;Tabset/&gt; utils insertChildOrderly should insert the child in the right order if the item in the nodes is at end" name="&lt;Tabset/&gt; utils insertChildOrderly should insert the child in the right order if the item in the nodes is at end" time="0.002">
    </testcase>
    <testcase classname="&lt;Tabset/&gt; utils getChildTabNodes should call querySelectorAll with [role=&quot;tab&quot;]" name="&lt;Tabset/&gt; utils getChildTabNodes should call querySelectorAll with [role=&quot;tab&quot;]" time="0">
    </testcase>
    <testcase classname="&lt;Tabset/&gt; utils getChildTabNodes should return the elements resolved by querySelectorAll" name="&lt;Tabset/&gt; utils getChildTabNodes should return the elements resolved by querySelectorAll" time="0.001">
    </testcase>
    <testcase classname="&lt;Tabset/&gt; utils getChildTabNodes should return an empty array if anything is passed" name="&lt;Tabset/&gt; utils getChildTabNodes should return an empty array if anything is passed" time="0">
    </testcase>
    <testcase classname="&lt;Tabset/&gt; utils getTabIndexFromName should return the right index" name="&lt;Tabset/&gt; utils getTabIndexFromName should return the right index" time="0.002">
    </testcase>
    <testcase classname="&lt;Tabset/&gt; utils getChildrenTotalWidth should return 0 when any children in tabset has width" name="&lt;Tabset/&gt; utils getChildrenTotalWidth should return 0 when any children in tabset has width" time="0">
    </testcase>
    <testcase classname="&lt;Tabset/&gt; utils getChildrenTotalWidth should return 0 when tasbset has any children" name="&lt;Tabset/&gt; utils getChildrenTotalWidth should return 0 when tasbset has any children" time="0.001">
    </testcase>
    <testcase classname="&lt;Tabset/&gt; utils getChildrenTotalWidth should return the right total children width in tabset" name="&lt;Tabset/&gt; utils getChildrenTotalWidth should return the right total children width in tabset" time="0.001">
    </testcase>
    <testcase classname="&lt;Tabset/&gt; utils getChildrenTotalWidthUpToClickedTab should return the right total children width in tabset when click the second tab" name="&lt;Tabset/&gt; utils getChildrenTotalWidthUpToClickedTab should return the right total children width in tabset when click the second tab" time="0.001">
    </testcase>
    <testcase classname="&lt;Tabset/&gt; utils getChildrenTotalWidthUpToClickedTab should return 0 when click the first tab" name="&lt;Tabset/&gt; utils getChildrenTotalWidthUpToClickedTab should return 0 when click the first tab" time="0">
    </testcase>
    <testcase classname="&lt;Tabset/&gt; utils isNotSameChildren should return true when a children in the tabset was changed in the same position" name="&lt;Tabset/&gt; utils isNotSameChildren should return true when a children in the tabset was changed in the same position" time="0.001">
    </testcase>
    <testcase classname="&lt;Tabset/&gt; utils isNotSameChildren should return false when any children in tabset was changed in the same position" name="&lt;Tabset/&gt; utils isNotSameChildren should return false when any children in tabset was changed in the same position" time="0">
    </testcase>
    <testcase classname="&lt;Tabset/&gt; utils getUpdatedTabsetChildren should return an updated tabset with the changed tab when a name to update exist in the tabset children" name="&lt;Tabset/&gt; utils getUpdatedTabsetChildren should return an updated tabset with the changed tab when a name to update exist in the tabset children" time="0.001">
    </testcase>
    <testcase classname="&lt;Tabset/&gt; utils getUpdatedTabsetChildren should return the same tabset when a name to update do not exist in the tabset children" name="&lt;Tabset/&gt; utils getUpdatedTabsetChildren should return the same tabset when a name to update do not exist in the tabset children" time="0.001">
    </testcase>
    <testcase classname="&lt;Tabset/&gt; utils getLeftButtonDisabledState should return true when screen width is less than 600px and first tab is active" name="&lt;Tabset/&gt; utils getLeftButtonDisabledState should return true when screen width is less than 600px and first tab is active" time="0.001">
    </testcase>
    <testcase classname="&lt;Tabset/&gt; utils getLeftButtonDisabledState should return true when screen width is more than 600px and first tab is visible" name="&lt;Tabset/&gt; utils getLeftButtonDisabledState should return true when screen width is more than 600px and first tab is visible" time="0.001">
    </testcase>
    <testcase classname="&lt;Tabset/&gt; utils getLeftButtonDisabledState should return false when screen width is more than 600px and first tab is not visible" name="&lt;Tabset/&gt; utils getLeftButtonDisabledState should return false when screen width is more than 600px and first tab is not visible" time="0">
    </testcase>
    <testcase classname="&lt;Tabset/&gt; utils getRightButtonDisabledState should return true when screen width is less than 600px and last tab is active" name="&lt;Tabset/&gt; utils getRightButtonDisabledState should return true when screen width is less than 600px and last tab is active" time="0.001">
    </testcase>
    <testcase classname="&lt;Tabset/&gt; utils getRightButtonDisabledState should return true when screen width is more than 600px and last tab is visible" name="&lt;Tabset/&gt; utils getRightButtonDisabledState should return true when screen width is more than 600px and last tab is visible" time="0">
    </testcase>
    <testcase classname="&lt;Tabset/&gt; utils getRightButtonDisabledState should return false when screen width is more than 600px and last tab is not visible" name="&lt;Tabset/&gt; utils getRightButtonDisabledState should return false when screen width is more than 600px and last tab is not visible" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ProgressCircular/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.357" tests="2">
    <testcase classname="&lt;ProgressCircular/&gt; should be accessible" name="&lt;ProgressCircular/&gt; should be accessible" time="0.005">
    </testcase>
    <testcase classname="&lt;ProgressCircular/&gt; should has set the value passed" name="&lt;ProgressCircular/&gt; should has set the value passed" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="getUpdatedRowsWhenSelect" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.305" tests="6">
    <testcase classname="getUpdatedRowsWhenSelect should return an empty array when any params are passed" name="getUpdatedRowsWhenSelect should return an empty array when any params are passed" time="0.001">
    </testcase>
    <testcase classname="getUpdatedRowsWhenSelect should return the same rows passed when rows are the only param passed" name="getUpdatedRowsWhenSelect should return the same rows passed when rows are the only param passed" time="0.001">
    </testcase>
    <testcase classname="getUpdatedRowsWhenSelect should return the right rows when maxRowSelection is less than 1" name="getUpdatedRowsWhenSelect should return the right rows when maxRowSelection is less than 1" time="0.002">
    </testcase>
    <testcase classname="getUpdatedRowsWhenSelect should return the right rows when maxRowSelection is 2" name="getUpdatedRowsWhenSelect should return the right rows when maxRowSelection is 2" time="0.001">
    </testcase>
    <testcase classname="getUpdatedRowsWhenSelect should return the right rows when maxRowSelection is 3" name="getUpdatedRowsWhenSelect should return the right rows when maxRowSelection is 3" time="0.001">
    </testcase>
    <testcase classname="getUpdatedRowsWhenSelect should return the right rows when is multiple and the last row selected is &quot;row-1&quot;" name="getUpdatedRowsWhenSelect should return the right rows when is multiple and the last row selected is &quot;row-1&quot;" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getBulkSelectionState" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.285" tests="4">
    <testcase classname="getBulkSelectionState should return &quot;none&quot; when any params are passed" name="getBulkSelectionState should return &quot;none&quot; when any params are passed" time="0.002">
    </testcase>
    <testcase classname="getBulkSelectionState should return &quot;none&quot; when selectedRowsKeys length is 0" name="getBulkSelectionState should return &quot;none&quot; when selectedRowsKeys length is 0" time="0.001">
    </testcase>
    <testcase classname="getBulkSelectionState should return &quot;all&quot; when maxRowSelection match with the selectedRowsKeys length" name="getBulkSelectionState should return &quot;all&quot; when maxRowSelection match with the selectedRowsKeys length" time="0">
    </testcase>
    <testcase classname="getBulkSelectionState should return &quot;some&quot; when selectedRowsKeys length is other than 0 and does not match with maxRowSelection" name="getBulkSelectionState should return &quot;some&quot; when selectedRowsKeys length is other than 0 and does not match with maxRowSelection" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ButtonIcon /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.439" tests="1">
    <testcase classname="&lt;ButtonIcon /&gt; should be focusable" name="&lt;ButtonIcon /&gt; should be focusable" time="0.038">
    </testcase>
  </testsuite>
  <testsuite name="isOptionVisible" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.303" tests="2">
    <testcase classname="isOptionVisible should return true when element is within container visible bounds" name="isOptionVisible should return true when element is within container visible bounds" time="0.002">
    </testcase>
    <testcase classname="isOptionVisible should return false when element is not within container visible bounds" name="isOptionVisible should return false when element is not within container visible bounds" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="isValidDate" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.309" tests="2">
    <testcase classname="isValidDate should return false" name="isValidDate should return false" time="0.003">
    </testcase>
    <testcase classname="isValidDate should return true" name="isValidDate should return true" time="0">
    </testcase>
  </testsuite>
  <testsuite name="getRowIndexByKey" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.295" tests="3">
    <testcase classname="getRowIndexByKey should return undefined when any argument is passed" name="getRowIndexByKey should return undefined when any argument is passed" time="0.001">
    </testcase>
    <testcase classname="getRowIndexByKey should return undefined when the key passed does not exists in indexes" name="getRowIndexByKey should return undefined when the key passed does not exists in indexes" time="0.002">
    </testcase>
    <testcase classname="getRowIndexByKey should return the right index" name="getRowIndexByKey should return the right index" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getSelectedRowKeysFromSelectedRows" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.303" tests="3">
    <testcase classname="getSelectedRowKeysFromSelectedRows should return an empty object when no argument is passed" name="getSelectedRowKeysFromSelectedRows should return an empty object when no argument is passed" time="0.004">
    </testcase>
    <testcase classname="getSelectedRowKeysFromSelectedRows should return an empty object when selectedRows passed are not valid" name="getSelectedRowKeysFromSelectedRows should return an empty object when selectedRows passed are not valid" time="0.001">
    </testcase>
    <testcase classname="getSelectedRowKeysFromSelectedRows should return the right selectedRowKeys" name="getSelectedRowKeysFromSelectedRows should return the right selectedRowKeys" time="0">
    </testcase>
  </testsuite>
  <testsuite name="isNavigationKey" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.304" tests="2">
    <testcase classname="isNavigationKey should return true when pass up, down or enter key" name="isNavigationKey should return true when pass up, down or enter key" time="0.001">
    </testcase>
    <testcase classname="isNavigationKey should return false when pass other keys than up, down or enter" name="isNavigationKey should return false when pass other keys than up, down or enter" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="getUpdatedRowsWhenDeselectAll" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.281" tests="2">
    <testcase classname="getUpdatedRowsWhenDeselectAll should return an empty arra when rows is not passed" name="getUpdatedRowsWhenDeselectAll should return an empty arra when rows is not passed" time="0.001">
    </testcase>
    <testcase classname="getUpdatedRowsWhenDeselectAll should return the right rows" name="getUpdatedRowsWhenDeselectAll should return the right rows" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getUpdatedRowsWhenDeselect" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.344" tests="6">
    <testcase classname="getUpdatedRowsWhenDeselect should return an empty array when any params are passed" name="getUpdatedRowsWhenDeselect should return an empty array when any params are passed" time="0.001">
    </testcase>
    <testcase classname="getUpdatedRowsWhenDeselect should return the same rows passed when rows are the only param passed" name="getUpdatedRowsWhenDeselect should return the same rows passed when rows are the only param passed" time="0.001">
    </testcase>
    <testcase classname="getUpdatedRowsWhenDeselect should return the right rows when maxRowSelection is 0" name="getUpdatedRowsWhenDeselect should return the right rows when maxRowSelection is 0" time="0.002">
    </testcase>
    <testcase classname="getUpdatedRowsWhenDeselect should return the right rows when maxRowSelection is greater than 0" name="getUpdatedRowsWhenDeselect should return the right rows when maxRowSelection is greater than 0" time="0.004">
    </testcase>
    <testcase classname="getUpdatedRowsWhenDeselect should return the right rows when there are two row selected and maxRowSelection 4" name="getUpdatedRowsWhenDeselect should return the right rows when there are two row selected and maxRowSelection 4" time="0.001">
    </testcase>
    <testcase classname="getUpdatedRowsWhenDeselect should return the right rows when is multiple and the last row selected is &quot;row-1&quot;" name="getUpdatedRowsWhenDeselect should return the right rows when is multiple and the last row selected is &quot;row-1&quot;" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="resizer helper" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.288" tests="2">
    <testcase classname="resizer helper getWidthStyle should return an empty string when value passed is not great than zero" name="resizer helper getWidthStyle should return an empty string when value passed is not great than zero" time="0.001">
    </testcase>
    <testcase classname="resizer helper getWidthStyle should return the right width style" name="resizer helper getWidthStyle should return the right width style" time="0">
    </testcase>
  </testsuite>
  <testsuite name="formatValue" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.285" tests="2">
    <testcase classname="formatValue should return empty object" name="formatValue should return empty object" time="0.002">
    </testcase>
    <testcase classname="formatValue should return fomatted values" name="formatValue should return fomatted values" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getMapContainerStyles" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.298" tests="4">
    <testcase classname="getMapContainerStyles should return null if a ref is not passed" name="getMapContainerStyles should return null if a ref is not passed" time="0.001">
    </testcase>
    <testcase classname="getMapContainerStyles should return null if ref passed does not have a parentNode" name="getMapContainerStyles should return null if ref passed does not have a parentNode" time="0.001">
    </testcase>
    <testcase classname="getMapContainerStyles should return null if the parentNode the ref passed has an height set" name="getMapContainerStyles should return null if the parentNode the ref passed has an height set" time="0">
    </testcase>
    <testcase classname="getMapContainerStyles should return an object with a minHeght of 300 if the parentNode of the ref passed does not have an height set" name="getMapContainerStyles should return an object with a minHeght of 300 if the parentNode of the ref passed does not have an height set" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getTableWidth" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.276" tests="2">
    <testcase classname="getTableWidth should return 0 when nothing is passed" name="getTableWidth should return 0 when nothing is passed" time="0.001">
    </testcase>
    <testcase classname="getTableWidth should return the right table width" name="getTableWidth should return the right table width" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;InputRequiredAsterisk/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.341" tests="2">
    <testcase classname="&lt;InputRequiredAsterisk/&gt; should render the abbr element when is required" name="&lt;InputRequiredAsterisk/&gt; should render the abbr element when is required" time="0.021">
    </testcase>
    <testcase classname="&lt;InputRequiredAsterisk/&gt; should set the title prop as required in the abbr element when is required" name="&lt;InputRequiredAsterisk/&gt; should set the title prop as required in the abbr element when is required" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CarouselCard/&gt; utils" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.317" tests="11">
    <testcase classname="&lt;CarouselCard/&gt; utils insertChildOrderly should insert the child in the right order if the item in the nodes is at middle" name="&lt;CarouselCard/&gt; utils insertChildOrderly should insert the child in the right order if the item in the nodes is at middle" time="0.001">
    </testcase>
    <testcase classname="&lt;CarouselCard/&gt; utils insertChildOrderly should insert the child in the right order if the item in the nodes is at end" name="&lt;CarouselCard/&gt; utils insertChildOrderly should insert the child in the right order if the item in the nodes is at end" time="0.001">
    </testcase>
    <testcase classname="&lt;CarouselCard/&gt; utils getChildTabNodes should call querySelectorAll with [role=&quot;tabpanel&quot;]" name="&lt;CarouselCard/&gt; utils getChildTabNodes should call querySelectorAll with [role=&quot;tabpanel&quot;]" time="0.006">
    </testcase>
    <testcase classname="&lt;CarouselCard/&gt; utils getChildTabNodes should return the elements resolved by querySelectorAll" name="&lt;CarouselCard/&gt; utils getChildTabNodes should return the elements resolved by querySelectorAll" time="0">
    </testcase>
    <testcase classname="&lt;CarouselCard/&gt; utils getChildTabNodes should return an empty array if anything is passed" name="&lt;CarouselCard/&gt; utils getChildTabNodes should return an empty array if anything is passed" time="0.001">
    </testcase>
    <testcase classname="&lt;CarouselCard/&gt; utils getItemIndex should return the index in the array of the item passed" name="&lt;CarouselCard/&gt; utils getItemIndex should return the index in the array of the item passed" time="0">
    </testcase>
    <testcase classname="&lt;CarouselCard/&gt; utils getItemIndex should return undefined if the item passed is not in the array" name="&lt;CarouselCard/&gt; utils getItemIndex should return undefined if the item passed is not in the array" time="0">
    </testcase>
    <testcase classname="&lt;CarouselCard/&gt; utils getCarouselCardContainerStyles should return null if a ref is not passed" name="&lt;CarouselCard/&gt; utils getCarouselCardContainerStyles should return null if a ref is not passed" time="0.001">
    </testcase>
    <testcase classname="&lt;CarouselCard/&gt; utils getCarouselCardContainerStyles should return null if ref passed does not have a parentNode" name="&lt;CarouselCard/&gt; utils getCarouselCardContainerStyles should return null if ref passed does not have a parentNode" time="0">
    </testcase>
    <testcase classname="&lt;CarouselCard/&gt; utils getCarouselCardContainerStyles should return an object with a height of 100% if the parentNode the ref passed has an height set" name="&lt;CarouselCard/&gt; utils getCarouselCardContainerStyles should return an object with a height of 100% if the parentNode the ref passed has an height set" time="0">
    </testcase>
    <testcase classname="&lt;CarouselCard/&gt; utils getCarouselCardContainerStyles should return an object with a height of 340 if the parentNode of the ref passed does not have an height set" name="&lt;CarouselCard/&gt; utils getCarouselCardContainerStyles should return an object with a height of 340 if the parentNode of the ref passed does not have an height set" time="0">
    </testcase>
  </testsuite>
  <testsuite name="&lt;normalizeValue/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.3" tests="5">
    <testcase classname="&lt;normalizeValue/&gt; should return the same value passed if it is between 0 and 100" name="&lt;normalizeValue/&gt; should return the same value passed if it is between 0 and 100" time="0.001">
    </testcase>
    <testcase classname="&lt;normalizeValue/&gt; should return 0 if the value passed is less than 0" name="&lt;normalizeValue/&gt; should return 0 if the value passed is less than 0" time="0.001">
    </testcase>
    <testcase classname="&lt;normalizeValue/&gt; should return 100 if the value passed is more than 100" name="&lt;normalizeValue/&gt; should return 100 if the value passed is more than 100" time="0">
    </testcase>
    <testcase classname="&lt;normalizeValue/&gt; should return 100 if the value passed is equal 100" name="&lt;normalizeValue/&gt; should return 100 if the value passed is equal 100" time="0.005">
    </testcase>
    <testcase classname="&lt;normalizeValue/&gt; should return 0 if the value passed is equal 0" name="&lt;normalizeValue/&gt; should return 0 if the value passed is equal 0" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="extractDate" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.294" tests="3">
    <testcase classname="extractDate should return an empty string when pass falsy values" name="extractDate should return an empty string when pass falsy values" time="0.002">
    </testcase>
    <testcase classname="extractDate should return an empty string when pass an invalid date" name="extractDate should return an empty string when pass an invalid date" time="0.01">
    </testcase>
    <testcase classname="extractDate should return the right date" name="extractDate should return the right date" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;SelectOptions /&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.307" tests="2">
    <testcase classname="&lt;SelectOptions /&gt; should return the right amount of option items" name="&lt;SelectOptions /&gt; should return the right amount of option items" time="0.014">
    </testcase>
    <testcase classname="&lt;SelectOptions /&gt; should pass the right props to option element" name="&lt;SelectOptions /&gt; should pass the right props to option element" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="isOptionVisible" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.307" tests="4">
    <testcase classname="isOptionVisible should return true when rect dimensions match in element and container" name="isOptionVisible should return true when rect dimensions match in element and container" time="0.001">
    </testcase>
    <testcase classname="isOptionVisible should return true when element rect dimensions are inside container" name="isOptionVisible should return true when element rect dimensions are inside container" time="0">
    </testcase>
    <testcase classname="isOptionVisible should return false when element top is less than container top" name="isOptionVisible should return false when element top is less than container top" time="0.001">
    </testcase>
    <testcase classname="isOptionVisible should return false when element bottom is greater than container bottom" name="isOptionVisible should return false when element bottom is greater than container bottom" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="resolveDatasets function" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.288" tests="1">
    <testcase classname="resolveDatasets function should return the dataset array with all the data" name="resolveDatasets function should return the dataset array with all the data" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getOptionsLength" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.284" tests="3">
    <testcase classname="getOptionsLength should return 0" name="getOptionsLength should return 0" time="0.001">
    </testcase>
    <testcase classname="getOptionsLength should return the right length when there is not type &quot;header&quot;" name="getOptionsLength should return the right length when there is not type &quot;header&quot;" time="0.001">
    </testcase>
    <testcase classname="getOptionsLength should return the right length when there is type &quot;header&quot;" name="getOptionsLength should return the right length when there is type &quot;header&quot;" time="0">
    </testcase>
  </testsuite>
  <testsuite name="isDisabledRow" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.294" tests="6">
    <testcase classname="isDisabledRow should return false when any params are passed" name="isDisabledRow should return false when any params are passed" time="0">
    </testcase>
    <testcase classname="isDisabledRow should return false when the row is selected" name="isDisabledRow should return false when the row is selected" time="0.001">
    </testcase>
    <testcase classname="isDisabledRow should return false when the row is not selected but maxRowSelection 1" name="isDisabledRow should return false when the row is not selected but maxRowSelection 1" time="0">
    </testcase>
    <testcase classname="isDisabledRow should return false when the row is not selected, maxRowSelection is not 1 and does not match with selectedRowKeys length" name="isDisabledRow should return false when the row is not selected, maxRowSelection is not 1 and does not match with selectedRowKeys length" time="0">
    </testcase>
    <testcase classname="isDisabledRow should return true when maxRowSelection is 0" name="isDisabledRow should return true when maxRowSelection is 0" time="0">
    </testcase>
    <testcase classname="isDisabledRow should return true when row is not selected and maxRowSelection match with selectedRowKeys length" name="isDisabledRow should return true when row is not selected and maxRowSelection match with selectedRowKeys length" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getResizedColumns" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.298" tests="2">
    <testcase classname="getResizedColumns should return the same columns passed" name="getResizedColumns should return the same columns passed" time="0.001">
    </testcase>
    <testcase classname="getResizedColumns should return the right columns" name="getResizedColumns should return the right columns" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getColumns" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.326" tests="8">
    <testcase classname="getColumns should return null when children is null and showCheckboxColumn is false" name="getColumns should return null when children is null and showCheckboxColumn is false" time="0.001">
    </testcase>
    <testcase classname="getColumns should return an empty array when children is not passed" name="getColumns should return an empty array when children is not passed" time="0.001">
    </testcase>
    <testcase classname="getColumns should return an empty array when children is an array with falsy values and showCheckboxColumn is false" name="getColumns should return an empty array when children is an array with falsy values and showCheckboxColumn is false" time="0">
    </testcase>
    <testcase classname="getColumns should return an array with the columns props when showCheckboxColumn is false" name="getColumns should return an array with the columns props when showCheckboxColumn is false" time="0.002">
    </testcase>
    <testcase classname="getColumns should return an array with the columns props plus the selectable column when showCheckboxColumn is true" name="getColumns should return an array with the columns props plus the selectable column when showCheckboxColumn is true" time="0.001">
    </testcase>
    <testcase classname="getColumns should return an array with the right columns props when one column is type &quot;action&quot;" name="getColumns should return an array with the right columns props when one column is type &quot;action&quot;" time="0.003">
    </testcase>
    <testcase classname="getColumns should return an array with the right columns props when defaultWidth and width are passed" name="getColumns should return an array with the right columns props when defaultWidth and width are passed" time="0.001">
    </testcase>
    <testcase classname="getColumns should return an array with the right columns props when defaultWidth is passed and is out of range" name="getColumns should return an array with the right columns props when defaultWidth is passed and is out of range" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="isChildRegistered" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.288" tests="2">
    <testcase classname="isChildRegistered should return true if children is already registered" name="isChildRegistered should return true if children is already registered" time="0.001">
    </testcase>
    <testcase classname="isChildRegistered should return false if children is not registered" name="isChildRegistered should return false if children is not registered" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;RenderIf/&gt;" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.435" tests="2">
    <testcase classname="&lt;RenderIf/&gt; should not render the children when isTrue is false" name="&lt;RenderIf/&gt; should not render the children when isTrue is false" time="0.02">
    </testcase>
    <testcase classname="&lt;RenderIf/&gt; should render the children when isTrue is true" name="&lt;RenderIf/&gt; should render the children when isTrue is true" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="getUpdatedRowsWhenSelectAll" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.299" tests="5">
    <testcase classname="getUpdatedRowsWhenSelectAll should an empty array when any params are passed" name="getUpdatedRowsWhenSelectAll should an empty array when any params are passed" time="0.001">
    </testcase>
    <testcase classname="getUpdatedRowsWhenSelectAll should the right rows when only rows param is passed" name="getUpdatedRowsWhenSelectAll should the right rows when only rows param is passed" time="0.001">
    </testcase>
    <testcase classname="getUpdatedRowsWhenSelectAll should the right rows when maxRowSelection is 1" name="getUpdatedRowsWhenSelectAll should the right rows when maxRowSelection is 1" time="0.001">
    </testcase>
    <testcase classname="getUpdatedRowsWhenSelectAll should the right rows when maxRowSelection is 2" name="getUpdatedRowsWhenSelectAll should the right rows when maxRowSelection is 2" time="0.001">
    </testcase>
    <testcase classname="getUpdatedRowsWhenSelectAll should the right rows when maxRowSelection is 3" name="getUpdatedRowsWhenSelectAll should the right rows when maxRowSelection is 3" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getSearchParams" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.299" tests="3">
    <testcase classname="getSearchParams should convert searchOptions (with bounds and types) into google.maps.places.AutocompleteRequest search options" name="getSearchParams should convert searchOptions (with bounds and types) into google.maps.places.AutocompleteRequest search options" time="0.002">
    </testcase>
    <testcase classname="getSearchParams should convert searchOptions (with location, radiusn types and country) into google.maps.places.AutocompleteRequest search options" name="getSearchParams should convert searchOptions (with location, radiusn types and country) into google.maps.places.AutocompleteRequest search options" time="0.001">
    </testcase>
    <testcase classname="getSearchParams should convert searchOptions (several countries) into google.maps.places.AutocompleteRequest search options" name="getSearchParams should convert searchOptions (several countries) into google.maps.places.AutocompleteRequest search options" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="getRowSelectionInputType" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.291" tests="4">
    <testcase classname="getRowSelectionInputType should return &quot;radio&quot; when maxRowSelection passed is 1" name="getRowSelectionInputType should return &quot;radio&quot; when maxRowSelection passed is 1" time="0.001">
    </testcase>
    <testcase classname="getRowSelectionInputType should return &quot;checkbox&quot; when maxRowSelection passed is other than 1" name="getRowSelectionInputType should return &quot;checkbox&quot; when maxRowSelection passed is other than 1" time="0.007">
    </testcase>
    <testcase classname="getRowSelectionInputType should return &quot;checkbox&quot; when maxRowSelection passed is 1 and rows length is 1" name="getRowSelectionInputType should return &quot;checkbox&quot; when maxRowSelection passed is 1 and rows length is 1" time="0.001">
    </testcase>
    <testcase classname="getRowSelectionInputType should return &quot;checkbox&quot; when maxRowSelection passed is greater than 1 and rows length is 1" name="getRowSelectionInputType should return &quot;checkbox&quot; when maxRowSelection passed is greater than 1 and rows length is 1" time="0">
    </testcase>
  </testsuite>
  <testsuite name="normalizeInitials()" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.307" tests="3">
    <testcase classname="normalizeInitials() should return one letter when one letter is passed" name="normalizeInitials() should return one letter when one letter is passed" time="0.001">
    </testcase>
    <testcase classname="normalizeInitials() should return two letters when two letters are passed" name="normalizeInitials() should return two letters when two letters are passed" time="0">
    </testcase>
    <testcase classname="normalizeInitials() should return two letters when more of two letters are passed" name="normalizeInitials() should return two letters when more of two letters are passed" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="resizer helper" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.317" tests="5">
    <testcase classname="resizer helper getUpdatedColumns should return an empty array" name="resizer helper getUpdatedColumns should return an empty array" time="0.001">
    </testcase>
    <testcase classname="resizer helper getUpdatedColumns should return the right columns" name="resizer helper getUpdatedColumns should return the right columns" time="0.002">
    </testcase>
    <testcase classname="resizer helper getUpdatedColumns should return the right columns when already have metadata" name="resizer helper getUpdatedColumns should return the right columns when already have metadata" time="0">
    </testcase>
    <testcase classname="resizer helper getUpdatedColumns should return the right columns when have width or defaultWidth" name="resizer helper getUpdatedColumns should return the right columns when have width or defaultWidth" time="0.001">
    </testcase>
    <testcase classname="resizer helper getUpdatedColumns should return the right columns when have width or defaultWidth but are resized" name="resizer helper getUpdatedColumns should return the right columns when have width or defaultWidth but are resized" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getUrl function" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.283" tests="2">
    <testcase classname="getUrl function should return the recaptcha url without the lang param" name="getUrl function should return the recaptcha url without the lang param" time="0">
    </testcase>
    <testcase classname="getUrl function should return the recaptcha url with the lang param" name="getUrl function should return the recaptcha url with the lang param" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="isScrollPositionAtMenuBottom" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.282" tests="2">
    <testcase classname="isScrollPositionAtMenuBottom should return true when scroll position is at bottom" name="isScrollPositionAtMenuBottom should return true when scroll position is at bottom" time="0">
    </testcase>
    <testcase classname="isScrollPositionAtMenuBottom should return false when scroll position is not at bottom" name="isScrollPositionAtMenuBottom should return false when scroll position is not at bottom" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="addDays" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.286" tests="1">
    <testcase classname="addDays should return a date 3 days after" name="addDays should return a date 3 days after" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="shouldOpenMenu" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:48" time="0.259" tests="2">
    <testcase classname="shouldOpenMenu should return true only when UP_KEY, DOWN_KEY, LEFT_KEY, RIGHT_KEY, SPACE_KEY, ENTER_KEY are pressed" name="shouldOpenMenu should return true only when UP_KEY, DOWN_KEY, LEFT_KEY, RIGHT_KEY, SPACE_KEY, ENTER_KEY are pressed" time="0.001">
    </testcase>
    <testcase classname="shouldOpenMenu should return false when TAB_KEY, DELETE_KEY, ESCAPE_KEY are pressed" name="shouldOpenMenu should return false when TAB_KEY, DELETE_KEY, ESCAPE_KEY are pressed" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="isOptionChecked" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:49" time="0.186" tests="2">
    <testcase classname="isOptionChecked should return false when value is empty" name="isOptionChecked should return false when value is empty" time="0.004">
    </testcase>
    <testcase classname="isOptionChecked should return true when option is selected and it is not disabled" name="isOptionChecked should return true when option is selected and it is not disabled" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getNormalizedOptions" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:49" time="0.194" tests="4">
    <testcase classname="getNormalizedOptions should return an empty array when the options passed are not an array or an empty array" name="getNormalizedOptions should return an empty array when the options passed are not an array or an empty array" time="0.001">
    </testcase>
    <testcase classname="getNormalizedOptions should return the same options when there are not type &quot;section&quot;" name="getNormalizedOptions should return the same options when there are not type &quot;section&quot;" time="0.001">
    </testcase>
    <testcase classname="getNormalizedOptions should return the option normalized" name="getNormalizedOptions should return the option normalized" time="0">
    </testcase>
    <testcase classname="getNormalizedOptions should return only the header option when deep options is not an array" name="getNormalizedOptions should return only the header option when deep options is not an array" time="0">
    </testcase>
  </testsuite>
  <testsuite name="getNormalizeValue" errors="0" failures="0" skipped="0" timestamp="2020-03-11T17:53:49" time="0.177" tests="1">
    <testcase classname="getNormalizeValue should return right value" name="getNormalizeValue should return right value" time="0.002">
    </testcase>
  </testsuite>
</testsuites>